
Zadanie10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cfc  08002cfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08002cfc  08002cfc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cfc  08002cfc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cfc  08002cfc  00012cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08002d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  200001dc  08002ee0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08002ee0  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ba9  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e1  00000000  00000000  00027db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  00029598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  00029db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017232  00000000  00000000  0002a510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000057c3  00000000  00000000  00041742  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079886  00000000  00000000  00046f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c078b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022e0  00000000  00000000  000c0808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b84 	.word	0x08002b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08002b84 	.word	0x08002b84

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db0b      	blt.n	8000206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <__NVIC_EnableIRQ+0x38>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000228:	2b00      	cmp	r3, #0
 800022a:	db0a      	blt.n	8000242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	b2da      	uxtb	r2, r3
 8000230:	490c      	ldr	r1, [pc, #48]	; (8000264 <__NVIC_SetPriority+0x4c>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	0112      	lsls	r2, r2, #4
 8000238:	b2d2      	uxtb	r2, r2
 800023a:	440b      	add	r3, r1
 800023c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000240:	e00a      	b.n	8000258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4908      	ldr	r1, [pc, #32]	; (8000268 <__NVIC_SetPriority+0x50>)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 030f 	and.w	r3, r3, #15
 800024e:	3b04      	subs	r3, #4
 8000250:	0112      	lsls	r2, r2, #4
 8000252:	b2d2      	uxtb	r2, r2
 8000254:	440b      	add	r3, r1
 8000256:	761a      	strb	r2, [r3, #24]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000e100 	.word	0xe000e100
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	4907      	ldr	r1, [pc, #28]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4313      	orrs	r3, r2
 800027e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4013      	ands	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800028a:	68fb      	ldr	r3, [r7, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000

0800029c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffe3 	bl	800026c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2010      	movs	r0, #16
 80002aa:	f7ff ffb5 	bl	8000218 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002ae:	2010      	movs	r0, #16
 80002b0:	f7ff ff94 	bl	80001dc <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2011      	movs	r0, #17
 80002b8:	f7ff ffae 	bl	8000218 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002bc:	2011      	movs	r0, #17
 80002be:	f7ff ff8d 	bl	80001dc <__NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <LL_AHB1_GRP1_EnableClock>:
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4313      	orrs	r3, r2
 80002da:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4013      	ands	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002e6:	68fb      	ldr	r3, [r7, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80002fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000300:	f7ff ffe2 	bl	80002c8 <LL_AHB1_GRP1_EnableClock>

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <__NVIC_SetPriorityGrouping>:
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <__NVIC_SetPriorityGrouping+0x44>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000324:	4013      	ands	r3, r2
 8000326:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <__NVIC_SetPriorityGrouping+0x44>)
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	60d3      	str	r3, [r2, #12]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <LL_RCC_HSI_Enable+0x1c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <LL_RCC_HSI_Enable+0x1c>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_RCC_HSI_IsReady+0x20>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0302 	and.w	r3, r3, #2
 800037c:	2b02      	cmp	r3, #2
 800037e:	bf0c      	ite	eq
 8000380:	2301      	moveq	r3, #1
 8000382:	2300      	movne	r3, #0
 8000384:	b2db      	uxtb	r3, r3
}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40021000 	.word	0x40021000

08000394 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	00db      	lsls	r3, r3, #3
 80003a8:	4904      	ldr	r1, [pc, #16]	; (80003bc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003aa:	4313      	orrs	r3, r2
 80003ac:	600b      	str	r3, [r1, #0]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000

080003c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <LL_RCC_SetSysClkSource+0x24>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	f023 0203 	bic.w	r2, r3, #3
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_SetSysClkSource+0x24>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4313      	orrs	r3, r2
 80003d6:	604b      	str	r3, [r1, #4]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <LL_RCC_GetSysClkSource+0x18>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f003 030c 	and.w	r3, r3, #12
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <LL_RCC_SetAHBPrescaler+0x24>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000414:	4904      	ldr	r1, [pc, #16]	; (8000428 <LL_RCC_SetAHBPrescaler+0x24>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	604b      	str	r3, [r1, #4]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <LL_RCC_SetAPB1Prescaler+0x24>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	604b      	str	r3, [r1, #4]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_RCC_SetAPB2Prescaler+0x24>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000464:	4904      	ldr	r1, [pc, #16]	; (8000478 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4313      	orrs	r3, r2
 800046a:	604b      	str	r3, [r1, #4]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000486:	69da      	ldr	r2, [r3, #28]
 8000488:	4907      	ldr	r1, [pc, #28]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000492:	69da      	ldr	r2, [r3, #28]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4013      	ands	r3, r2
 8000498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049a:	68fb      	ldr	r3, [r7, #12]
}
 800049c:	bf00      	nop
 800049e:	3714      	adds	r7, #20
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40021000 	.word	0x40021000

080004ac <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b4:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004b6:	699a      	ldr	r2, [r3, #24]
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_FLASH_SetLatency+0x24>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f023 0207 	bic.w	r2, r3, #7
 80004ec:	4904      	ldr	r1, [pc, #16]	; (8000500 <LL_FLASH_SetLatency+0x24>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4313      	orrs	r3, r2
 80004f2:	600b      	str	r3, [r1, #0]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	40022000 	.word	0x40022000

08000504 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <LL_FLASH_GetLatency+0x18>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0307 	and.w	r3, r3, #7
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40022000 	.word	0x40022000

08000520 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f043 0201 	orr.w	r2, r3, #1
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6a1a      	ldr	r2, [r3, #32]
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	431a      	orrs	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	621a      	str	r2, [r3, #32]
}
 8000556:	bf00      	nop
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000562:	b480      	push	{r7}
 8000564:	b083      	sub	sp, #12
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	f043 0201 	orr.w	r2, r3, #1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60da      	str	r2, [r3, #12]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000588:	2001      	movs	r0, #1
 800058a:	f7ff ff8f 	bl	80004ac <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800058e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000592:	f7ff ff73 	bl	800047c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	2003      	movs	r0, #3
 8000598:	f7ff feb6 	bl	8000308 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f83a 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f7ff feaa 	bl	80002f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f7ff fe7a 	bl	800029c <MX_DMA_Init>
  MX_TIM2_Init();
 80005a8:	f000 fc68 	bl	8000e7c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ac:	f000 fcdc 	bl	8000f68 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005b0:	f001 f830 	bl	8001614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <main+0x68>)
 80005b6:	f001 f81b 	bl	80015f0 <USART2_RegisterCallback>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 80005ba:	2101      	movs	r1, #1
 80005bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005c0:	f7ff ffbe 	bl	8000540 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableIT_UPDATE(TIM2);
 80005c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005c8:	f7ff ffcb 	bl	8000562 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);
 80005cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005d0:	f7ff ffa6 	bl	8000520 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM3);
 80005d4:	4806      	ldr	r0, [pc, #24]	; (80005f0 <main+0x6c>)
 80005d6:	f7ff ffc4 	bl	8000562 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <main+0x6c>)
 80005dc:	f7ff ffa0 	bl	8000520 <LL_TIM_EnableCounter>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	#if POLLING
		USART2_CheckDmaReception();
 80005e0:	f001 f8f0 	bl	80017c4 <USART2_CheckDmaReception>
		LL_mDelay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f002 f9a3 	bl	8002930 <LL_mDelay>
		USART2_CheckDmaReception();
 80005ea:	e7f9      	b.n	80005e0 <main+0x5c>
 80005ec:	0800067d 	.word	0x0800067d
 80005f0:	40000400 	.word	0x40000400

080005f4 <setDutyCycle>:
  /* USER CODE END 3 */
}


void setDutyCycle(uint8_t D)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 80005fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff ff5f 	bl	80004dc <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800061e:	f7ff ff71 	bl	8000504 <LL_FLASH_GetLatency>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x18>
  {
  Error_Handler();
 8000628:	f000 f8d2 	bl	80007d0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800062c:	f7ff fe90 	bl	8000350 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000630:	bf00      	nop
 8000632:	f7ff fe9d 	bl	8000370 <LL_RCC_HSI_IsReady>
 8000636:	4603      	mov	r3, r0
 8000638:	2b01      	cmp	r3, #1
 800063a:	d1fa      	bne.n	8000632 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800063c:	2010      	movs	r0, #16
 800063e:	f7ff fea9 	bl	8000394 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fede 	bl	8000404 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000648:	2000      	movs	r0, #0
 800064a:	f7ff feef 	bl	800042c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff00 	bl	8000454 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff feb3 	bl	80003c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800065a:	bf00      	nop
 800065c:	f7ff fec4 	bl	80003e8 <LL_RCC_GetSysClkSource>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1fa      	bne.n	800065c <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <SystemClock_Config+0x64>)
 8000668:	f002 f954 	bl	8002914 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <SystemClock_Config+0x64>)
 800066e:	f002 f983 	bl	8002978 <LL_SetSystemCoreClock>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	007a1200 	.word	0x007a1200

0800067c <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	807b      	strh	r3, [r7, #2]
    /* Process received data */

        // type your algorithm here:

    for(uint8_t i = 0; i < len; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	e040      	b.n	8000710 <proccesDmaData+0x94>
    {

        if ((*(data+i) == '$') && (start))
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b24      	cmp	r3, #36	; 0x24
 8000698:	d10e      	bne.n	80006b8 <proccesDmaData+0x3c>
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <proccesDmaData+0xa8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <proccesDmaData+0x3c>
        {
            CompareMessage();
 80006a2:	f000 f843 	bl	800072c <CompareMessage>
            memset(message,0,sizeof(message));
 80006a6:	2222      	movs	r2, #34	; 0x22
 80006a8:	2100      	movs	r1, #0
 80006aa:	481f      	ldr	r0, [pc, #124]	; (8000728 <proccesDmaData+0xac>)
 80006ac:	f002 f99c 	bl	80029e8 <memset>
            start = 0;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <proccesDmaData+0xa8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
            break;
 80006b6:	e030      	b.n	800071a <proccesDmaData+0x9e>
        }
        else if(*(data+i) == '$')
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b24      	cmp	r3, #36	; 0x24
 80006c2:	d103      	bne.n	80006cc <proccesDmaData+0x50>
        {
            start = 1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <proccesDmaData+0xa8>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]
            break;
 80006ca:	e026      	b.n	800071a <proccesDmaData+0x9e>
        }

        if((start >= 1) && (start <= 34))
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <proccesDmaData+0xa8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dd12      	ble.n	80006fa <proccesDmaData+0x7e>
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <proccesDmaData+0xa8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b22      	cmp	r3, #34	; 0x22
 80006da:	dc0e      	bgt.n	80006fa <proccesDmaData+0x7e>
        {
            message[start-1]= *(data+i);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	441a      	add	r2, r3
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <proccesDmaData+0xa8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	7811      	ldrb	r1, [r2, #0]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <proccesDmaData+0xac>)
 80006ec:	54d1      	strb	r1, [r2, r3]
            start++;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <proccesDmaData+0xa8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <proccesDmaData+0xa8>)
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	e007      	b.n	800070a <proccesDmaData+0x8e>
        }
        else
        {
        	start = 0;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <proccesDmaData+0xa8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
        	memset(message,0,sizeof(message));
 8000700:	2222      	movs	r2, #34	; 0x22
 8000702:	2100      	movs	r1, #0
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <proccesDmaData+0xac>)
 8000706:	f002 f96f 	bl	80029e8 <memset>
    for(uint8_t i = 0; i < len; i++)
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3301      	adds	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	b29b      	uxth	r3, r3
 8000714:	887a      	ldrh	r2, [r7, #2]
 8000716:	429a      	cmp	r2, r3
 8000718:	d8b9      	bhi.n	800068e <proccesDmaData+0x12>
        }

    }
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200001f8 	.word	0x200001f8
 8000728:	200001fc 	.word	0x200001fc

0800072c <CompareMessage>:

void CompareMessage()
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

	if(strcmp(message, "auto") == 0)
 8000730:	491f      	ldr	r1, [pc, #124]	; (80007b0 <CompareMessage+0x84>)
 8000732:	4820      	ldr	r0, [pc, #128]	; (80007b4 <CompareMessage+0x88>)
 8000734:	f7ff fd48 	bl	80001c8 <strcmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d108      	bne.n	8000750 <CompareMessage+0x24>
    {
    	autoON = 1;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <CompareMessage+0x8c>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
    	PWM = 100;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <CompareMessage+0x90>)
 8000746:	2264      	movs	r2, #100	; 0x64
 8000748:	601a      	str	r2, [r3, #0]
    	enteredmode = 1;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <CompareMessage+0x94>)
 800074c:	2201      	movs	r2, #1
 800074e:	601a      	str	r2, [r3, #0]
    }
	if(strcmp(message, "manual") == 0)
 8000750:	491c      	ldr	r1, [pc, #112]	; (80007c4 <CompareMessage+0x98>)
 8000752:	4818      	ldr	r0, [pc, #96]	; (80007b4 <CompareMessage+0x88>)
 8000754:	f7ff fd38 	bl	80001c8 <strcmp>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d105      	bne.n	800076a <CompareMessage+0x3e>
    {
    	autoON = 0;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <CompareMessage+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
    	enteredmode = 1;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <CompareMessage+0x94>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
    }

    if((autoON == 0) && (enteredmode == 1))
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <CompareMessage+0x8c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d11c      	bne.n	80007ac <CompareMessage+0x80>
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <CompareMessage+0x94>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d118      	bne.n	80007ac <CompareMessage+0x80>
    {
    	if(strncmp(message, "PWM",3) == 0)
 800077a:	2203      	movs	r2, #3
 800077c:	4912      	ldr	r1, [pc, #72]	; (80007c8 <CompareMessage+0x9c>)
 800077e:	480d      	ldr	r0, [pc, #52]	; (80007b4 <CompareMessage+0x88>)
 8000780:	f002 f93a 	bl	80029f8 <strncmp>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d110      	bne.n	80007ac <CompareMessage+0x80>
    	{
    		PWM = atoi(message+3);
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <CompareMessage+0xa0>)
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f903 	bl	8002998 <atoi>
 8000792:	4602      	mov	r2, r0
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <CompareMessage+0x90>)
 8000796:	601a      	str	r2, [r3, #0]
      		if (PWM > 99)
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <CompareMessage+0x90>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b63      	cmp	r3, #99	; 0x63
 800079e:	dd02      	ble.n	80007a6 <CompareMessage+0x7a>
    		{
    			PWM = 100;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <CompareMessage+0x90>)
 80007a2:	2264      	movs	r2, #100	; 0x64
 80007a4:	601a      	str	r2, [r3, #0]
    		}
      		enteredmode = 0;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <CompareMessage+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
    	}

    }

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08002b9c 	.word	0x08002b9c
 80007b4:	200001fc 	.word	0x200001fc
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000004 	.word	0x20000004
 80007c0:	20000220 	.word	0x20000220
 80007c4:	08002ba4 	.word	0x08002ba4
 80007c8:	08002bac 	.word	0x08002bac
 80007cc:	200001ff 	.word	0x200001ff

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
	...

080007e0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <LL_DMA_DisableChannel+0x3c>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4413      	add	r3, r2
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	3a01      	subs	r2, #1
 80007fe:	4907      	ldr	r1, [pc, #28]	; (800081c <LL_DMA_DisableChannel+0x3c>)
 8000800:	5c8a      	ldrb	r2, [r1, r2]
 8000802:	4611      	mov	r1, r2
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	440a      	add	r2, r1
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	6013      	str	r3, [r2, #0]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	08002bb0 	.word	0x08002bb0

08000820 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000834:	bf0c      	ite	eq
 8000836:	2301      	moveq	r3, #1
 8000838:	2300      	movne	r3, #0
 800083a:	b2db      	uxtb	r3, r3
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000884:	bf0c      	ite	eq
 8000886:	2301      	moveq	r3, #1
 8000888:	2300      	movne	r3, #0
 800088a:	b2db      	uxtb	r3, r3
}
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80008a6:	605a      	str	r2, [r3, #4]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008c2:	605a      	str	r2, [r3, #4]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008de:	605a      	str	r2, [r3, #4]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_TIM_ClearFlag_UPDATE>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f06f 0201 	mvn.w	r2, #1
 80008fa:	611a      	str	r2, [r3, #16]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b01      	cmp	r3, #1
 800091a:	d101      	bne.n	8000920 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	2b10      	cmp	r3, #16
 8000940:	d101      	bne.n	8000946 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000964:	2b40      	cmp	r3, #64	; 0x40
 8000966:	d101      	bne.n	800096c <LL_USART_IsActiveFlag_TC+0x18>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <LL_USART_IsActiveFlag_TC+0x1a>
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2210      	movs	r2, #16
 8000986:	621a      	str	r2, [r3, #32]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */


	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <DMA1_Channel6_IRQHandler+0x38>)
 80009fa:	f7ff ff11 	bl	8000820 <LL_DMA_IsActiveFlag_TC6>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000a04:	f000 fede 	bl	80017c4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000a08:	4808      	ldr	r0, [pc, #32]	; (8000a2c <DMA1_Channel6_IRQHandler+0x38>)
 8000a0a:	f7ff ff45 	bl	8000898 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a0e:	e00a      	b.n	8000a26 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <DMA1_Channel6_IRQHandler+0x38>)
 8000a12:	f7ff ff2d 	bl	8000870 <LL_DMA_IsActiveFlag_HT6>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d104      	bne.n	8000a26 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000a1c:	f000 fed2 	bl	80017c4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <DMA1_Channel6_IRQHandler+0x38>)
 8000a22:	f7ff ff55 	bl	80008d0 <LL_DMA_ClearFlag_HT6>
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020000 	.word	0x40020000

08000a30 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000a34:	480a      	ldr	r0, [pc, #40]	; (8000a60 <DMA1_Channel7_IRQHandler+0x30>)
 8000a36:	f7ff ff07 	bl	8000848 <LL_DMA_IsActiveFlag_TC7>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d10d      	bne.n	8000a5c <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <DMA1_Channel7_IRQHandler+0x30>)
 8000a42:	f7ff ff37 	bl	80008b4 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000a46:	bf00      	nop
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <DMA1_Channel7_IRQHandler+0x34>)
 8000a4a:	f7ff ff83 	bl	8000954 <LL_USART_IsActiveFlag_TC>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f9      	beq.n	8000a48 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000a54:	2107      	movs	r1, #7
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DMA1_Channel7_IRQHandler+0x30>)
 8000a58:	f7ff fec2 	bl	80007e0 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40004400 	.word	0x40004400

08000a68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <TIM3_IRQHandler+0x78>)
 8000a6e:	f7ff ff4b 	bl	8000908 <LL_TIM_IsActiveFlag_UPDATE>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d02e      	beq.n	8000ad6 <TIM3_IRQHandler+0x6e>
	{
		if (ledON == 0)
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <TIM3_IRQHandler+0x7c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d114      	bne.n	8000aaa <TIM3_IRQHandler+0x42>
		{
			dutycycle++;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000a8a:	701a      	strb	r2, [r3, #0]
			setDutyCycle(dutycycle);
 8000a8c:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fdaf 	bl	80005f4 <setDutyCycle>
			if (dutycycle == PWM)
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <TIM3_IRQHandler+0x84>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d102      	bne.n	8000aaa <TIM3_IRQHandler+0x42>
			{
				ledON = 1;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <TIM3_IRQHandler+0x7c>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	601a      	str	r2, [r3, #0]
			}
		}
		if (ledON == 1)
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <TIM3_IRQHandler+0x7c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d111      	bne.n	8000ad6 <TIM3_IRQHandler+0x6e>
		{
			dutycycle--;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000abc:	701a      	strb	r2, [r3, #0]
			setDutyCycle(dutycycle);
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd96 	bl	80005f4 <setDutyCycle>
			if (dutycycle == 0)
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <TIM3_IRQHandler+0x80>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <TIM3_IRQHandler+0x6e>
			{
				ledON = 0;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <TIM3_IRQHandler+0x7c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8000ad6:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM3_IRQHandler+0x78>)
 8000ad8:	f7ff ff08 	bl	80008ec <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40000400 	.word	0x40000400
 8000ae4:	20000224 	.word	0x20000224
 8000ae8:	20000228 	.word	0x20000228
 8000aec:	20000004 	.word	0x20000004

08000af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <USART2_IRQHandler+0x20>)
 8000af6:	f7ff ff1a 	bl	800092e <LL_USART_IsActiveFlag_IDLE>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000b00:	f000 fe60 	bl	80017c4 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <USART2_IRQHandler+0x20>)
 8000b06:	f7ff ff38 	bl	800097a <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004400 	.word	0x40004400

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <SystemInit+0x28>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <SystemInit+0x28>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SystemInit+0x28>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <LL_AHB1_GRP1_EnableClock>:
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40021000 	.word	0x40021000

08000c84 <LL_APB1_GRP1_EnableClock>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c8e:	69da      	ldr	r2, [r3, #28]
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c9a:	69da      	ldr	r2, [r3, #28]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <LL_TIM_DisableARRPreload>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_TIM_OC_DisableFast>:
{
 8000cd4:	b4b0      	push	{r4, r5, r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d028      	beq.n	8000d36 <LL_TIM_OC_DisableFast+0x62>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d023      	beq.n	8000d32 <LL_TIM_OC_DisableFast+0x5e>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b10      	cmp	r3, #16
 8000cee:	d01e      	beq.n	8000d2e <LL_TIM_OC_DisableFast+0x5a>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2b40      	cmp	r3, #64	; 0x40
 8000cf4:	d019      	beq.n	8000d2a <LL_TIM_OC_DisableFast+0x56>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cfc:	d013      	beq.n	8000d26 <LL_TIM_OC_DisableFast+0x52>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d04:	d00d      	beq.n	8000d22 <LL_TIM_OC_DisableFast+0x4e>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d0c:	d007      	beq.n	8000d1e <LL_TIM_OC_DisableFast+0x4a>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d14:	d101      	bne.n	8000d1a <LL_TIM_OC_DisableFast+0x46>
 8000d16:	2307      	movs	r3, #7
 8000d18:	e00e      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	e00c      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d1e:	2306      	movs	r3, #6
 8000d20:	e00a      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e008      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e006      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e004      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <LL_TIM_OC_DisableFast+0x64>
 8000d36:	2300      	movs	r3, #0
 8000d38:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3318      	adds	r3, #24
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4629      	mov	r1, r5
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <LL_TIM_OC_DisableFast+0x94>)
 8000d44:	5c5b      	ldrb	r3, [r3, r1]
 8000d46:	4413      	add	r3, r2
 8000d48:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000d4a:	6822      	ldr	r2, [r4, #0]
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <LL_TIM_OC_DisableFast+0x98>)
 8000d50:	5c5b      	ldrb	r3, [r3, r1]
 8000d52:	4619      	mov	r1, r3
 8000d54:	2304      	movs	r3, #4
 8000d56:	408b      	lsls	r3, r1
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	6023      	str	r3, [r4, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bcb0      	pop	{r4, r5, r7}
 8000d66:	4770      	bx	lr
 8000d68:	08002bd0 	.word	0x08002bd0
 8000d6c:	08002bdc 	.word	0x08002bdc

08000d70 <LL_TIM_OC_EnablePreload>:
{
 8000d70:	b4b0      	push	{r4, r5, r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d028      	beq.n	8000dd2 <LL_TIM_OC_EnablePreload+0x62>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d023      	beq.n	8000dce <LL_TIM_OC_EnablePreload+0x5e>
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b10      	cmp	r3, #16
 8000d8a:	d01e      	beq.n	8000dca <LL_TIM_OC_EnablePreload+0x5a>
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	2b40      	cmp	r3, #64	; 0x40
 8000d90:	d019      	beq.n	8000dc6 <LL_TIM_OC_EnablePreload+0x56>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d98:	d013      	beq.n	8000dc2 <LL_TIM_OC_EnablePreload+0x52>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da0:	d00d      	beq.n	8000dbe <LL_TIM_OC_EnablePreload+0x4e>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000da8:	d007      	beq.n	8000dba <LL_TIM_OC_EnablePreload+0x4a>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db0:	d101      	bne.n	8000db6 <LL_TIM_OC_EnablePreload+0x46>
 8000db2:	2307      	movs	r3, #7
 8000db4:	e00e      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000db6:	2308      	movs	r3, #8
 8000db8:	e00c      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dba:	2306      	movs	r3, #6
 8000dbc:	e00a      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dbe:	2305      	movs	r3, #5
 8000dc0:	e008      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e006      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e004      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e002      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e000      	b.n	8000dd4 <LL_TIM_OC_EnablePreload+0x64>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3318      	adds	r3, #24
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4629      	mov	r1, r5
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <LL_TIM_OC_EnablePreload+0x94>)
 8000de0:	5c5b      	ldrb	r3, [r3, r1]
 8000de2:	4413      	add	r3, r2
 8000de4:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000de6:	6822      	ldr	r2, [r4, #0]
 8000de8:	4629      	mov	r1, r5
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <LL_TIM_OC_EnablePreload+0x98>)
 8000dec:	5c5b      	ldrb	r3, [r3, r1]
 8000dee:	4619      	mov	r1, r3
 8000df0:	2308      	movs	r3, #8
 8000df2:	408b      	lsls	r3, r1
 8000df4:	4313      	orrs	r3, r2
 8000df6:	6023      	str	r3, [r4, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bcb0      	pop	{r4, r5, r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	08002bd0 	.word	0x08002bd0
 8000e08:	08002bdc 	.word	0x08002bdc

08000e0c <LL_TIM_SetClockSource>:
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000e1e:	f023 0307 	bic.w	r3, r3, #7
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <LL_TIM_SetTriggerOutput>:
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	605a      	str	r2, [r3, #4]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <LL_TIM_DisableMasterSlaveMode>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	; 0x50
 8000e80:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	2220      	movs	r2, #32
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fda4 	bl	80029e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f7ff fee7 	bl	8000c84 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 799;
 8000eb6:	f240 331f 	movw	r3, #799	; 0x31f
 8000eba:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8000ec0:	2363      	movs	r3, #99	; 0x63
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000ec8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ed2:	f001 f8d5 	bl	8002080 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000ed6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eda:	f7ff feeb 	bl	8000cb4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ee4:	f7ff ff92 	bl	8000e0c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eee:	f7ff ff3f 	bl	8000d70 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000ef2:	2360      	movs	r3, #96	; 0x60
 8000ef4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f12:	f001 f927 	bl	8002164 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000f16:	2101      	movs	r1, #1
 8000f18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f1c:	f7ff feda 	bl	8000cd4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f20:	2100      	movs	r1, #0
 8000f22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f26:	f7ff ff86 	bl	8000e36 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f2e:	f7ff ff95 	bl	8000e5c <LL_TIM_DisableMasterSlaveMode>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f36:	f7ff fe8d 	bl	8000c54 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f000 fdf1 	bl	8001b40 <LL_GPIO_Init>

}
 8000f5e:	bf00      	nop
 8000f60:	3750      	adds	r7, #80	; 0x50
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	; 0x38
 8000f6c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2220      	movs	r2, #32
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fd2f 	bl	80029e8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f7ff fe7a 	bl	8000c84 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f90:	f7ff fdd6 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe26 	bl	8000bec <NVIC_EncodePriority>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	201d      	movs	r0, #29
 8000fa6:	f7ff fdf7 	bl	8000b98 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8000faa:	201d      	movs	r0, #29
 8000fac:	f7ff fdd6 	bl	8000b5c <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 7999;
 8000fb0:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 9;
 8000fba:	2309      	movs	r3, #9
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_TIM3_Init+0xb4>)
 8000fca:	f001 f859 	bl	8002080 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8000fce:	4813      	ldr	r0, [pc, #76]	; (800101c <MX_TIM3_Init+0xb4>)
 8000fd0:	f7ff fe70 	bl	8000cb4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4811      	ldr	r0, [pc, #68]	; (800101c <MX_TIM3_Init+0xb4>)
 8000fd8:	f7ff ff18 	bl	8000e0c <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4809      	ldr	r0, [pc, #36]	; (800101c <MX_TIM3_Init+0xb4>)
 8000ff8:	f001 f8b4 	bl	8002164 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM3_Init+0xb4>)
 8001000:	f7ff fe68 	bl	8000cd4 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001004:	2100      	movs	r1, #0
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_TIM3_Init+0xb4>)
 8001008:	f7ff ff15 	bl	8000e36 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM3_Init+0xb4>)
 800100e:	f7ff ff25 	bl	8000e5c <LL_TIM_DisableMasterSlaveMode>

}
 8001012:	bf00      	nop
 8001014:	3738      	adds	r7, #56	; 0x38
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40000400 	.word	0x40000400

08001020 <__NVIC_EnableIRQ>:
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <LL_DMA_EnableChannel>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LL_DMA_EnableChannel+0x3c>)
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	4907      	ldr	r1, [pc, #28]	; (80010ec <LL_DMA_EnableChannel+0x3c>)
 80010d0:	5c8a      	ldrb	r2, [r1, r2]
 80010d2:	4611      	mov	r1, r2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	440a      	add	r2, r1
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	08002be8 	.word	0x08002be8

080010f0 <LL_DMA_DisableChannel>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	4a0b      	ldr	r2, [pc, #44]	; (800112c <LL_DMA_DisableChannel+0x3c>)
 8001100:	5cd3      	ldrb	r3, [r2, r3]
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	3a01      	subs	r2, #1
 800110e:	4907      	ldr	r1, [pc, #28]	; (800112c <LL_DMA_DisableChannel+0x3c>)
 8001110:	5c8a      	ldrb	r2, [r1, r2]
 8001112:	4611      	mov	r1, r2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	440a      	add	r2, r1
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	08002be8 	.word	0x08002be8

08001130 <LL_DMA_SetDataTransferDirection>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3b01      	subs	r3, #1
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LL_DMA_SetDataTransferDirection+0x48>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	461a      	mov	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001150:	f023 0310 	bic.w	r3, r3, #16
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	3a01      	subs	r2, #1
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <LL_DMA_SetDataTransferDirection+0x48>)
 800115a:	5c8a      	ldrb	r2, [r1, r2]
 800115c:	4611      	mov	r1, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	440a      	add	r2, r1
 8001162:	4611      	mov	r1, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	08002be8 	.word	0x08002be8

0800117c <LL_DMA_GetDataTransferDirection>:
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <LL_DMA_GetDataTransferDirection+0x2c>)
 800118c:	5cd3      	ldrb	r3, [r2, r3]
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f244 0310 	movw	r3, #16400	; 0x4010
 800119a:	4013      	ands	r3, r2
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	08002be8 	.word	0x08002be8

080011ac <LL_DMA_SetMode>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <LL_DMA_SetMode+0x44>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	461a      	mov	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 0220 	bic.w	r2, r3, #32
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <LL_DMA_SetMode+0x44>)
 80011d2:	5ccb      	ldrb	r3, [r1, r3]
 80011d4:	4619      	mov	r1, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	440b      	add	r3, r1
 80011da:	4619      	mov	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	08002be8 	.word	0x08002be8

080011f4 <LL_DMA_SetPeriphIncMode>:
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <LL_DMA_SetPeriphIncMode+0x44>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3b01      	subs	r3, #1
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <LL_DMA_SetPeriphIncMode+0x44>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	4619      	mov	r1, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	440b      	add	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	08002be8 	.word	0x08002be8

0800123c <LL_DMA_SetMemoryIncMode>:
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	3b01      	subs	r3, #1
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <LL_DMA_SetMemoryIncMode+0x44>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3b01      	subs	r3, #1
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <LL_DMA_SetMemoryIncMode+0x44>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	4619      	mov	r1, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	440b      	add	r3, r1
 800126a:	4619      	mov	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	08002be8 	.word	0x08002be8

08001284 <LL_DMA_SetPeriphSize>:
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3b01      	subs	r3, #1
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <LL_DMA_SetPeriphSize+0x44>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <LL_DMA_SetPeriphSize+0x44>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	4619      	mov	r1, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	440b      	add	r3, r1
 80012b2:	4619      	mov	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	08002be8 	.word	0x08002be8

080012cc <LL_DMA_SetMemorySize>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3b01      	subs	r3, #1
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <LL_DMA_SetMemorySize+0x44>)
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <LL_DMA_SetMemorySize+0x44>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	4619      	mov	r1, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	440b      	add	r3, r1
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	08002be8 	.word	0x08002be8

08001314 <LL_DMA_SetChannelPriorityLevel>:
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3b01      	subs	r3, #1
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	4619      	mov	r1, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	440b      	add	r3, r1
 8001342:	4619      	mov	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	08002be8 	.word	0x08002be8

0800135c <LL_DMA_SetDataLength>:
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3b01      	subs	r3, #1
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LL_DMA_SetDataLength+0x44>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	0c1b      	lsrs	r3, r3, #16
 800137a:	041b      	lsls	r3, r3, #16
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	3a01      	subs	r2, #1
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_DMA_SetDataLength+0x44>)
 8001382:	5c8a      	ldrb	r2, [r1, r2]
 8001384:	4611      	mov	r1, r2
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	440a      	add	r2, r1
 800138a:	4611      	mov	r1, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	08002be8 	.word	0x08002be8

080013a4 <LL_DMA_GetDataLength>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	4a06      	ldr	r2, [pc, #24]	; (80013cc <LL_DMA_GetDataLength+0x28>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4413      	add	r3, r2
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	b29b      	uxth	r3, r3
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	08002be8 	.word	0x08002be8

080013d0 <LL_DMA_ConfigAddresses>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b10      	cmp	r3, #16
 80013e2:	d114      	bne.n	800140e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <LL_DMA_ConfigAddresses+0x74>)
 80013ea:	5cd3      	ldrb	r3, [r2, r3]
 80013ec:	461a      	mov	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	461a      	mov	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	4a11      	ldr	r2, [pc, #68]	; (8001444 <LL_DMA_ConfigAddresses+0x74>)
 80013fe:	5cd3      	ldrb	r3, [r2, r3]
 8001400:	461a      	mov	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6093      	str	r3, [r2, #8]
}
 800140c:	e013      	b.n	8001436 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <LL_DMA_ConfigAddresses+0x74>)
 8001414:	5cd3      	ldrb	r3, [r2, r3]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	461a      	mov	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	4a07      	ldr	r2, [pc, #28]	; (8001444 <LL_DMA_ConfigAddresses+0x74>)
 8001428:	5cd3      	ldrb	r3, [r2, r3]
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	461a      	mov	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	60d3      	str	r3, [r2, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	08002be8 	.word	0x08002be8

08001448 <LL_DMA_SetPeriphAddress>:
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3b01      	subs	r3, #1
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <LL_DMA_SetPeriphAddress+0x2c>)
 800145a:	5cd3      	ldrb	r3, [r2, r3]
 800145c:	461a      	mov	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4413      	add	r3, r2
 8001462:	461a      	mov	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6093      	str	r3, [r2, #8]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	08002be8 	.word	0x08002be8

08001478 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LL_DMA_EnableIT_TE+0x3c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4413      	add	r3, r2
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	3a01      	subs	r2, #1
 8001496:	4907      	ldr	r1, [pc, #28]	; (80014b4 <LL_DMA_EnableIT_TE+0x3c>)
 8001498:	5c8a      	ldrb	r2, [r1, r2]
 800149a:	4611      	mov	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	440a      	add	r2, r1
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6013      	str	r3, [r2, #0]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	08002be8 	.word	0x08002be8

080014b8 <LL_AHB1_GRP1_EnableClock>:
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014c2:	695a      	ldr	r2, [r3, #20]
 80014c4:	4907      	ldr	r1, [pc, #28]	; (80014e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ce:	695a      	ldr	r2, [r3, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4013      	ands	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000

080014e8 <LL_APB1_GRP1_EnableClock>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014f2:	69da      	ldr	r2, [r3, #28]
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014fe:	69da      	ldr	r2, [r3, #28]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40021000 	.word	0x40021000

08001518 <LL_USART_Enable>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_USART_ConfigAsyncMode>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	609a      	str	r2, [r3, #8]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	609a      	str	r2, [r3, #8]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80015c4:	b490      	push	{r4, r7}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d103      	bne.n	80015dc <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3328      	adds	r3, #40	; 0x28
 80015d8:	461c      	mov	r4, r3
 80015da:	e002      	b.n	80015e2 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3324      	adds	r3, #36	; 0x24
 80015e0:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80015e2:	4623      	mov	r3, r4
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc90      	pop	{r4, r7}
 80015ec:	4770      	bx	lr
	...

080015f0 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a03      	ldr	r2, [pc, #12]	; (8001610 <USART2_RegisterCallback+0x20>)
 8001602:	6013      	str	r3, [r2, #0]
	}
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	2000022c 	.word	0x2000022c

08001614 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b090      	sub	sp, #64	; 0x40
 8001618:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800163e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001642:	f7ff ff51 	bl	80014e8 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001646:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800164a:	f7ff ff35 	bl	80014b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800164e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001654:	2302      	movs	r3, #2
 8001656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001664:	2307      	movs	r3, #7
 8001666:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	4619      	mov	r1, r3
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f000 fa66 	bl	8001b40 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001674:	2200      	movs	r2, #0
 8001676:	2106      	movs	r1, #6
 8001678:	484f      	ldr	r0, [pc, #316]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 800167a:	f7ff fd59 	bl	8001130 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800167e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001682:	2106      	movs	r1, #6
 8001684:	484c      	ldr	r0, [pc, #304]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001686:	f7ff fe45 	bl	8001314 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800168a:	2200      	movs	r2, #0
 800168c:	2106      	movs	r1, #6
 800168e:	484a      	ldr	r0, [pc, #296]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001690:	f7ff fd8c 	bl	80011ac <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001694:	2200      	movs	r2, #0
 8001696:	2106      	movs	r1, #6
 8001698:	4847      	ldr	r0, [pc, #284]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 800169a:	f7ff fdab 	bl	80011f4 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	2106      	movs	r1, #6
 80016a2:	4845      	ldr	r0, [pc, #276]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016a4:	f7ff fdca 	bl	800123c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2106      	movs	r1, #6
 80016ac:	4842      	ldr	r0, [pc, #264]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016ae:	f7ff fde9 	bl	8001284 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2106      	movs	r1, #6
 80016b6:	4840      	ldr	r0, [pc, #256]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016b8:	f7ff fe08 	bl	80012cc <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 80016bc:	2101      	movs	r1, #1
 80016be:	483f      	ldr	r0, [pc, #252]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 80016c0:	f7ff ff80 	bl	80015c4 <LL_USART_DMA_GetRegAddr>
 80016c4:	4605      	mov	r5, r0
 80016c6:	4c3e      	ldr	r4, [pc, #248]	; (80017c0 <MX_USART2_UART_Init+0x1ac>)
 80016c8:	2106      	movs	r1, #6
 80016ca:	483b      	ldr	r0, [pc, #236]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016cc:	f7ff fd56 	bl	800117c <LL_DMA_GetDataTransferDirection>
 80016d0:	4603      	mov	r3, r0
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	4623      	mov	r3, r4
 80016d6:	462a      	mov	r2, r5
 80016d8:	2106      	movs	r1, #6
 80016da:	4837      	ldr	r0, [pc, #220]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016dc:	f7ff fe78 	bl	80013d0 <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80016e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e4:	2106      	movs	r1, #6
 80016e6:	4834      	ldr	r0, [pc, #208]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016e8:	f7ff fe38 	bl	800135c <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80016ec:	2106      	movs	r1, #6
 80016ee:	4832      	ldr	r0, [pc, #200]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 80016f0:	f7ff fcde 	bl	80010b0 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80016f4:	4831      	ldr	r0, [pc, #196]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 80016f6:	f7ff ff45 	bl	8001584 <LL_USART_EnableDMAReq_RX>
  #endif

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80016fa:	2210      	movs	r2, #16
 80016fc:	2107      	movs	r1, #7
 80016fe:	482e      	ldr	r0, [pc, #184]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001700:	f7ff fd16 	bl	8001130 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001708:	2107      	movs	r1, #7
 800170a:	482b      	ldr	r0, [pc, #172]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 800170c:	f7ff fe02 	bl	8001314 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001710:	2200      	movs	r2, #0
 8001712:	2107      	movs	r1, #7
 8001714:	4828      	ldr	r0, [pc, #160]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001716:	f7ff fd49 	bl	80011ac <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800171a:	2200      	movs	r2, #0
 800171c:	2107      	movs	r1, #7
 800171e:	4826      	ldr	r0, [pc, #152]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001720:	f7ff fd68 	bl	80011f4 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	2107      	movs	r1, #7
 8001728:	4823      	ldr	r0, [pc, #140]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 800172a:	f7ff fd87 	bl	800123c <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800172e:	2200      	movs	r2, #0
 8001730:	2107      	movs	r1, #7
 8001732:	4821      	ldr	r0, [pc, #132]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001734:	f7ff fda6 	bl	8001284 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001738:	2200      	movs	r2, #0
 800173a:	2107      	movs	r1, #7
 800173c:	481e      	ldr	r0, [pc, #120]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 800173e:	f7ff fdc5 	bl	80012cc <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001742:	2100      	movs	r1, #0
 8001744:	481d      	ldr	r0, [pc, #116]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 8001746:	f7ff ff3d 	bl	80015c4 <LL_USART_DMA_GetRegAddr>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	2107      	movs	r1, #7
 8001750:	4819      	ldr	r0, [pc, #100]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001752:	f7ff fe79 	bl	8001448 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 8001758:	f7ff ff24 	bl	80015a4 <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800175c:	2107      	movs	r1, #7
 800175e:	4816      	ldr	r0, [pc, #88]	; (80017b8 <MX_USART2_UART_Init+0x1a4>)
 8001760:	f7ff fe8a 	bl	8001478 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001764:	2100      	movs	r1, #0
 8001766:	2026      	movs	r0, #38	; 0x26
 8001768:	f7ff fc78 	bl	800105c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800176c:	2026      	movs	r0, #38	; 0x26
 800176e:	f7ff fc57 	bl	8001020 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001772:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001776:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001784:	230c      	movs	r3, #12
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 8001798:	f001 f836 	bl	8002808 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 800179e:	f7ff fecb 	bl	8001538 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 80017a4:	f7ff fede 	bl	8001564 <LL_USART_DisableIT_CTS>

  	  //type your code here:
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_Enable(USART2);
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_USART2_UART_Init+0x1a8>)
 80017aa:	f7ff feb5 	bl	8001518 <LL_USART_Enable>
}
 80017ae:	bf00      	nop
 80017b0:	3738      	adds	r7, #56	; 0x38
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bdb0      	pop	{r4, r5, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40004400 	.word	0x40004400
 80017c0:	2000023c 	.word	0x2000023c

080017c4 <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <USART2_CheckDmaReception+0xfc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d072      	beq.n	80018b8 <USART2_CheckDmaReception+0xf4>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80017d2:	2106      	movs	r1, #6
 80017d4:	483b      	ldr	r0, [pc, #236]	; (80018c4 <USART2_CheckDmaReception+0x100>)
 80017d6:	f7ff fde5 	bl	80013a4 <LL_DMA_GetDataLength>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29b      	uxth	r3, r3
 80017de:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017e2:	80fb      	strh	r3, [r7, #6]

		occupied_memory=pos;
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <USART2_CheckDmaReception+0x104>)
 80017ea:	701a      	strb	r2, [r3, #0]
		load=(float)(occupied_memory)/(float)(DMA_USART2_BUFFER_SIZE)*100.0;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <USART2_CheckDmaReception+0x104>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f8:	eddf 6a34 	vldr	s13, [pc, #208]	; 80018cc <USART2_CheckDmaReception+0x108>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80018d0 <USART2_CheckDmaReception+0x10c>
 8001804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <USART2_CheckDmaReception+0x110>)
 800180a:	edc3 7a00 	vstr	s15, [r3]

		if (pos != old_pos)
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	88fa      	ldrh	r2, [r7, #6]
 8001814:	429a      	cmp	r2, r3
 8001816:	d050      	beq.n	80018ba <USART2_CheckDmaReception+0xf6>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	2beb      	cmp	r3, #235	; 0xeb
 800181c:	d811      	bhi.n	8001842 <USART2_CheckDmaReception+0x7e>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 800181e:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <USART2_CheckDmaReception+0xfc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a2d      	ldr	r2, [pc, #180]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 8001824:	8812      	ldrh	r2, [r2, #0]
 8001826:	4611      	mov	r1, r2
 8001828:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <USART2_CheckDmaReception+0x118>)
 800182a:	1888      	adds	r0, r1, r2
 800182c:	4a2a      	ldr	r2, [pc, #168]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 800182e:	8812      	ldrh	r2, [r2, #0]
 8001830:	88f9      	ldrh	r1, [r7, #6]
 8001832:	1a8a      	subs	r2, r1, r2
 8001834:	b292      	uxth	r2, r2
 8001836:	4611      	mov	r1, r2
 8001838:	4798      	blx	r3
				old_pos = pos;
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	8013      	strh	r3, [r2, #0]
 8001840:	e03b      	b.n	80018ba <USART2_CheckDmaReception+0xf6>
			}
			else
			{

				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <USART2_CheckDmaReception+0xfc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	4611      	mov	r1, r2
 800184c:	4a23      	ldr	r2, [pc, #140]	; (80018dc <USART2_CheckDmaReception+0x118>)
 800184e:	1888      	adds	r0, r1, r2
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 8001852:	8812      	ldrh	r2, [r2, #0]
 8001854:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8001858:	b292      	uxth	r2, r2
 800185a:	4611      	mov	r1, r2
 800185c:	4798      	blx	r3
				//clear bufferUSART2dma
				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 800185e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001862:	2100      	movs	r1, #0
 8001864:	481d      	ldr	r0, [pc, #116]	; (80018dc <USART2_CheckDmaReception+0x118>)
 8001866:	f001 f8bf 	bl	80029e8 <memset>
				// as was mentioned in datasheet first needs to be disabled
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 800186a:	2106      	movs	r1, #6
 800186c:	4815      	ldr	r0, [pc, #84]	; (80018c4 <USART2_CheckDmaReception+0x100>)
 800186e:	f7ff fc3f 	bl	80010f0 <LL_DMA_DisableChannel>
				// them reconfigure
				LL_DMA_ConfigAddresses(     DMA1, LL_DMA_CHANNEL_6,
 8001872:	2101      	movs	r1, #1
 8001874:	481a      	ldr	r0, [pc, #104]	; (80018e0 <USART2_CheckDmaReception+0x11c>)
 8001876:	f7ff fea5 	bl	80015c4 <LL_USART_DMA_GetRegAddr>
 800187a:	4605      	mov	r5, r0
 800187c:	4c17      	ldr	r4, [pc, #92]	; (80018dc <USART2_CheckDmaReception+0x118>)
 800187e:	2106      	movs	r1, #6
 8001880:	4810      	ldr	r0, [pc, #64]	; (80018c4 <USART2_CheckDmaReception+0x100>)
 8001882:	f7ff fc7b 	bl	800117c <LL_DMA_GetDataTransferDirection>
 8001886:	4603      	mov	r3, r0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4623      	mov	r3, r4
 800188c:	462a      	mov	r2, r5
 800188e:	2106      	movs	r1, #6
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <USART2_CheckDmaReception+0x100>)
 8001892:	f7ff fd9d 	bl	80013d0 <LL_DMA_ConfigAddresses>
											LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
											(uint32_t)bufferUSART2dma,
											LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189a:	2106      	movs	r1, #6
 800189c:	4809      	ldr	r0, [pc, #36]	; (80018c4 <USART2_CheckDmaReception+0x100>)
 800189e:	f7ff fd5d 	bl	800135c <LL_DMA_SetDataLength>
				//lastly enabled
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80018a2:	2106      	movs	r1, #6
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <USART2_CheckDmaReception+0x100>)
 80018a6:	f7ff fc03 	bl	80010b0 <LL_DMA_EnableChannel>
				LL_USART_EnableDMAReq_RX(USART2);
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <USART2_CheckDmaReception+0x11c>)
 80018ac:	f7ff fe6a 	bl	8001584 <LL_USART_EnableDMAReq_RX>


				old_pos = 0;
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <USART2_CheckDmaReception+0x114>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	801a      	strh	r2, [r3, #0]
 80018b6:	e000      	b.n	80018ba <USART2_CheckDmaReception+0xf6>
	if(USART2_ProcessData == 0) return;
 80018b8:	bf00      	nop

			}
		}
}
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bdb0      	pop	{r4, r5, r7, pc}
 80018c0:	2000022c 	.word	0x2000022c
 80018c4:	40020000 	.word	0x40020000
 80018c8:	20000234 	.word	0x20000234
 80018cc:	43800000 	.word	0x43800000
 80018d0:	42c80000 	.word	0x42c80000
 80018d4:	20000238 	.word	0x20000238
 80018d8:	20000230 	.word	0x20000230
 80018dc:	2000023c 	.word	0x2000023c
 80018e0:	40004400 	.word	0x40004400

080018e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800191c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80018e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80018ea:	e003      	b.n	80018f4 <LoopCopyDataInit>

080018ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80018ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80018f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80018f2:	3104      	adds	r1, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <LoopForever+0xa>)
	ldr	r3, =_edata
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <LoopForever+0xe>)
	adds	r2, r0, r1
 80018f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80018fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80018fc:	d3f6      	bcc.n	80018ec <CopyDataInit>
	ldr	r2, =_sbss
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001900:	e002      	b.n	8001908 <LoopFillZerobss>

08001902 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001902:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001904:	f842 3b04 	str.w	r3, [r2], #4

08001908 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <LoopForever+0x16>)
	cmp	r2, r3
 800190a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800190c:	d3f9      	bcc.n	8001902 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800190e:	f7ff f901 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001912:	f001 f845 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001916:	f7fe fe35 	bl	8000584 <main>

0800191a <LoopForever>:

LoopForever:
    b LoopForever
 800191a:	e7fe      	b.n	800191a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800191c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001920:	08002d04 	.word	0x08002d04
	ldr	r0, =_sdata
 8001924:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001928:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 800192c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001930:	2000033c 	.word	0x2000033c

08001934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC1_2_IRQHandler>

08001936 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001936:	b480      	push	{r7}
 8001938:	b089      	sub	sp, #36	; 0x24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2103      	movs	r1, #3
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	401a      	ands	r2, r3
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	61bb      	str	r3, [r7, #24]
  return result;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]
}
 8001988:	bf00      	nop
 800198a:	3724      	adds	r7, #36	; 0x24
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	613b      	str	r3, [r7, #16]
  return result;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	fab3 f383 	clz	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2103      	movs	r1, #3
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	401a      	ands	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	61bb      	str	r3, [r7, #24]
  return result;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b089      	sub	sp, #36	; 0x24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	613b      	str	r3, [r7, #16]
  return result;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2103      	movs	r1, #3
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	401a      	ands	r2, r3
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa93 f3a3 	rbit	r3, r3
 8001a5c:	61bb      	str	r3, [r7, #24]
  return result;
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	60da      	str	r2, [r3, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3724      	adds	r7, #36	; 0x24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	613b      	str	r3, [r7, #16]
  return result;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	fa93 f3a3 	rbit	r3, r3
 8001aba:	61bb      	str	r3, [r7, #24]
  return result;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001ad2:	bf00      	nop
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b089      	sub	sp, #36	; 0x24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa93 f3a3 	rbit	r3, r3
 8001afa:	613b      	str	r3, [r7, #16]
  return result;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	210f      	movs	r1, #15
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	401a      	ands	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	61bb      	str	r3, [r7, #24]
  return result;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001b34:	bf00      	nop
 8001b36:	3724      	adds	r7, #36	; 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	613b      	str	r3, [r7, #16]
  return result;
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b62:	e051      	b.n	8001c08 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d043      	beq.n	8001c02 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d003      	beq.n	8001b8a <LL_GPIO_Init+0x4a>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d10e      	bne.n	8001ba8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	69b9      	ldr	r1, [r7, #24]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ff16 	bl	80019c4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fef6 	bl	8001994 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	461a      	mov	r2, r3
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f7ff ff36 	bl	8001a22 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d11a      	bne.n	8001bf4 <LL_GPIO_Init+0xb4>
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	fa93 f3a3 	rbit	r3, r3
 8001bc8:	60bb      	str	r3, [r7, #8]
  return result;
 8001bca:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b07      	cmp	r3, #7
 8001bd4:	d807      	bhi.n	8001be6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	69b9      	ldr	r1, [r7, #24]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff4e 	bl	8001a80 <LL_GPIO_SetAFPin_0_7>
 8001be4:	e006      	b.n	8001bf4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	461a      	mov	r2, r3
 8001bec:	69b9      	ldr	r1, [r7, #24]
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ff75 	bl	8001ade <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fe9a 	bl	8001936 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1a6      	bne.n	8001b64 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <LL_RCC_HSI_IsReady>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <LL_RCC_HSI_IsReady+0x20>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000

08001c44 <LL_RCC_LSE_IsReady>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <LL_RCC_LSE_IsReady+0x20>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000

08001c68 <LL_RCC_GetSysClkSource>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <LL_RCC_GetSysClkSource+0x18>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000

08001c84 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <LL_RCC_GetAHBPrescaler+0x18>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <LL_RCC_GetUSARTClockSource+0x28>)
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce4:	2103      	movs	r1, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	401a      	ands	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	4313      	orrs	r3, r2
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000

08001d04 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <LL_RCC_PLL_GetMainSource+0x18>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000

08001d20 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000

08001d3c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <LL_RCC_PLL_GetPrediv+0x18>)
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	f003 030f 	and.w	r3, r3, #15
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000

08001d58 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001d60:	f000 f860 	bl	8001e24 <RCC_GetSystemClockFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f87a 	bl	8001e68 <RCC_GetHCLKClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 f888 	bl	8001e94 <RCC_GetPCLK1ClockFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f000 f894 	bl	8001ebc <RCC_GetPCLK2ClockFreq>
 8001d94:	4602      	mov	r2, r0
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d12a      	bne.n	8001e0c <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff8e 	bl	8001cd8 <LL_RCC_GetUSARTClockSource>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d00f      	beq.n	8001de2 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d005      	beq.n	8001dd2 <LL_RCC_GetUSARTClockFreq+0x2e>
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d114      	bne.n	8001df4 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001dca:	f000 f82b 	bl	8001e24 <RCC_GetSystemClockFreq>
 8001dce:	60f8      	str	r0, [r7, #12]
        break;
 8001dd0:	e021      	b.n	8001e16 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001dd2:	f7ff ff25 	bl	8001c20 <LL_RCC_HSI_IsReady>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d019      	beq.n	8001e10 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001dde:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001de0:	e016      	b.n	8001e10 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001de2:	f7ff ff2f 	bl	8001c44 <LL_RCC_LSE_IsReady>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001df2:	e00f      	b.n	8001e14 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001df4:	f000 f816 	bl	8001e24 <RCC_GetSystemClockFreq>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f834 	bl	8001e68 <RCC_GetHCLKClockFreq>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f846 	bl	8001e94 <RCC_GetPCLK1ClockFreq>
 8001e08:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001e0a:	e004      	b.n	8001e16 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001e0c:	bf00      	nop
 8001e0e:	e002      	b.n	8001e16 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001e10:	bf00      	nop
 8001e12:	e000      	b.n	8001e16 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001e14:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001e2e:	f7ff ff1b 	bl	8001c68 <LL_RCC_GetSysClkSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d006      	beq.n	8001e46 <RCC_GetSystemClockFreq+0x22>
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d007      	beq.n	8001e4c <RCC_GetSystemClockFreq+0x28>
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d109      	bne.n	8001e54 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <RCC_GetSystemClockFreq+0x40>)
 8001e42:	607b      	str	r3, [r7, #4]
      break;
 8001e44:	e009      	b.n	8001e5a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <RCC_GetSystemClockFreq+0x40>)
 8001e48:	607b      	str	r3, [r7, #4]
      break;
 8001e4a:	e006      	b.n	8001e5a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e4c:	f000 f84a 	bl	8001ee4 <RCC_PLL_GetFreqDomain_SYS>
 8001e50:	6078      	str	r0, [r7, #4]
      break;
 8001e52:	e002      	b.n	8001e5a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <RCC_GetSystemClockFreq+0x40>)
 8001e56:	607b      	str	r3, [r7, #4]
      break;
 8001e58:	bf00      	nop
  }

  return frequency;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	007a1200 	.word	0x007a1200

08001e68 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e70:	f7ff ff08 	bl	8001c84 <LL_RCC_GetAHBPrescaler>
 8001e74:	4603      	mov	r3, r0
 8001e76:	091b      	lsrs	r3, r3, #4
 8001e78:	f003 030f 	and.w	r3, r3, #15
 8001e7c:	4a04      	ldr	r2, [pc, #16]	; (8001e90 <RCC_GetHCLKClockFreq+0x28>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	461a      	mov	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	40d3      	lsrs	r3, r2
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	08002bb8 	.word	0x08002bb8

08001e94 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e9c:	f7ff ff00 	bl	8001ca0 <LL_RCC_GetAPB1Prescaler>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ea6:	5cd3      	ldrb	r3, [r2, r3]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	40d3      	lsrs	r3, r2
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	08002bc8 	.word	0x08002bc8

08001ebc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ec4:	f7ff fefa 	bl	8001cbc <LL_RCC_GetAPB2Prescaler>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	0adb      	lsrs	r3, r3, #11
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <RCC_GetPCLK2ClockFreq+0x24>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	40d3      	lsrs	r3, r2
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	08002bc8 	.word	0x08002bc8

08001ee4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ef2:	f7ff ff07 	bl	8001d04 <LL_RCC_PLL_GetMainSource>
 8001ef6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f02:	d003      	beq.n	8001f0c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001f04:	e005      	b.n	8001f12 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001f08:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001f0a:	e005      	b.n	8001f18 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001f0e:	60fb      	str	r3, [r7, #12]
      break;
 8001f10:	e002      	b.n	8001f18 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001f14:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001f16:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001f18:	f7ff ff10 	bl	8001d3c <LL_RCC_PLL_GetPrediv>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	3301      	adds	r3, #1
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	fbb2 f4f3 	udiv	r4, r2, r3
 8001f26:	f7ff fefb 	bl	8001d20 <LL_RCC_PLL_GetMultiplicator>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	603a      	str	r2, [r7, #0]
  return result;
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	40d3      	lsrs	r3, r2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	003d0900 	.word	0x003d0900
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <LL_TIM_SetPrescaler>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_TIM_SetAutoReload>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_TIM_SetRepetitionCounter>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_TIM_OC_SetCompareCH1>:
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_TIM_OC_SetCompareCH2>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_TIM_OC_SetCompareCH3>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_TIM_OC_SetCompareCH4>:
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_TIM_OC_SetCompareCH5>:
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_TIM_OC_SetCompareCH6>:
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f043 0201 	orr.w	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <LL_TIM_Init+0xd0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <LL_TIM_Init+0x28>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209e:	d003      	beq.n	80020a8 <LL_TIM_Init+0x28>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a2c      	ldr	r2, [pc, #176]	; (8002154 <LL_TIM_Init+0xd4>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d106      	bne.n	80020b6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a25      	ldr	r2, [pc, #148]	; (8002150 <LL_TIM_Init+0xd0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <LL_TIM_Init+0x66>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d00f      	beq.n	80020e6 <LL_TIM_Init+0x66>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a22      	ldr	r2, [pc, #136]	; (8002154 <LL_TIM_Init+0xd4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00b      	beq.n	80020e6 <LL_TIM_Init+0x66>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a21      	ldr	r2, [pc, #132]	; (8002158 <LL_TIM_Init+0xd8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <LL_TIM_Init+0x66>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a20      	ldr	r2, [pc, #128]	; (800215c <LL_TIM_Init+0xdc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d003      	beq.n	80020e6 <LL_TIM_Init+0x66>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <LL_TIM_Init+0xe0>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d106      	bne.n	80020f4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff3b 	bl	8001f7c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	4619      	mov	r1, r3
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff27 	bl	8001f60 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <LL_TIM_Init+0xd0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <LL_TIM_Init+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <LL_TIM_Init+0xd8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <LL_TIM_Init+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <LL_TIM_Init+0xdc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <LL_TIM_Init+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <LL_TIM_Init+0xe0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d105      	bne.n	800213e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7c1b      	ldrb	r3, [r3, #16]
 8002136:	4619      	mov	r1, r3
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff2d 	bl	8001f98 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ff8e 	bl	8002060 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40012c00 	.word	0x40012c00
 8002154:	40000400 	.word	0x40000400
 8002158:	40014000 	.word	0x40014000
 800215c:	40014400 	.word	0x40014400
 8002160:	40014800 	.word	0x40014800

08002164 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800217a:	d01f      	beq.n	80021bc <LL_TIM_OC_Init+0x58>
 800217c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002180:	d804      	bhi.n	800218c <LL_TIM_OC_Init+0x28>
 8002182:	2b01      	cmp	r3, #1
 8002184:	d00c      	beq.n	80021a0 <LL_TIM_OC_Init+0x3c>
 8002186:	2b10      	cmp	r3, #16
 8002188:	d011      	beq.n	80021ae <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 800218a:	e033      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d022      	beq.n	80021d8 <LL_TIM_OC_Init+0x74>
 8002192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002196:	d026      	beq.n	80021e6 <LL_TIM_OC_Init+0x82>
 8002198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219c:	d015      	beq.n	80021ca <LL_TIM_OC_Init+0x66>
      break;
 800219e:	e029      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f000 f82c 	bl	8002200 <OC1Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	75fb      	strb	r3, [r7, #23]
      break;
 80021ac:	e022      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 f89f 	bl	80022f4 <OC2Config>
 80021b6:	4603      	mov	r3, r0
 80021b8:	75fb      	strb	r3, [r7, #23]
      break;
 80021ba:	e01b      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f916 	bl	80023f0 <OC3Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	75fb      	strb	r3, [r7, #23]
      break;
 80021c8:	e014      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f98d 	bl	80024ec <OC4Config>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
      break;
 80021d6:	e00d      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f9ec 	bl	80025b8 <OC5Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	75fb      	strb	r3, [r7, #23]
      break;
 80021e4:	e006      	b.n	80021f4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fa43 	bl	8002674 <OC6Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	75fb      	strb	r3, [r7, #23]
      break;
 80021f2:	bf00      	nop
  }

  return result;
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	f023 0201 	bic.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	4313      	orrs	r3, r2
 8002240:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f023 0202 	bic.w	r2, r3, #2
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f023 0201 	bic.w	r2, r3, #1
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <OC1Config+0xe4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <OC1Config+0x7e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <OC1Config+0xe8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <OC1Config+0x7e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <OC1Config+0xec>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <OC1Config+0x7e>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <OC1Config+0xf0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d11e      	bne.n	80022bc <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f023 0208 	bic.w	r2, r3, #8
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4313      	orrs	r3, r2
 800228c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f023 0204 	bic.w	r2, r3, #4
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fe70 	bl	8001fb4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40014400 	.word	0x40014400
 80022f0:	40014800 	.word	0x40014800

080022f4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	f023 0210 	bic.w	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800232a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	0212      	lsls	r2, r2, #8
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0220 	bic.w	r2, r3, #32
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0210 	bic.w	r2, r3, #16
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <OC2Config+0xec>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00b      	beq.n	8002378 <OC2Config+0x84>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a20      	ldr	r2, [pc, #128]	; (80023e4 <OC2Config+0xf0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d007      	beq.n	8002378 <OC2Config+0x84>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a1f      	ldr	r2, [pc, #124]	; (80023e8 <OC2Config+0xf4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d003      	beq.n	8002378 <OC2Config+0x84>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <OC2Config+0xf8>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d11f      	bne.n	80023b8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	019b      	lsls	r3, r3, #6
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	019b      	lsls	r3, r3, #6
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4619      	mov	r1, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fe00 	bl	8001fd0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40014000 	.word	0x40014000
 80023e8:	40014400 	.word	0x40014400
 80023ec:	40014800 	.word	0x40014800

080023f0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <OC3Config+0xec>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00b      	beq.n	8002472 <OC3Config+0x82>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <OC3Config+0xf0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <OC3Config+0x82>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <OC3Config+0xf4>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d003      	beq.n	8002472 <OC3Config+0x82>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <OC3Config+0xf8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d11f      	bne.n	80024b2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fd91 	bl	8001fec <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40014000 	.word	0x40014000
 80024e4:	40014400 	.word	0x40014400
 80024e8:	40014800 	.word	0x40014800

080024ec <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	0212      	lsls	r2, r2, #8
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	031b      	lsls	r3, r3, #12
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	031b      	lsls	r3, r3, #12
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a15      	ldr	r2, [pc, #84]	; (80025a8 <OC4Config+0xbc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d00b      	beq.n	8002570 <OC4Config+0x84>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <OC4Config+0xc0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d007      	beq.n	8002570 <OC4Config+0x84>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <OC4Config+0xc4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d003      	beq.n	8002570 <OC4Config+0x84>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <OC4Config+0xc8>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d107      	bne.n	8002580 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	019b      	lsls	r3, r3, #6
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff fd38 	bl	8002008 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40014400 	.word	0x40014400
 80025b4:	40014800 	.word	0x40014800

080025b8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	041b      	lsls	r3, r3, #16
 8002608:	4313      	orrs	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <OC5Config+0xac>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00b      	beq.n	800262c <OC5Config+0x74>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a14      	ldr	r2, [pc, #80]	; (8002668 <OC5Config+0xb0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d007      	beq.n	800262c <OC5Config+0x74>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a13      	ldr	r2, [pc, #76]	; (800266c <OC5Config+0xb4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d003      	beq.n	800262c <OC5Config+0x74>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <OC5Config+0xb8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d109      	bne.n	8002640 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fce9 	bl	8002024 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40014000 	.word	0x40014000
 800266c:	40014400 	.word	0x40014400
 8002670:	40014800 	.word	0x40014800

08002674 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	0212      	lsls	r2, r2, #8
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	051b      	lsls	r3, r3, #20
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	051b      	lsls	r3, r3, #20
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <OC6Config+0xac>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00b      	beq.n	80026ea <OC6Config+0x76>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <OC6Config+0xb0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <OC6Config+0x76>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <OC6Config+0xb4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d003      	beq.n	80026ea <OC6Config+0x76>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <OC6Config+0xb8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d109      	bne.n	80026fe <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fc9a 	bl	8002044 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40014000 	.word	0x40014000
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800

08002730 <LL_USART_IsEnabled>:
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <LL_USART_IsEnabled+0x18>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_USART_IsEnabled+0x1a>
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <LL_USART_SetStopBitsLength>:
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	605a      	str	r2, [r3, #4]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_USART_SetHWFlowCtrl>:
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_USART_SetBaudRate>:
{
 80027a2:	b490      	push	{r4, r7}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b6:	d116      	bne.n	80027e6 <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	005a      	lsls	r2, r3, #1
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	441a      	add	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80027d2:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	60dc      	str	r4, [r3, #12]
}
 80027e4:	e00a      	b.n	80027fc <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	085a      	lsrs	r2, r3, #1
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	441a      	add	r2, r3
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	60da      	str	r2, [r3, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bc90      	pop	{r4, r7}
 8002804:	4770      	bx	lr
	...

08002808 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ff88 	bl	8002730 <LL_USART_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d14e      	bne.n	80028c4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <LL_USART_Init+0xc8>)
 800282c:	4013      	ands	r3, r2
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	6851      	ldr	r1, [r2, #4]
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	68d2      	ldr	r2, [r2, #12]
 8002836:	4311      	orrs	r1, r2
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	6912      	ldr	r2, [r2, #16]
 800283c:	4311      	orrs	r1, r2
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	6992      	ldr	r2, [r2, #24]
 8002842:	430a      	orrs	r2, r1
 8002844:	431a      	orrs	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff ff80 	bl	8002756 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4619      	mov	r1, r3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff8d 	bl	800277c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1b      	ldr	r2, [pc, #108]	; (80028d4 <LL_USART_Init+0xcc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d104      	bne.n	8002874 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800286a:	2000      	movs	r0, #0
 800286c:	f7ff fa9a 	bl	8001da4 <LL_RCC_GetUSARTClockFreq>
 8002870:	61b8      	str	r0, [r7, #24]
 8002872:	e016      	b.n	80028a2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <LL_USART_Init+0xd0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d107      	bne.n	800288c <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fa69 	bl	8001d58 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	e00a      	b.n	80028a2 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <LL_USART_Init+0xd4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d106      	bne.n	80028a2 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fa5d 	bl	8001d58 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00d      	beq.n	80028c4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d009      	beq.n	80028c4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80028b0:	2300      	movs	r3, #0
 80028b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69b9      	ldr	r1, [r7, #24]
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ff6f 	bl	80027a2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80028c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	efff69f3 	.word	0xefff69f3
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40004400 	.word	0x40004400
 80028dc:	40004800 	.word	0x40004800

080028e0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <LL_InitTick+0x30>)
 80028f4:	3b01      	subs	r3, #1
 80028f6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <LL_InitTick+0x30>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	4b04      	ldr	r3, [pc, #16]	; (8002910 <LL_InitTick+0x30>)
 8002900:	2205      	movs	r2, #5
 8002902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000e010 	.word	0xe000e010

08002914 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800291c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ffdd 	bl	80028e0 <LL_InitTick>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002938:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <LL_mDelay+0x44>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800293e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002946:	d00c      	beq.n	8002962 <LL_mDelay+0x32>
  {
    Delay++;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3301      	adds	r3, #1
 800294c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800294e:	e008      	b.n	8002962 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <LL_mDelay+0x44>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <LL_mDelay+0x32>
    {
      Delay--;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f3      	bne.n	8002950 <LL_mDelay+0x20>
    }
  }
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000e010 	.word	0xe000e010

08002978 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <LL_SetSystemCoreClock+0x1c>)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6013      	str	r3, [r2, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000008 	.word	0x20000008

08002998 <atoi>:
 8002998:	220a      	movs	r2, #10
 800299a:	2100      	movs	r1, #0
 800299c:	f000 b8ba 	b.w	8002b14 <strtol>

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	4e0d      	ldr	r6, [pc, #52]	; (80029d8 <__libc_init_array+0x38>)
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a6:	1ba4      	subs	r4, r4, r6
 80029a8:	10a4      	asrs	r4, r4, #2
 80029aa:	2500      	movs	r5, #0
 80029ac:	42a5      	cmp	r5, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	4e0b      	ldr	r6, [pc, #44]	; (80029e0 <__libc_init_array+0x40>)
 80029b2:	4c0c      	ldr	r4, [pc, #48]	; (80029e4 <__libc_init_array+0x44>)
 80029b4:	f000 f8e6 	bl	8002b84 <_init>
 80029b8:	1ba4      	subs	r4, r4, r6
 80029ba:	10a4      	asrs	r4, r4, #2
 80029bc:	2500      	movs	r5, #0
 80029be:	42a5      	cmp	r5, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029c8:	4798      	blx	r3
 80029ca:	3501      	adds	r5, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029d2:	4798      	blx	r3
 80029d4:	3501      	adds	r5, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08002cfc 	.word	0x08002cfc
 80029dc:	08002cfc 	.word	0x08002cfc
 80029e0:	08002cfc 	.word	0x08002cfc
 80029e4:	08002d00 	.word	0x08002d00

080029e8 <memset>:
 80029e8:	4402      	add	r2, r0
 80029ea:	4603      	mov	r3, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	f803 1b01 	strb.w	r1, [r3], #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <strncmp>:
 80029f8:	b510      	push	{r4, lr}
 80029fa:	b16a      	cbz	r2, 8002a18 <strncmp+0x20>
 80029fc:	3901      	subs	r1, #1
 80029fe:	1884      	adds	r4, r0, r2
 8002a00:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002a04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d103      	bne.n	8002a14 <strncmp+0x1c>
 8002a0c:	42a0      	cmp	r0, r4
 8002a0e:	d001      	beq.n	8002a14 <strncmp+0x1c>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f5      	bne.n	8002a00 <strncmp+0x8>
 8002a14:	1a98      	subs	r0, r3, r2
 8002a16:	bd10      	pop	{r4, pc}
 8002a18:	4610      	mov	r0, r2
 8002a1a:	e7fc      	b.n	8002a16 <strncmp+0x1e>

08002a1c <_strtol_l.isra.0>:
 8002a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	4680      	mov	r8, r0
 8002a22:	4689      	mov	r9, r1
 8002a24:	4692      	mov	sl, r2
 8002a26:	461e      	mov	r6, r3
 8002a28:	460f      	mov	r7, r1
 8002a2a:	463d      	mov	r5, r7
 8002a2c:	9808      	ldr	r0, [sp, #32]
 8002a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002a32:	f000 f885 	bl	8002b40 <__locale_ctype_ptr_l>
 8002a36:	4420      	add	r0, r4
 8002a38:	7843      	ldrb	r3, [r0, #1]
 8002a3a:	f013 0308 	ands.w	r3, r3, #8
 8002a3e:	d132      	bne.n	8002aa6 <_strtol_l.isra.0+0x8a>
 8002a40:	2c2d      	cmp	r4, #45	; 0x2d
 8002a42:	d132      	bne.n	8002aaa <_strtol_l.isra.0+0x8e>
 8002a44:	787c      	ldrb	r4, [r7, #1]
 8002a46:	1cbd      	adds	r5, r7, #2
 8002a48:	2201      	movs	r2, #1
 8002a4a:	2e00      	cmp	r6, #0
 8002a4c:	d05d      	beq.n	8002b0a <_strtol_l.isra.0+0xee>
 8002a4e:	2e10      	cmp	r6, #16
 8002a50:	d109      	bne.n	8002a66 <_strtol_l.isra.0+0x4a>
 8002a52:	2c30      	cmp	r4, #48	; 0x30
 8002a54:	d107      	bne.n	8002a66 <_strtol_l.isra.0+0x4a>
 8002a56:	782b      	ldrb	r3, [r5, #0]
 8002a58:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002a5c:	2b58      	cmp	r3, #88	; 0x58
 8002a5e:	d14f      	bne.n	8002b00 <_strtol_l.isra.0+0xe4>
 8002a60:	786c      	ldrb	r4, [r5, #1]
 8002a62:	2610      	movs	r6, #16
 8002a64:	3502      	adds	r5, #2
 8002a66:	2a00      	cmp	r2, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002a6e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002a72:	2700      	movs	r7, #0
 8002a74:	fbb1 fcf6 	udiv	ip, r1, r6
 8002a78:	4638      	mov	r0, r7
 8002a7a:	fb06 1e1c 	mls	lr, r6, ip, r1
 8002a7e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d817      	bhi.n	8002ab6 <_strtol_l.isra.0+0x9a>
 8002a86:	461c      	mov	r4, r3
 8002a88:	42a6      	cmp	r6, r4
 8002a8a:	dd23      	ble.n	8002ad4 <_strtol_l.isra.0+0xb8>
 8002a8c:	1c7b      	adds	r3, r7, #1
 8002a8e:	d007      	beq.n	8002aa0 <_strtol_l.isra.0+0x84>
 8002a90:	4584      	cmp	ip, r0
 8002a92:	d31c      	bcc.n	8002ace <_strtol_l.isra.0+0xb2>
 8002a94:	d101      	bne.n	8002a9a <_strtol_l.isra.0+0x7e>
 8002a96:	45a6      	cmp	lr, r4
 8002a98:	db19      	blt.n	8002ace <_strtol_l.isra.0+0xb2>
 8002a9a:	fb00 4006 	mla	r0, r0, r6, r4
 8002a9e:	2701      	movs	r7, #1
 8002aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002aa4:	e7eb      	b.n	8002a7e <_strtol_l.isra.0+0x62>
 8002aa6:	462f      	mov	r7, r5
 8002aa8:	e7bf      	b.n	8002a2a <_strtol_l.isra.0+0xe>
 8002aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8002aac:	bf04      	itt	eq
 8002aae:	1cbd      	addeq	r5, r7, #2
 8002ab0:	787c      	ldrbeq	r4, [r7, #1]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	e7c9      	b.n	8002a4a <_strtol_l.isra.0+0x2e>
 8002ab6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002aba:	2b19      	cmp	r3, #25
 8002abc:	d801      	bhi.n	8002ac2 <_strtol_l.isra.0+0xa6>
 8002abe:	3c37      	subs	r4, #55	; 0x37
 8002ac0:	e7e2      	b.n	8002a88 <_strtol_l.isra.0+0x6c>
 8002ac2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002ac6:	2b19      	cmp	r3, #25
 8002ac8:	d804      	bhi.n	8002ad4 <_strtol_l.isra.0+0xb8>
 8002aca:	3c57      	subs	r4, #87	; 0x57
 8002acc:	e7dc      	b.n	8002a88 <_strtol_l.isra.0+0x6c>
 8002ace:	f04f 37ff 	mov.w	r7, #4294967295
 8002ad2:	e7e5      	b.n	8002aa0 <_strtol_l.isra.0+0x84>
 8002ad4:	1c7b      	adds	r3, r7, #1
 8002ad6:	d108      	bne.n	8002aea <_strtol_l.isra.0+0xce>
 8002ad8:	2322      	movs	r3, #34	; 0x22
 8002ada:	f8c8 3000 	str.w	r3, [r8]
 8002ade:	4608      	mov	r0, r1
 8002ae0:	f1ba 0f00 	cmp.w	sl, #0
 8002ae4:	d107      	bne.n	8002af6 <_strtol_l.isra.0+0xda>
 8002ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aea:	b102      	cbz	r2, 8002aee <_strtol_l.isra.0+0xd2>
 8002aec:	4240      	negs	r0, r0
 8002aee:	f1ba 0f00 	cmp.w	sl, #0
 8002af2:	d0f8      	beq.n	8002ae6 <_strtol_l.isra.0+0xca>
 8002af4:	b10f      	cbz	r7, 8002afa <_strtol_l.isra.0+0xde>
 8002af6:	f105 39ff 	add.w	r9, r5, #4294967295
 8002afa:	f8ca 9000 	str.w	r9, [sl]
 8002afe:	e7f2      	b.n	8002ae6 <_strtol_l.isra.0+0xca>
 8002b00:	2430      	movs	r4, #48	; 0x30
 8002b02:	2e00      	cmp	r6, #0
 8002b04:	d1af      	bne.n	8002a66 <_strtol_l.isra.0+0x4a>
 8002b06:	2608      	movs	r6, #8
 8002b08:	e7ad      	b.n	8002a66 <_strtol_l.isra.0+0x4a>
 8002b0a:	2c30      	cmp	r4, #48	; 0x30
 8002b0c:	d0a3      	beq.n	8002a56 <_strtol_l.isra.0+0x3a>
 8002b0e:	260a      	movs	r6, #10
 8002b10:	e7a9      	b.n	8002a66 <_strtol_l.isra.0+0x4a>
	...

08002b14 <strtol>:
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <strtol+0x24>)
 8002b16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b18:	681c      	ldr	r4, [r3, #0]
 8002b1a:	4d08      	ldr	r5, [pc, #32]	; (8002b3c <strtol+0x28>)
 8002b1c:	6a23      	ldr	r3, [r4, #32]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf08      	it	eq
 8002b22:	462b      	moveq	r3, r5
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4613      	mov	r3, r2
 8002b28:	460a      	mov	r2, r1
 8002b2a:	4601      	mov	r1, r0
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff ff75 	bl	8002a1c <_strtol_l.isra.0>
 8002b32:	b003      	add	sp, #12
 8002b34:	bd30      	pop	{r4, r5, pc}
 8002b36:	bf00      	nop
 8002b38:	2000000c 	.word	0x2000000c
 8002b3c:	20000070 	.word	0x20000070

08002b40 <__locale_ctype_ptr_l>:
 8002b40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002b44:	4770      	bx	lr

08002b46 <__ascii_mbtowc>:
 8002b46:	b082      	sub	sp, #8
 8002b48:	b901      	cbnz	r1, 8002b4c <__ascii_mbtowc+0x6>
 8002b4a:	a901      	add	r1, sp, #4
 8002b4c:	b142      	cbz	r2, 8002b60 <__ascii_mbtowc+0x1a>
 8002b4e:	b14b      	cbz	r3, 8002b64 <__ascii_mbtowc+0x1e>
 8002b50:	7813      	ldrb	r3, [r2, #0]
 8002b52:	600b      	str	r3, [r1, #0]
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	1c10      	adds	r0, r2, #0
 8002b58:	bf18      	it	ne
 8002b5a:	2001      	movne	r0, #1
 8002b5c:	b002      	add	sp, #8
 8002b5e:	4770      	bx	lr
 8002b60:	4610      	mov	r0, r2
 8002b62:	e7fb      	b.n	8002b5c <__ascii_mbtowc+0x16>
 8002b64:	f06f 0001 	mvn.w	r0, #1
 8002b68:	e7f8      	b.n	8002b5c <__ascii_mbtowc+0x16>

08002b6a <__ascii_wctomb>:
 8002b6a:	b149      	cbz	r1, 8002b80 <__ascii_wctomb+0x16>
 8002b6c:	2aff      	cmp	r2, #255	; 0xff
 8002b6e:	bf85      	ittet	hi
 8002b70:	238a      	movhi	r3, #138	; 0x8a
 8002b72:	6003      	strhi	r3, [r0, #0]
 8002b74:	700a      	strbls	r2, [r1, #0]
 8002b76:	f04f 30ff 	movhi.w	r0, #4294967295
 8002b7a:	bf98      	it	ls
 8002b7c:	2001      	movls	r0, #1
 8002b7e:	4770      	bx	lr
 8002b80:	4608      	mov	r0, r1
 8002b82:	4770      	bx	lr

08002b84 <_init>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	bf00      	nop
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr

08002b90 <_fini>:
 8002b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b92:	bf00      	nop
 8002b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b96:	bc08      	pop	{r3}
 8002b98:	469e      	mov	lr, r3
 8002b9a:	4770      	bx	lr
