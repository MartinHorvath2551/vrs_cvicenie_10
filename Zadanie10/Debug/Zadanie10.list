
Zadanie10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003488  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003648  08003648  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003648  08003648  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003648  08003648  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000010  08003660  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003660  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c51a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021cd  00000000  00000000  0002c55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  0002e728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  0002f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ca4  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0f3  00000000  00000000  00049e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc06  00000000  00000000  00054f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003910  00000000  00000000  000e4bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035f8 	.word	0x080035f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080035f8 	.word	0x080035f8

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db0b      	blt.n	8000206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <__NVIC_EnableIRQ+0x38>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000228:	2b00      	cmp	r3, #0
 800022a:	db0a      	blt.n	8000242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	b2da      	uxtb	r2, r3
 8000230:	490c      	ldr	r1, [pc, #48]	; (8000264 <__NVIC_SetPriority+0x4c>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	0112      	lsls	r2, r2, #4
 8000238:	b2d2      	uxtb	r2, r2
 800023a:	440b      	add	r3, r1
 800023c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000240:	e00a      	b.n	8000258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4908      	ldr	r1, [pc, #32]	; (8000268 <__NVIC_SetPriority+0x50>)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 030f 	and.w	r3, r3, #15
 800024e:	3b04      	subs	r3, #4
 8000250:	0112      	lsls	r2, r2, #4
 8000252:	b2d2      	uxtb	r2, r2
 8000254:	440b      	add	r3, r1
 8000256:	761a      	strb	r2, [r3, #24]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000e100 	.word	0xe000e100
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	4907      	ldr	r1, [pc, #28]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4313      	orrs	r3, r2
 800027e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4013      	ands	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800028a:	68fb      	ldr	r3, [r7, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000

0800029c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffe3 	bl	800026c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2010      	movs	r0, #16
 80002aa:	f7ff ffb5 	bl	8000218 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002ae:	2010      	movs	r0, #16
 80002b0:	f7ff ff94 	bl	80001dc <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2011      	movs	r0, #17
 80002b8:	f7ff ffae 	bl	8000218 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002bc:	2011      	movs	r0, #17
 80002be:	f7ff ff8d 	bl	80001dc <__NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <LL_AHB1_GRP1_EnableClock>:
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4313      	orrs	r3, r2
 80002da:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4013      	ands	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002e6:	68fb      	ldr	r3, [r7, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80002fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000300:	f7ff ffe2 	bl	80002c8 <LL_AHB1_GRP1_EnableClock>

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <LL_RCC_HSI_Enable+0x1c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <LL_RCC_HSI_Enable+0x1c>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <LL_RCC_HSI_IsReady+0x20>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b02      	cmp	r3, #2
 8000336:	bf0c      	ite	eq
 8000338:	2301      	moveq	r3, #1
 800033a:	2300      	movne	r3, #0
 800033c:	b2db      	uxtb	r3, r3
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	4904      	ldr	r1, [pc, #16]	; (8000374 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000362:	4313      	orrs	r3, r2
 8000364:	600b      	str	r3, [r1, #0]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <LL_RCC_SetSysClkSource+0x24>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	f023 0203 	bic.w	r2, r3, #3
 8000388:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_RCC_SetSysClkSource+0x24>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4313      	orrs	r3, r2
 800038e:	604b      	str	r3, [r1, #4]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <LL_RCC_GetSysClkSource+0x18>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f003 030c 	and.w	r3, r3, #12
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003cc:	4904      	ldr	r1, [pc, #16]	; (80003e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	604b      	str	r3, [r1, #4]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80003f4:	4904      	ldr	r1, [pc, #16]	; (8000408 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	604b      	str	r3, [r1, #4]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800041c:	4904      	ldr	r1, [pc, #16]	; (8000430 <LL_RCC_SetAPB2Prescaler+0x24>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	604b      	str	r3, [r1, #4]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_FLASH_SetLatency+0x24>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f023 0207 	bic.w	r2, r3, #7
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_FLASH_SetLatency+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	600b      	str	r3, [r1, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40022000 	.word	0x40022000

0800045c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <LL_FLASH_GetLatency+0x18>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0307 	and.w	r3, r3, #7
}
 8000468:	4618      	mov	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40022000 	.word	0x40022000

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f001 f872 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f830 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f7ff ff38 	bl	80002f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000488:	f7ff ff08 	bl	800029c <MX_DMA_Init>
  MX_TIM2_Init();
 800048c:	f000 fa88 	bl	80009a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000490:	f000 fafc 	bl	8000a8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000494:	f000 fed4 	bl	8001240 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 8000498:	4807      	ldr	r0, [pc, #28]	; (80004b8 <main+0x40>)
 800049a:	f000 febf 	bl	800121c <USART2_RegisterCallback>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800049e:	2100      	movs	r1, #0
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <main+0x44>)
 80004a2:	f001 fbfd 	bl	8001ca0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <main+0x48>)
 80004a8:	f001 fb66 	bl	8001b78 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	#if POLLING
  	//Polling for new data, no interrupts
  		USART2_CheckDmaReception();
 80004ac:	f000 ffa0 	bl	80013f0 <USART2_CheckDmaReception>
  		LL_mDelay(10);
 80004b0:	200a      	movs	r0, #10
 80004b2:	f003 f841 	bl	8003538 <LL_mDelay>
  		USART2_CheckDmaReception();
 80004b6:	e7f9      	b.n	80004ac <main+0x34>
 80004b8:	08000555 	.word	0x08000555
 80004bc:	20000098 	.word	0x20000098
 80004c0:	20000058 	.word	0x20000058

080004c4 <setDutyCycle>:
  }
  /* USER CODE END 3 */
}


void setDutyCycle(uint8_t D){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
    TIM2->CCR1 = D;
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff ffa3 	bl	8000434 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80004ee:	f7ff ffb5 	bl	800045c <LL_FLASH_GetLatency>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80004f8:	f000 f8a2 	bl	8000640 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80004fc:	f7ff ff04 	bl	8000308 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000500:	bf00      	nop
 8000502:	f7ff ff11 	bl	8000328 <LL_RCC_HSI_IsReady>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1fa      	bne.n	8000502 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800050c:	2010      	movs	r0, #16
 800050e:	f7ff ff1d 	bl	800034c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ff52 	bl	80003bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff ff63 	bl	80003e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff ff74 	bl	800040c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff27 	bl	8000378 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800052a:	bf00      	nop
 800052c:	f7ff ff38 	bl	80003a0 <LL_RCC_GetSysClkSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1fa      	bne.n	800052c <SystemClock_Config+0x48>
  {
  
  }
  LL_SetSystemCoreClock(8000000);
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <SystemClock_Config+0x6c>)
 8000538:	f003 f822 	bl	8003580 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800053c:	2000      	movs	r0, #0
 800053e:	f001 f827 	bl	8001590 <HAL_InitTick>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x68>
  {
    Error_Handler();  
 8000548:	f000 f87a 	bl	8000640 <Error_Handler>
  };
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	007a1200 	.word	0x007a1200

08000554 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
    /* Process received data */

        // type your algorithm here:

    for(uint8_t i = 0; i < len; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e033      	b.n	80005ce <proccesDmaData+0x7a>
    {

        if ((*(data+i) == '$') && (start))
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b24      	cmp	r3, #36	; 0x24
 8000570:	d10e      	bne.n	8000590 <proccesDmaData+0x3c>
 8000572:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <proccesDmaData+0x8c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00a      	beq.n	8000590 <proccesDmaData+0x3c>
        {
            //sem posleme string ked bude hotovo
            CompareMessage();
 800057a:	f000 f835 	bl	80005e8 <CompareMessage>
            memset(message,0,sizeof(message));
 800057e:	220a      	movs	r2, #10
 8000580:	2100      	movs	r1, #0
 8000582:	4818      	ldr	r0, [pc, #96]	; (80005e4 <proccesDmaData+0x90>)
 8000584:	f003 f830 	bl	80035e8 <memset>
            start = 0;
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <proccesDmaData+0x8c>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
            break;
 800058e:	e023      	b.n	80005d8 <proccesDmaData+0x84>
        }
        else if(*(data+i) == '$')
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b24      	cmp	r3, #36	; 0x24
 800059a:	d103      	bne.n	80005a4 <proccesDmaData+0x50>
        {
            start = 1;
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <proccesDmaData+0x8c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
            break;
 80005a2:	e019      	b.n	80005d8 <proccesDmaData+0x84>
        }

        if(start >= 1)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <proccesDmaData+0x8c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	dd0d      	ble.n	80005c8 <proccesDmaData+0x74>
        {
            message[start-1]= *(data+i);
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	441a      	add	r2, r3
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <proccesDmaData+0x8c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	3b01      	subs	r3, #1
 80005b8:	7811      	ldrb	r1, [r2, #0]
 80005ba:	4a0a      	ldr	r2, [pc, #40]	; (80005e4 <proccesDmaData+0x90>)
 80005bc:	54d1      	strb	r1, [r2, r3]
            start++;
 80005be:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <proccesDmaData+0x8c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <proccesDmaData+0x8c>)
 80005c6:	6013      	str	r3, [r2, #0]
    for(uint8_t i = 0; i < len; i++)
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	3301      	adds	r3, #1
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	887a      	ldrh	r2, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d8c6      	bhi.n	8000566 <proccesDmaData+0x12>
        }


    }
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	2000002c 	.word	0x2000002c
 80005e4:	20000030 	.word	0x20000030

080005e8 <CompareMessage>:

void CompareMessage()
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	static int count = 0;
    if(strcmp(message, "auto")==0)
 80005ec:	490f      	ldr	r1, [pc, #60]	; (800062c <CompareMessage+0x44>)
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <CompareMessage+0x48>)
 80005f0:	f7ff fdea 	bl	80001c8 <strcmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d107      	bne.n	800060a <CompareMessage+0x22>
        {
    	count++;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <CompareMessage+0x4c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <CompareMessage+0x4c>)
 8000602:	6013      	str	r3, [r2, #0]
           	autoON = 1;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <CompareMessage+0x50>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
        }
    if(strcmp(message, "manual")==0)
 800060a:	490c      	ldr	r1, [pc, #48]	; (800063c <CompareMessage+0x54>)
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <CompareMessage+0x48>)
 800060e:	f7ff fddb 	bl	80001c8 <strcmp>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d107      	bne.n	8000628 <CompareMessage+0x40>
        {
    	count++;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <CompareMessage+0x4c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	4a05      	ldr	r2, [pc, #20]	; (8000634 <CompareMessage+0x4c>)
 8000620:	6013      	str	r3, [r2, #0]
    		autoON = 0;
 8000622:	4b05      	ldr	r3, [pc, #20]	; (8000638 <CompareMessage+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
    if(!autoON)
    {

    }

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08003610 	.word	0x08003610
 8000630:	20000030 	.word	0x20000030
 8000634:	2000003c 	.word	0x2000003c
 8000638:	20000000 	.word	0x20000000
 800063c:	08003618 	.word	0x08003618

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	61d3      	str	r3, [r2, #28]
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x44>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <LL_DMA_DisableChannel+0x3c>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	683a      	ldr	r2, [r7, #0]
 80006b4:	3a01      	subs	r2, #1
 80006b6:	4907      	ldr	r1, [pc, #28]	; (80006d4 <LL_DMA_DisableChannel+0x3c>)
 80006b8:	5c8a      	ldrb	r2, [r1, r2]
 80006ba:	4611      	mov	r1, r2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	440a      	add	r2, r1
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6013      	str	r3, [r2, #0]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	08003620 	.word	0x08003620

080006d8 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80006ec:	bf0c      	ite	eq
 80006ee:	2301      	moveq	r3, #1
 80006f0:	2300      	movne	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000710:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000714:	bf0c      	ite	eq
 8000716:	2301      	moveq	r3, #1
 8000718:	2300      	movne	r3, #0
 800071a:	b2db      	uxtb	r3, r3
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800075e:	605a      	str	r2, [r3, #4]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800077a:	605a      	str	r2, [r3, #4]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000796:	605a      	str	r2, [r3, #4]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f003 0310 	and.w	r3, r3, #16
 80007b4:	2b10      	cmp	r3, #16
 80007b6:	d101      	bne.n	80007bc <LL_USART_IsActiveFlag_IDLE+0x18>
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <LL_USART_IsActiveFlag_IDLE+0x1a>
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007da:	2b40      	cmp	r3, #64	; 0x40
 80007dc:	d101      	bne.n	80007e2 <LL_USART_IsActiveFlag_TC+0x18>
 80007de:	2301      	movs	r3, #1
 80007e0:	e000      	b.n	80007e4 <LL_USART_IsActiveFlag_TC+0x1a>
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2210      	movs	r2, #16
 80007fc:	621a      	str	r2, [r3, #32]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <HardFault_Handler+0x4>

0800081e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <MemManage_Handler+0x4>

08000824 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <BusFault_Handler+0x4>

0800082a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 fec7 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <DMA1_Channel6_IRQHandler+0x38>)
 800086e:	f7ff ff33 	bl	80006d8 <LL_DMA_IsActiveFlag_TC6>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	d105      	bne.n	8000884 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8000878:	f000 fdba 	bl	80013f0 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <DMA1_Channel6_IRQHandler+0x38>)
 800087e:	f7ff ff67 	bl	8000750 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000882:	e00a      	b.n	800089a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <DMA1_Channel6_IRQHandler+0x38>)
 8000886:	f7ff ff4f 	bl	8000728 <LL_DMA_IsActiveFlag_HT6>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d104      	bne.n	800089a <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8000890:	f000 fdae 	bl	80013f0 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <DMA1_Channel6_IRQHandler+0x38>)
 8000896:	f7ff ff77 	bl	8000788 <LL_DMA_ClearFlag_HT6>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000

080008a4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80008a8:	480a      	ldr	r0, [pc, #40]	; (80008d4 <DMA1_Channel7_IRQHandler+0x30>)
 80008aa:	f7ff ff29 	bl	8000700 <LL_DMA_IsActiveFlag_TC7>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10d      	bne.n	80008d0 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <DMA1_Channel7_IRQHandler+0x30>)
 80008b6:	f7ff ff59 	bl	800076c <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80008ba:	bf00      	nop
 80008bc:	4806      	ldr	r0, [pc, #24]	; (80008d8 <DMA1_Channel7_IRQHandler+0x34>)
 80008be:	f7ff ff84 	bl	80007ca <LL_USART_IsActiveFlag_TC>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80008c8:	2107      	movs	r1, #7
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <DMA1_Channel7_IRQHandler+0x30>)
 80008cc:	f7ff fee4 	bl	8000698 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40004400 	.word	0x40004400

080008dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(!je_zapnuta){
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <TIM3_IRQHandler+0x68>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d111      	bne.n	800090c <TIM3_IRQHandler+0x30>
	            hodnota++;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <TIM3_IRQHandler+0x6c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <TIM3_IRQHandler+0x6c>)
 80008f2:	701a      	strb	r2, [r3, #0]
	            setDutyCycle(hodnota);
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <TIM3_IRQHandler+0x6c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fde3 	bl	80004c4 <setDutyCycle>
	            if(hodnota >= 100){
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <TIM3_IRQHandler+0x6c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b63      	cmp	r3, #99	; 0x63
 8000904:	d902      	bls.n	800090c <TIM3_IRQHandler+0x30>
	                je_zapnuta = 1;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <TIM3_IRQHandler+0x68>)
 8000908:	2201      	movs	r2, #1
 800090a:	601a      	str	r2, [r3, #0]
	            }
	        }
	        if(je_zapnuta){
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <TIM3_IRQHandler+0x68>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d011      	beq.n	8000938 <TIM3_IRQHandler+0x5c>
	            hodnota--;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <TIM3_IRQHandler+0x6c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3b01      	subs	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <TIM3_IRQHandler+0x6c>)
 800091e:	701a      	strb	r2, [r3, #0]
	            setDutyCycle(hodnota);
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <TIM3_IRQHandler+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdcd 	bl	80004c4 <setDutyCycle>
	            if(hodnota <= 0){
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <TIM3_IRQHandler+0x6c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <TIM3_IRQHandler+0x5c>
	                je_zapnuta = 0;
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <TIM3_IRQHandler+0x68>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
	            }
	        }
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <TIM3_IRQHandler+0x70>)
 800093a:	f001 fa03 	bl	8001d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000040 	.word	0x20000040
 8000948:	20000044 	.word	0x20000044
 800094c:	20000058 	.word	0x20000058

08000950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8000954:	4806      	ldr	r0, [pc, #24]	; (8000970 <USART2_IRQHandler+0x20>)
 8000956:	f7ff ff25 	bl	80007a4 <LL_USART_IsActiveFlag_IDLE>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d004      	beq.n	800096a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8000960:	f000 fd46 	bl	80013f0 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <USART2_IRQHandler+0x20>)
 8000966:	f7ff ff43 	bl	80007f0 <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <SystemInit+0x28>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <SystemInit+0x28>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <SystemInit+0x28>)
 800098a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800098e:	609a      	str	r2, [r3, #8]
#endif
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	; 0x38
 80009a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009dc:	f240 321f 	movw	r2, #799	; 0x31f
 80009e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009ea:	2263      	movs	r2, #99	; 0x63
 80009ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009fa:	4823      	ldr	r0, [pc, #140]	; (8000a88 <MX_TIM2_Init+0xe8>)
 80009fc:	f001 f890 	bl	8001b20 <HAL_TIM_Base_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f7ff fe1b 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a14:	4619      	mov	r1, r3
 8000a16:	481c      	ldr	r0, [pc, #112]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a18:	f001 fc4a 	bl	80022b0 <HAL_TIM_ConfigClockSource>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a22:	f7ff fe0d 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a28:	f001 f905 	bl	8001c36 <HAL_TIM_PWM_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a32:	f7ff fe05 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a46:	f002 f8fd 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a50:	f7ff fdf6 	bl	8000640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	; 0x60
 8000a56:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a6c:	f001 fb08 	bl	8002080 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a76:	f7ff fde3 	bl	8000640 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000a7a:	4803      	ldr	r0, [pc, #12]	; (8000a88 <MX_TIM2_Init+0xe8>)
 8000a7c:	f000 f8b2 	bl	8000be4 <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	; 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000098 	.word	0x20000098

08000a8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ac0:	4a2b      	ldr	r2, [pc, #172]	; (8000b70 <MX_TIM3_Init+0xe4>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000ac4:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ac6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000ad2:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ad4:	2209      	movs	r2, #9
 8000ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae4:	4821      	ldr	r0, [pc, #132]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000ae6:	f001 f81b 	bl	8001b20 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000af0:	f7ff fda6 	bl	8000640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481a      	ldr	r0, [pc, #104]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000b02:	f001 fbd5 	bl	80022b0 <HAL_TIM_ConfigClockSource>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b0c:	f7ff fd98 	bl	8000640 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b10:	4816      	ldr	r0, [pc, #88]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000b12:	f001 f85b 	bl	8001bcc <HAL_TIM_OC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b1c:	f7ff fd90 	bl	8000640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000b30:	f002 f888 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b3a:	f7ff fd81 	bl	8000640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000b3e:	2310      	movs	r3, #16
 8000b40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_TIM3_Init+0xe0>)
 8000b56:	f001 fa15 	bl	8001f84 <HAL_TIM_OC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b60:	f7ff fd6e 	bl	8000640 <Error_Handler>
  }

}
 8000b64:	bf00      	nop
 8000b66:	3738      	adds	r7, #56	; 0x38
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000058 	.word	0x20000058
 8000b70:	40000400 	.word	0x40000400

08000b74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d10c      	bne.n	8000ba0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b9e:	e018      	b.n	8000bd2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_TIM_Base_MspInit+0x6c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d113      	bne.n	8000bd2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_TIM_Base_MspInit+0x68>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201d      	movs	r0, #29
 8000bc8:	f000 fe01 	bl	80017ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bcc:	201d      	movs	r0, #29
 8000bce:	f000 fe1a 	bl	8001806 <HAL_NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40000400 	.word	0x40000400

08000be4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b088      	sub	sp, #32
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d11c      	bne.n	8000c40 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_TIM_MspPostInit+0x64>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_TIM_MspPostInit+0x64>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c10:	6153      	str	r3, [r2, #20]
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_TIM_MspPostInit+0x64>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f000 fdfe 	bl	800183c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <__NVIC_EnableIRQ>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <LL_DMA_EnableChannel>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LL_DMA_EnableChannel+0x3c>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	4907      	ldr	r1, [pc, #28]	; (8000d18 <LL_DMA_EnableChannel+0x3c>)
 8000cfc:	5c8a      	ldrb	r2, [r1, r2]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	440a      	add	r2, r1
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6013      	str	r3, [r2, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	08003640 	.word	0x08003640

08000d1c <LL_DMA_DisableChannel>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LL_DMA_DisableChannel+0x3c>)
 8000d2c:	5cd3      	ldrb	r3, [r2, r3]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	4907      	ldr	r1, [pc, #28]	; (8000d58 <LL_DMA_DisableChannel+0x3c>)
 8000d3c:	5c8a      	ldrb	r2, [r1, r2]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	440a      	add	r2, r1
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	08003640 	.word	0x08003640

08000d5c <LL_DMA_SetDataTransferDirection>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <LL_DMA_SetDataTransferDirection+0x48>)
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	461a      	mov	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4413      	add	r3, r2
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d7c:	f023 0310 	bic.w	r3, r3, #16
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	3a01      	subs	r2, #1
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <LL_DMA_SetDataTransferDirection+0x48>)
 8000d86:	5c8a      	ldrb	r2, [r1, r2]
 8000d88:	4611      	mov	r1, r2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	440a      	add	r2, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	600b      	str	r3, [r1, #0]
}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	08003640 	.word	0x08003640

08000da8 <LL_DMA_GetDataTransferDirection>:
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	f244 0310 	movw	r3, #16400	; 0x4010
 8000dc6:	4013      	ands	r3, r2
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	08003640 	.word	0x08003640

08000dd8 <LL_DMA_SetMode>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <LL_DMA_SetMode+0x44>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	461a      	mov	r2, r3
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4413      	add	r3, r2
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 0220 	bic.w	r2, r3, #32
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <LL_DMA_SetMode+0x44>)
 8000dfe:	5ccb      	ldrb	r3, [r1, r3]
 8000e00:	4619      	mov	r1, r3
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	440b      	add	r3, r1
 8000e06:	4619      	mov	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	600b      	str	r3, [r1, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	08003640 	.word	0x08003640

08000e20 <LL_DMA_SetPeriphIncMode>:
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	4a0c      	ldr	r2, [pc, #48]	; (8000e64 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	461a      	mov	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <LL_DMA_SetPeriphIncMode+0x44>)
 8000e46:	5ccb      	ldrb	r3, [r1, r3]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	600b      	str	r3, [r1, #0]
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	08003640 	.word	0x08003640

08000e68 <LL_DMA_SetMemoryIncMode>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <LL_DMA_SetMemoryIncMode+0x44>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4907      	ldr	r1, [pc, #28]	; (8000eac <LL_DMA_SetMemoryIncMode+0x44>)
 8000e8e:	5ccb      	ldrb	r3, [r1, r3]
 8000e90:	4619      	mov	r1, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	440b      	add	r3, r1
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	08003640 	.word	0x08003640

08000eb0 <LL_DMA_SetPeriphSize>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	4a0c      	ldr	r2, [pc, #48]	; (8000ef4 <LL_DMA_SetPeriphSize+0x44>)
 8000ec2:	5cd3      	ldrb	r3, [r2, r3]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <LL_DMA_SetPeriphSize+0x44>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	440b      	add	r3, r1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	08003640 	.word	0x08003640

08000ef8 <LL_DMA_SetMemorySize>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <LL_DMA_SetMemorySize+0x44>)
 8000f0a:	5cd3      	ldrb	r3, [r2, r3]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4413      	add	r3, r2
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <LL_DMA_SetMemorySize+0x44>)
 8000f1e:	5ccb      	ldrb	r3, [r1, r3]
 8000f20:	4619      	mov	r1, r3
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	440b      	add	r3, r1
 8000f26:	4619      	mov	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	08003640 	.word	0x08003640

08000f40 <LL_DMA_SetChannelPriorityLevel>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000f52:	5cd3      	ldrb	r3, [r2, r3]
 8000f54:	461a      	mov	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4413      	add	r3, r2
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000f66:	5ccb      	ldrb	r3, [r1, r3]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	440b      	add	r3, r1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	08003640 	.word	0x08003640

08000f88 <LL_DMA_SetDataLength>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <LL_DMA_SetDataLength+0x44>)
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <LL_DMA_SetDataLength+0x44>)
 8000fae:	5c8a      	ldrb	r2, [r1, r2]
 8000fb0:	4611      	mov	r1, r2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	440a      	add	r2, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
}
 8000fbe:	bf00      	nop
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	08003640 	.word	0x08003640

08000fd0 <LL_DMA_GetDataLength>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <LL_DMA_GetDataLength+0x28>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	b29b      	uxth	r3, r3
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	08003640 	.word	0x08003640

08000ffc <LL_DMA_ConfigAddresses>:
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2b10      	cmp	r3, #16
 800100e:	d114      	bne.n	800103a <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a16      	ldr	r2, [pc, #88]	; (8001070 <LL_DMA_ConfigAddresses+0x74>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	3b01      	subs	r3, #1
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <LL_DMA_ConfigAddresses+0x74>)
 800102a:	5cd3      	ldrb	r3, [r2, r3]
 800102c:	461a      	mov	r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4413      	add	r3, r2
 8001032:	461a      	mov	r2, r3
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	6093      	str	r3, [r2, #8]
}
 8001038:	e013      	b.n	8001062 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	3b01      	subs	r3, #1
 800103e:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <LL_DMA_ConfigAddresses+0x74>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <LL_DMA_ConfigAddresses+0x74>)
 8001054:	5cd3      	ldrb	r3, [r2, r3]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	461a      	mov	r2, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	60d3      	str	r3, [r2, #12]
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	08003640 	.word	0x08003640

08001074 <LL_DMA_SetPeriphAddress>:
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3b01      	subs	r3, #1
 8001084:	4a06      	ldr	r2, [pc, #24]	; (80010a0 <LL_DMA_SetPeriphAddress+0x2c>)
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	461a      	mov	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6093      	str	r3, [r2, #8]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	08003640 	.word	0x08003640

080010a4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	4a0b      	ldr	r2, [pc, #44]	; (80010e0 <LL_DMA_EnableIT_TE+0x3c>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	3a01      	subs	r2, #1
 80010c2:	4907      	ldr	r1, [pc, #28]	; (80010e0 <LL_DMA_EnableIT_TE+0x3c>)
 80010c4:	5c8a      	ldrb	r2, [r1, r2]
 80010c6:	4611      	mov	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	440a      	add	r2, r1
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6013      	str	r3, [r2, #0]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	08003640 	.word	0x08003640

080010e4 <LL_AHB1_GRP1_EnableClock>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40021000 	.word	0x40021000

08001114 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	69da      	ldr	r2, [r3, #28]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4013      	ands	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000

08001144 <LL_USART_Enable>:
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_USART_ConfigAsyncMode>:
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	609a      	str	r2, [r3, #8]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80011f0:	b490      	push	{r4, r7}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d103      	bne.n	8001208 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3328      	adds	r3, #40	; 0x28
 8001204:	461c      	mov	r4, r3
 8001206:	e002      	b.n	800120e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3324      	adds	r3, #36	; 0x24
 800120c:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 800120e:	4623      	mov	r3, r4
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bc90      	pop	{r4, r7}
 8001218:	4770      	bx	lr
	...

0800121c <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <USART2_RegisterCallback+0x20>)
 800122e:	6013      	str	r3, [r2, #0]
	}
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	20000048 	.word	0x20000048

08001240 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b090      	sub	sp, #64	; 0x40
 8001244:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
 8001256:	615a      	str	r2, [r3, #20]
 8001258:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800126a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800126e:	f7ff ff51 	bl	8001114 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001276:	f7ff ff35 	bl	80010e4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800127a:	f248 0304 	movw	r3, #32772	; 0x8004
 800127e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001280:	2302      	movs	r3, #2
 8001282:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001290:	2307      	movs	r3, #7
 8001292:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f001 fe63 	bl	8002f66 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2106      	movs	r1, #6
 80012a4:	484f      	ldr	r0, [pc, #316]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012a6:	f7ff fd59 	bl	8000d5c <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 80012aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ae:	2106      	movs	r1, #6
 80012b0:	484c      	ldr	r0, [pc, #304]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012b2:	f7ff fe45 	bl	8000f40 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2106      	movs	r1, #6
 80012ba:	484a      	ldr	r0, [pc, #296]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012bc:	f7ff fd8c 	bl	8000dd8 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2106      	movs	r1, #6
 80012c4:	4847      	ldr	r0, [pc, #284]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012c6:	f7ff fdab 	bl	8000e20 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	2106      	movs	r1, #6
 80012ce:	4845      	ldr	r0, [pc, #276]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012d0:	f7ff fdca 	bl	8000e68 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2106      	movs	r1, #6
 80012d8:	4842      	ldr	r0, [pc, #264]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012da:	f7ff fde9 	bl	8000eb0 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80012de:	2200      	movs	r2, #0
 80012e0:	2106      	movs	r1, #6
 80012e2:	4840      	ldr	r0, [pc, #256]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012e4:	f7ff fe08 	bl	8000ef8 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 80012e8:	2101      	movs	r1, #1
 80012ea:	483f      	ldr	r0, [pc, #252]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 80012ec:	f7ff ff80 	bl	80011f0 <LL_USART_DMA_GetRegAddr>
 80012f0:	4605      	mov	r5, r0
 80012f2:	4c3e      	ldr	r4, [pc, #248]	; (80013ec <MX_USART2_UART_Init+0x1ac>)
 80012f4:	2106      	movs	r1, #6
 80012f6:	483b      	ldr	r0, [pc, #236]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 80012f8:	f7ff fd56 	bl	8000da8 <LL_DMA_GetDataTransferDirection>
 80012fc:	4603      	mov	r3, r0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	4623      	mov	r3, r4
 8001302:	462a      	mov	r2, r5
 8001304:	2106      	movs	r1, #6
 8001306:	4837      	ldr	r0, [pc, #220]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 8001308:	f7ff fe78 	bl	8000ffc <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800130c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001310:	2106      	movs	r1, #6
 8001312:	4834      	ldr	r0, [pc, #208]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 8001314:	f7ff fe38 	bl	8000f88 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001318:	2106      	movs	r1, #6
 800131a:	4832      	ldr	r0, [pc, #200]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 800131c:	f7ff fcde 	bl	8000cdc <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001320:	4831      	ldr	r0, [pc, #196]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 8001322:	f7ff ff45 	bl	80011b0 <LL_USART_EnableDMAReq_RX>
  #endif

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001326:	2210      	movs	r2, #16
 8001328:	2107      	movs	r1, #7
 800132a:	482e      	ldr	r0, [pc, #184]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 800132c:	f7ff fd16 	bl	8000d5c <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8001330:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001334:	2107      	movs	r1, #7
 8001336:	482b      	ldr	r0, [pc, #172]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 8001338:	f7ff fe02 	bl	8000f40 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800133c:	2200      	movs	r2, #0
 800133e:	2107      	movs	r1, #7
 8001340:	4828      	ldr	r0, [pc, #160]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 8001342:	f7ff fd49 	bl	8000dd8 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001346:	2200      	movs	r2, #0
 8001348:	2107      	movs	r1, #7
 800134a:	4826      	ldr	r0, [pc, #152]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 800134c:	f7ff fd68 	bl	8000e20 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	2107      	movs	r1, #7
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 8001356:	f7ff fd87 	bl	8000e68 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800135a:	2200      	movs	r2, #0
 800135c:	2107      	movs	r1, #7
 800135e:	4821      	ldr	r0, [pc, #132]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 8001360:	f7ff fda6 	bl	8000eb0 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001364:	2200      	movs	r2, #0
 8001366:	2107      	movs	r1, #7
 8001368:	481e      	ldr	r0, [pc, #120]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 800136a:	f7ff fdc5 	bl	8000ef8 <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800136e:	2100      	movs	r1, #0
 8001370:	481d      	ldr	r0, [pc, #116]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 8001372:	f7ff ff3d 	bl	80011f0 <LL_USART_DMA_GetRegAddr>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	2107      	movs	r1, #7
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 800137e:	f7ff fe79 	bl	8001074 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 8001382:	4819      	ldr	r0, [pc, #100]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 8001384:	f7ff ff24 	bl	80011d0 <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8001388:	2107      	movs	r1, #7
 800138a:	4816      	ldr	r0, [pc, #88]	; (80013e4 <MX_USART2_UART_Init+0x1a4>)
 800138c:	f7ff fe8a 	bl	80010a4 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001390:	2100      	movs	r1, #0
 8001392:	2026      	movs	r0, #38	; 0x26
 8001394:	f7ff fc78 	bl	8000c88 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001398:	2026      	movs	r0, #38	; 0x26
 800139a:	f7ff fc57 	bl	8000c4c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800139e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80013a2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013b0:	230c      	movs	r3, #12
 80013b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013b8:	2300      	movs	r3, #0
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	4809      	ldr	r0, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 80013c4:	f002 f84c 	bl	8003460 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 80013ca:	f7ff fecb 	bl	8001164 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 80013d0:	f7ff fede 	bl	8001190 <LL_USART_DisableIT_CTS>

  	  //type your code here:
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_Enable(USART2);
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_USART2_UART_Init+0x1a8>)
 80013d6:	f7ff feb5 	bl	8001144 <LL_USART_Enable>
}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	; 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40004400 	.word	0x40004400
 80013ec:	200000d8 	.word	0x200000d8

080013f0 <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <USART2_CheckDmaReception+0xfc>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d072      	beq.n	80014e4 <USART2_CheckDmaReception+0xf4>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80013fe:	2106      	movs	r1, #6
 8001400:	483b      	ldr	r0, [pc, #236]	; (80014f0 <USART2_CheckDmaReception+0x100>)
 8001402:	f7ff fde5 	bl	8000fd0 <LL_DMA_GetDataLength>
 8001406:	4603      	mov	r3, r0
 8001408:	b29b      	uxth	r3, r3
 800140a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800140e:	80fb      	strh	r3, [r7, #6]

		occupied_memory=pos;
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b37      	ldr	r3, [pc, #220]	; (80014f4 <USART2_CheckDmaReception+0x104>)
 8001416:	701a      	strb	r2, [r3, #0]
		load=(float)(occupied_memory)/(float)(DMA_USART2_BUFFER_SIZE)*100.0;
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <USART2_CheckDmaReception+0x104>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	ee07 3a90 	vmov	s15, r3
 8001420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001424:	eddf 6a34 	vldr	s13, [pc, #208]	; 80014f8 <USART2_CheckDmaReception+0x108>
 8001428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80014fc <USART2_CheckDmaReception+0x10c>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	4b32      	ldr	r3, [pc, #200]	; (8001500 <USART2_CheckDmaReception+0x110>)
 8001436:	edc3 7a00 	vstr	s15, [r3]

		if (pos != old_pos)
 800143a:	4b32      	ldr	r3, [pc, #200]	; (8001504 <USART2_CheckDmaReception+0x114>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	88fa      	ldrh	r2, [r7, #6]
 8001440:	429a      	cmp	r2, r3
 8001442:	d050      	beq.n	80014e6 <USART2_CheckDmaReception+0xf6>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2beb      	cmp	r3, #235	; 0xeb
 8001448:	d811      	bhi.n	800146e <USART2_CheckDmaReception+0x7e>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <USART2_CheckDmaReception+0xfc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <USART2_CheckDmaReception+0x114>)
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	4611      	mov	r1, r2
 8001454:	4a2c      	ldr	r2, [pc, #176]	; (8001508 <USART2_CheckDmaReception+0x118>)
 8001456:	1888      	adds	r0, r1, r2
 8001458:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <USART2_CheckDmaReception+0x114>)
 800145a:	8812      	ldrh	r2, [r2, #0]
 800145c:	88f9      	ldrh	r1, [r7, #6]
 800145e:	1a8a      	subs	r2, r1, r2
 8001460:	b292      	uxth	r2, r2
 8001462:	4611      	mov	r1, r2
 8001464:	4798      	blx	r3
				old_pos = pos;
 8001466:	4a27      	ldr	r2, [pc, #156]	; (8001504 <USART2_CheckDmaReception+0x114>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	8013      	strh	r3, [r2, #0]
 800146c:	e03b      	b.n	80014e6 <USART2_CheckDmaReception+0xf6>
			}
			else
			{

				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <USART2_CheckDmaReception+0xfc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <USART2_CheckDmaReception+0x114>)
 8001474:	8812      	ldrh	r2, [r2, #0]
 8001476:	4611      	mov	r1, r2
 8001478:	4a23      	ldr	r2, [pc, #140]	; (8001508 <USART2_CheckDmaReception+0x118>)
 800147a:	1888      	adds	r0, r1, r2
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <USART2_CheckDmaReception+0x114>)
 800147e:	8812      	ldrh	r2, [r2, #0]
 8001480:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8001484:	b292      	uxth	r2, r2
 8001486:	4611      	mov	r1, r2
 8001488:	4798      	blx	r3
				//clear bufferUSART2dma
				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 800148a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800148e:	2100      	movs	r1, #0
 8001490:	481d      	ldr	r0, [pc, #116]	; (8001508 <USART2_CheckDmaReception+0x118>)
 8001492:	f002 f8a9 	bl	80035e8 <memset>
				// as was mentioned in datasheet first needs to be disabled
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001496:	2106      	movs	r1, #6
 8001498:	4815      	ldr	r0, [pc, #84]	; (80014f0 <USART2_CheckDmaReception+0x100>)
 800149a:	f7ff fc3f 	bl	8000d1c <LL_DMA_DisableChannel>
				// them reconfigure
				LL_DMA_ConfigAddresses(     DMA1, LL_DMA_CHANNEL_6,
 800149e:	2101      	movs	r1, #1
 80014a0:	481a      	ldr	r0, [pc, #104]	; (800150c <USART2_CheckDmaReception+0x11c>)
 80014a2:	f7ff fea5 	bl	80011f0 <LL_USART_DMA_GetRegAddr>
 80014a6:	4605      	mov	r5, r0
 80014a8:	4c17      	ldr	r4, [pc, #92]	; (8001508 <USART2_CheckDmaReception+0x118>)
 80014aa:	2106      	movs	r1, #6
 80014ac:	4810      	ldr	r0, [pc, #64]	; (80014f0 <USART2_CheckDmaReception+0x100>)
 80014ae:	f7ff fc7b 	bl	8000da8 <LL_DMA_GetDataTransferDirection>
 80014b2:	4603      	mov	r3, r0
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4623      	mov	r3, r4
 80014b8:	462a      	mov	r2, r5
 80014ba:	2106      	movs	r1, #6
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <USART2_CheckDmaReception+0x100>)
 80014be:	f7ff fd9d 	bl	8000ffc <LL_DMA_ConfigAddresses>
											LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
											(uint32_t)bufferUSART2dma,
											LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80014c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c6:	2106      	movs	r1, #6
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <USART2_CheckDmaReception+0x100>)
 80014ca:	f7ff fd5d 	bl	8000f88 <LL_DMA_SetDataLength>
				//lastly enabled
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80014ce:	2106      	movs	r1, #6
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <USART2_CheckDmaReception+0x100>)
 80014d2:	f7ff fc03 	bl	8000cdc <LL_DMA_EnableChannel>
				LL_USART_EnableDMAReq_RX(USART2);
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <USART2_CheckDmaReception+0x11c>)
 80014d8:	f7ff fe6a 	bl	80011b0 <LL_USART_EnableDMAReq_RX>


				old_pos = 0;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <USART2_CheckDmaReception+0x114>)
 80014de:	2200      	movs	r2, #0
 80014e0:	801a      	strh	r2, [r3, #0]
 80014e2:	e000      	b.n	80014e6 <USART2_CheckDmaReception+0xf6>
	if(USART2_ProcessData == 0) return;
 80014e4:	bf00      	nop

			}
		}
}
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	20000048 	.word	0x20000048
 80014f0:	40020000 	.word	0x40020000
 80014f4:	20000050 	.word	0x20000050
 80014f8:	43800000 	.word	0x43800000
 80014fc:	42c80000 	.word	0x42c80000
 8001500:	20000054 	.word	0x20000054
 8001504:	2000004c 	.word	0x2000004c
 8001508:	200000d8 	.word	0x200000d8
 800150c:	40004400 	.word	0x40004400

08001510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001514:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001516:	e003      	b.n	8001520 <LoopCopyDataInit>

08001518 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800151a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800151c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800151e:	3104      	adds	r1, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001524:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001526:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001528:	d3f6      	bcc.n	8001518 <CopyDataInit>
	ldr	r2, =_sbss
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopForever+0x12>)
	b	LoopFillZerobss
 800152c:	e002      	b.n	8001534 <LoopFillZerobss>

0800152e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800152e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001530:	f842 3b04 	str.w	r3, [r2], #4

08001534 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <LoopForever+0x16>)
	cmp	r2, r3
 8001536:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001538:	d3f9      	bcc.n	800152e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153a:	f7ff fa1b 	bl	8000974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f002 f82f 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001542:	f7fe ff99 	bl	8000478 <main>

08001546 <LoopForever>:

LoopForever:
    b LoopForever
 8001546:	e7fe      	b.n	8001546 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001548:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800154c:	08003650 	.word	0x08003650
	ldr	r0, =_sdata
 8001550:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001554:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001558:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800155c:	200001dc 	.word	0x200001dc

08001560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_2_IRQHandler>
	...

08001564 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x28>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f000 f91f 	bl	80017b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff f866 	bl	8000650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f937 	bl	8001822 <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f8ff 	bl	80017ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000004 	.word	0x20000004
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20000008 	.word	0x20000008

080015f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2000000c 	.word	0x2000000c
 8001614:	200001d8 	.word	0x200001d8

08001618 <__NVIC_SetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001634:	4013      	ands	r3, r2
 8001636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <__NVIC_SetPriorityGrouping+0x44>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_GetPriorityGrouping>:
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <__NVIC_GetPriorityGrouping+0x18>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	0a1b      	lsrs	r3, r3, #8
 800166a:	f003 0307 	and.w	r3, r3, #7
}
 800166e:	4618      	mov	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_EnableIRQ>:
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db0b      	blt.n	80016a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	f003 021f 	and.w	r2, r3, #31
 8001694:	4907      	ldr	r1, [pc, #28]	; (80016b4 <__NVIC_EnableIRQ+0x38>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	095b      	lsrs	r3, r3, #5
 800169c:	2001      	movs	r0, #1
 800169e:	fa00 f202 	lsl.w	r2, r0, r2
 80016a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001784:	d301      	bcc.n	800178a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001786:	2301      	movs	r3, #1
 8001788:	e00f      	b.n	80017aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <SysTick_Config+0x40>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3b01      	subs	r3, #1
 8001790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001792:	210f      	movs	r1, #15
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f7ff ff8e 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800179c:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <SysTick_Config+0x40>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <SysTick_Config+0x40>)
 80017a4:	2207      	movs	r2, #7
 80017a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	e000e010 	.word	0xe000e010

080017b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff29 	bl	8001618 <__NVIC_SetPriorityGrouping>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b086      	sub	sp, #24
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e0:	f7ff ff3e 	bl	8001660 <__NVIC_GetPriorityGrouping>
 80017e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff ff8e 	bl	800170c <NVIC_EncodePriority>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff5d 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fe:	bf00      	nop
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff31 	bl	800167c <__NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffa2 	bl	8001774 <SysTick_Config>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e14e      	b.n	8001aea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2101      	movs	r1, #1
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8140 	beq.w	8001ae4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d00b      	beq.n	8001884 <HAL_GPIO_Init+0x48>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d007      	beq.n	8001884 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001878:	2b11      	cmp	r3, #17
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b12      	cmp	r3, #18
 8001882:	d130      	bne.n	80018e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68da      	ldr	r2, [r3, #12]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ba:	2201      	movs	r2, #1
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	091b      	lsrs	r3, r3, #4
 80018d0:	f003 0201 	and.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0xea>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b12      	cmp	r3, #18
 8001924:	d123      	bne.n	800196e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	08da      	lsrs	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3208      	adds	r2, #8
 800192e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	6939      	ldr	r1, [r7, #16]
 800196a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0203 	and.w	r2, r3, #3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 809a 	beq.w	8001ae4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <HAL_GPIO_Init+0x2cc>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019c8:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	220f      	movs	r2, #15
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f2:	d013      	beq.n	8001a1c <HAL_GPIO_Init+0x1e0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a46      	ldr	r2, [pc, #280]	; (8001b10 <HAL_GPIO_Init+0x2d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00d      	beq.n	8001a18 <HAL_GPIO_Init+0x1dc>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a45      	ldr	r2, [pc, #276]	; (8001b14 <HAL_GPIO_Init+0x2d8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <HAL_GPIO_Init+0x1d8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a44      	ldr	r2, [pc, #272]	; (8001b18 <HAL_GPIO_Init+0x2dc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_GPIO_Init+0x1d4>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e006      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a10:	2305      	movs	r3, #5
 8001a12:	e004      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a14:	2302      	movs	r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <HAL_GPIO_Init+0x1e2>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	f002 0203 	and.w	r2, r2, #3
 8001a24:	0092      	lsls	r2, r2, #2
 8001a26:	4093      	lsls	r3, r2
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a2e:	4937      	ldr	r1, [pc, #220]	; (8001b0c <HAL_GPIO_Init+0x2d0>)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a60:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a66:	4b2d      	ldr	r3, [pc, #180]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a90:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ade:	4a0f      	ldr	r2, [pc, #60]	; (8001b1c <HAL_GPIO_Init+0x2e0>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa22 f303 	lsr.w	r3, r2, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f47f aea9 	bne.w	800184c <HAL_GPIO_Init+0x10>
  }
}
 8001afa:	bf00      	nop
 8001afc:	371c      	adds	r7, #28
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	48000800 	.word	0x48000800
 8001b18:	48000c00 	.word	0x48000c00
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e01d      	b.n	8001b6e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff f814 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 fc92 	bl	8002488 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_TIM_Base_Start_IT+0x50>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b06      	cmp	r3, #6
 8001ba0:	d00b      	beq.n	8001bba <HAL_TIM_Base_Start_IT+0x42>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d007      	beq.n	8001bba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	00010007 	.word	0x00010007

08001bcc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e01d      	b.n	8001c1a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f815 	bl	8001c22 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3304      	adds	r3, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	f000 fc3c 	bl	8002488 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e01d      	b.n	8001c84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d106      	bne.n	8001c62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f815 	bl	8001c8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3304      	adds	r3, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f000 fc07 	bl	8002488 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 ffa0 	bl	8002bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_TIM_PWM_Start+0x90>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00e      	beq.n	8001ce0 <HAL_TIM_PWM_Start+0x40>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_TIM_PWM_Start+0x94>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d009      	beq.n	8001ce0 <HAL_TIM_PWM_Start+0x40>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_TIM_PWM_Start+0x98>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d004      	beq.n	8001ce0 <HAL_TIM_PWM_Start+0x40>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <HAL_TIM_PWM_Start+0x9c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_TIM_PWM_Start+0x44>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_TIM_PWM_Start+0x46>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_TIM_PWM_Start+0xa0>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b06      	cmp	r3, #6
 8001d0a:	d00b      	beq.n	8001d24 <HAL_TIM_PWM_Start+0x84>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d12:	d007      	beq.n	8001d24 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40012c00 	.word	0x40012c00
 8001d34:	40014000 	.word	0x40014000
 8001d38:	40014400 	.word	0x40014400
 8001d3c:	40014800 	.word	0x40014800
 8001d40:	00010007 	.word	0x00010007

08001d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d122      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d11b      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0202 	mvn.w	r2, #2
 8001d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 fb5f 	bl	800244a <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fb51 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fb62 	bl	800245e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d11b      	bne.n	8001df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0204 	mvn.w	r2, #4
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fb35 	bl	800244a <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fb27 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fb38 	bl	800245e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0208 	mvn.w	r2, #8
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fb0b 	bl	800244a <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fafd 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fb0e 	bl	800245e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0210 	mvn.w	r2, #16
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2208      	movs	r2, #8
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fae1 	bl	800244a <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fad3 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fae4 	bl	800245e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0201 	mvn.w	r2, #1
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 faad 	bl	8002422 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 ff20 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d10e      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 ff13 	bl	8002d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d10e      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa92 	bl	8002472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d10e      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d107      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0220 	mvn.w	r2, #32
 8001f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fed3 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_TIM_OC_ConfigChannel+0x1a>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e06c      	b.n	8002078 <HAL_TIM_OC_ConfigChannel+0xf4>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2202      	movs	r2, #2
 8001faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b14      	cmp	r3, #20
 8001fb2:	d857      	bhi.n	8002064 <HAL_TIM_OC_ConfigChannel+0xe0>
 8001fb4:	a201      	add	r2, pc, #4	; (adr r2, 8001fbc <HAL_TIM_OC_ConfigChannel+0x38>)
 8001fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fba:	bf00      	nop
 8001fbc:	08002011 	.word	0x08002011
 8001fc0:	08002065 	.word	0x08002065
 8001fc4:	08002065 	.word	0x08002065
 8001fc8:	08002065 	.word	0x08002065
 8001fcc:	0800201f 	.word	0x0800201f
 8001fd0:	08002065 	.word	0x08002065
 8001fd4:	08002065 	.word	0x08002065
 8001fd8:	08002065 	.word	0x08002065
 8001fdc:	0800202d 	.word	0x0800202d
 8001fe0:	08002065 	.word	0x08002065
 8001fe4:	08002065 	.word	0x08002065
 8001fe8:	08002065 	.word	0x08002065
 8001fec:	0800203b 	.word	0x0800203b
 8001ff0:	08002065 	.word	0x08002065
 8001ff4:	08002065 	.word	0x08002065
 8001ff8:	08002065 	.word	0x08002065
 8001ffc:	08002049 	.word	0x08002049
 8002000:	08002065 	.word	0x08002065
 8002004:	08002065 	.word	0x08002065
 8002008:	08002065 	.word	0x08002065
 800200c:	08002057 	.word	0x08002057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 faae 	bl	8002578 <TIM_OC1_SetConfig>
      break;
 800201c:	e023      	b.n	8002066 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fb2d 	bl	8002684 <TIM_OC2_SetConfig>
      break;
 800202a:	e01c      	b.n	8002066 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fba6 	bl	8002784 <TIM_OC3_SetConfig>
      break;
 8002038:	e015      	b.n	8002066 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fc1d 	bl	8002880 <TIM_OC4_SetConfig>
      break;
 8002046:	e00e      	b.n	8002066 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fc7a 	bl	8002948 <TIM_OC5_SetConfig>
      break;
 8002054:	e007      	b.n	8002066 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68b9      	ldr	r1, [r7, #8]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fcd1 	bl	8002a04 <TIM_OC6_SetConfig>
      break;
 8002062:	e000      	b.n	8002066 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002064:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002096:	2302      	movs	r3, #2
 8002098:	e105      	b.n	80022a6 <HAL_TIM_PWM_ConfigChannel+0x226>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2202      	movs	r2, #2
 80020a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b14      	cmp	r3, #20
 80020ae:	f200 80f0 	bhi.w	8002292 <HAL_TIM_PWM_ConfigChannel+0x212>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	0800210d 	.word	0x0800210d
 80020bc:	08002293 	.word	0x08002293
 80020c0:	08002293 	.word	0x08002293
 80020c4:	08002293 	.word	0x08002293
 80020c8:	0800214d 	.word	0x0800214d
 80020cc:	08002293 	.word	0x08002293
 80020d0:	08002293 	.word	0x08002293
 80020d4:	08002293 	.word	0x08002293
 80020d8:	0800218f 	.word	0x0800218f
 80020dc:	08002293 	.word	0x08002293
 80020e0:	08002293 	.word	0x08002293
 80020e4:	08002293 	.word	0x08002293
 80020e8:	080021cf 	.word	0x080021cf
 80020ec:	08002293 	.word	0x08002293
 80020f0:	08002293 	.word	0x08002293
 80020f4:	08002293 	.word	0x08002293
 80020f8:	08002211 	.word	0x08002211
 80020fc:	08002293 	.word	0x08002293
 8002100:	08002293 	.word	0x08002293
 8002104:	08002293 	.word	0x08002293
 8002108:	08002251 	.word	0x08002251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fa30 	bl	8002578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0208 	orr.w	r2, r2, #8
 8002126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0204 	bic.w	r2, r2, #4
 8002136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6999      	ldr	r1, [r3, #24]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	691a      	ldr	r2, [r3, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	619a      	str	r2, [r3, #24]
      break;
 800214a:	e0a3      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fa96 	bl	8002684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6999      	ldr	r1, [r3, #24]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	619a      	str	r2, [r3, #24]
      break;
 800218c:	e082      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	4618      	mov	r0, r3
 8002196:	f000 faf5 	bl	8002784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0208 	orr.w	r2, r2, #8
 80021a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0204 	bic.w	r2, r2, #4
 80021b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69d9      	ldr	r1, [r3, #28]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	61da      	str	r2, [r3, #28]
      break;
 80021cc:	e062      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fb53 	bl	8002880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69d9      	ldr	r1, [r3, #28]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	021a      	lsls	r2, r3, #8
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	61da      	str	r2, [r3, #28]
      break;
 800220e:	e041      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fb96 	bl	8002948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0208 	orr.w	r2, r2, #8
 800222a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800224e:	e021      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fbd4 	bl	8002a04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800226a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	021a      	lsls	r2, r3, #8
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002290:	e000      	b.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002292:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop

080022b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_TIM_ConfigClockSource+0x18>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0a8      	b.n	800241a <HAL_TIM_ConfigClockSource+0x16a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d067      	beq.n	80023d4 <HAL_TIM_ConfigClockSource+0x124>
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d80b      	bhi.n	8002320 <HAL_TIM_ConfigClockSource+0x70>
 8002308:	2b10      	cmp	r3, #16
 800230a:	d073      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x144>
 800230c:	2b10      	cmp	r3, #16
 800230e:	d802      	bhi.n	8002316 <HAL_TIM_ConfigClockSource+0x66>
 8002310:	2b00      	cmp	r3, #0
 8002312:	d06f      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002314:	e078      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002316:	2b20      	cmp	r3, #32
 8002318:	d06c      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x144>
 800231a:	2b30      	cmp	r3, #48	; 0x30
 800231c:	d06a      	beq.n	80023f4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800231e:	e073      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002320:	2b70      	cmp	r3, #112	; 0x70
 8002322:	d00d      	beq.n	8002340 <HAL_TIM_ConfigClockSource+0x90>
 8002324:	2b70      	cmp	r3, #112	; 0x70
 8002326:	d804      	bhi.n	8002332 <HAL_TIM_ConfigClockSource+0x82>
 8002328:	2b50      	cmp	r3, #80	; 0x50
 800232a:	d033      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xe4>
 800232c:	2b60      	cmp	r3, #96	; 0x60
 800232e:	d041      	beq.n	80023b4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002330:	e06a      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002336:	d066      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x156>
 8002338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233c:	d017      	beq.n	800236e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800233e:	e063      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	6899      	ldr	r1, [r3, #8]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f000 fc32 	bl	8002bb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002362:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]
      break;
 800236c:	e04c      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f000 fc1b 	bl	8002bb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002390:	609a      	str	r2, [r3, #8]
      break;
 8002392:	e039      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	461a      	mov	r2, r3
 80023a2:	f000 fb8f 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2150      	movs	r1, #80	; 0x50
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fbe8 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 80023b2:	e029      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f000 fbae 	bl	8002b22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2160      	movs	r1, #96	; 0x60
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fbd8 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 80023d2:	e019      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f000 fb6f 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2140      	movs	r1, #64	; 0x40
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 fbc8 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 80023f2:	e009      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4610      	mov	r0, r2
 8002400:	f000 fbbf 	bl	8002b82 <TIM_ITRx_SetConfig>
      break;
 8002404:	e000      	b.n	8002408 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a32      	ldr	r2, [pc, #200]	; (8002564 <TIM_Base_SetConfig+0xdc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d007      	beq.n	80024b0 <TIM_Base_SetConfig+0x28>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d003      	beq.n	80024b0 <TIM_Base_SetConfig+0x28>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <TIM_Base_SetConfig+0xe0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d108      	bne.n	80024c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a27      	ldr	r2, [pc, #156]	; (8002564 <TIM_Base_SetConfig+0xdc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <TIM_Base_SetConfig+0x6a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d0:	d00f      	beq.n	80024f2 <TIM_Base_SetConfig+0x6a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a24      	ldr	r2, [pc, #144]	; (8002568 <TIM_Base_SetConfig+0xe0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d00b      	beq.n	80024f2 <TIM_Base_SetConfig+0x6a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a23      	ldr	r2, [pc, #140]	; (800256c <TIM_Base_SetConfig+0xe4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d007      	beq.n	80024f2 <TIM_Base_SetConfig+0x6a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <TIM_Base_SetConfig+0xe8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d003      	beq.n	80024f2 <TIM_Base_SetConfig+0x6a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <TIM_Base_SetConfig+0xec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d108      	bne.n	8002504 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <TIM_Base_SetConfig+0xdc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00b      	beq.n	8002548 <TIM_Base_SetConfig+0xc0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <TIM_Base_SetConfig+0xe4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <TIM_Base_SetConfig+0xc0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <TIM_Base_SetConfig+0xe8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <TIM_Base_SetConfig+0xc0>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <TIM_Base_SetConfig+0xec>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40012c00 	.word	0x40012c00
 8002568:	40000400 	.word	0x40000400
 800256c:	40014000 	.word	0x40014000
 8002570:	40014400 	.word	0x40014400
 8002574:	40014800 	.word	0x40014800

08002578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 0302 	bic.w	r3, r3, #2
 80025c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a28      	ldr	r2, [pc, #160]	; (8002674 <TIM_OC1_SetConfig+0xfc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00b      	beq.n	80025f0 <TIM_OC1_SetConfig+0x78>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a27      	ldr	r2, [pc, #156]	; (8002678 <TIM_OC1_SetConfig+0x100>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_OC1_SetConfig+0x78>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a26      	ldr	r2, [pc, #152]	; (800267c <TIM_OC1_SetConfig+0x104>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_OC1_SetConfig+0x78>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a25      	ldr	r2, [pc, #148]	; (8002680 <TIM_OC1_SetConfig+0x108>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d10c      	bne.n	800260a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0308 	bic.w	r3, r3, #8
 80025f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 0304 	bic.w	r3, r3, #4
 8002608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <TIM_OC1_SetConfig+0xfc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00b      	beq.n	800262a <TIM_OC1_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <TIM_OC1_SetConfig+0x100>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <TIM_OC1_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <TIM_OC1_SetConfig+0x104>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d003      	beq.n	800262a <TIM_OC1_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a16      	ldr	r2, [pc, #88]	; (8002680 <TIM_OC1_SetConfig+0x108>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d111      	bne.n	800264e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	621a      	str	r2, [r3, #32]
}
 8002668:	bf00      	nop
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40014000 	.word	0x40014000
 800267c:	40014400 	.word	0x40014400
 8002680:	40014800 	.word	0x40014800

08002684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f023 0210 	bic.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0320 	bic.w	r3, r3, #32
 80026d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a24      	ldr	r2, [pc, #144]	; (8002774 <TIM_OC2_SetConfig+0xf0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10d      	bne.n	8002704 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a1b      	ldr	r2, [pc, #108]	; (8002774 <TIM_OC2_SetConfig+0xf0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00b      	beq.n	8002724 <TIM_OC2_SetConfig+0xa0>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <TIM_OC2_SetConfig+0xf4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d007      	beq.n	8002724 <TIM_OC2_SetConfig+0xa0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a19      	ldr	r2, [pc, #100]	; (800277c <TIM_OC2_SetConfig+0xf8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d003      	beq.n	8002724 <TIM_OC2_SetConfig+0xa0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <TIM_OC2_SetConfig+0xfc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d113      	bne.n	800274c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800272a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002732:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400
 8002780:	40014800 	.word	0x40014800

08002784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <TIM_OC3_SetConfig+0xec>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	021b      	lsls	r3, r3, #8
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002800:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <TIM_OC3_SetConfig+0xec>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_OC3_SetConfig+0x9e>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <TIM_OC3_SetConfig+0xf0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_OC3_SetConfig+0x9e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <TIM_OC3_SetConfig+0xf4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_OC3_SetConfig+0x9e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <TIM_OC3_SetConfig+0xf8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d113      	bne.n	800284a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	621a      	str	r2, [r3, #32]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800

08002880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	031b      	lsls	r3, r3, #12
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a16      	ldr	r2, [pc, #88]	; (8002938 <TIM_OC4_SetConfig+0xb8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00b      	beq.n	80028fc <TIM_OC4_SetConfig+0x7c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a15      	ldr	r2, [pc, #84]	; (800293c <TIM_OC4_SetConfig+0xbc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <TIM_OC4_SetConfig+0x7c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a14      	ldr	r2, [pc, #80]	; (8002940 <TIM_OC4_SetConfig+0xc0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d003      	beq.n	80028fc <TIM_OC4_SetConfig+0x7c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a13      	ldr	r2, [pc, #76]	; (8002944 <TIM_OC4_SetConfig+0xc4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d109      	bne.n	8002910 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	019b      	lsls	r3, r3, #6
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4313      	orrs	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	621a      	str	r2, [r3, #32]
}
 800292a:	bf00      	nop
 800292c:	371c      	adds	r7, #28
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40014000 	.word	0x40014000
 8002940:	40014400 	.word	0x40014400
 8002944:	40014800 	.word	0x40014800

08002948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800298c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	041b      	lsls	r3, r3, #16
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <TIM_OC5_SetConfig+0xac>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00b      	beq.n	80029ba <TIM_OC5_SetConfig+0x72>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a14      	ldr	r2, [pc, #80]	; (80029f8 <TIM_OC5_SetConfig+0xb0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d007      	beq.n	80029ba <TIM_OC5_SetConfig+0x72>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a13      	ldr	r2, [pc, #76]	; (80029fc <TIM_OC5_SetConfig+0xb4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d003      	beq.n	80029ba <TIM_OC5_SetConfig+0x72>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <TIM_OC5_SetConfig+0xb8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d109      	bne.n	80029ce <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	621a      	str	r2, [r3, #32]
}
 80029e8:	bf00      	nop
 80029ea:	371c      	adds	r7, #28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40014000 	.word	0x40014000
 80029fc:	40014400 	.word	0x40014400
 8002a00:	40014800 	.word	0x40014800

08002a04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	051b      	lsls	r3, r3, #20
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <TIM_OC6_SetConfig+0xb0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00b      	beq.n	8002a78 <TIM_OC6_SetConfig+0x74>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <TIM_OC6_SetConfig+0xb4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <TIM_OC6_SetConfig+0x74>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a14      	ldr	r2, [pc, #80]	; (8002abc <TIM_OC6_SetConfig+0xb8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d003      	beq.n	8002a78 <TIM_OC6_SetConfig+0x74>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <TIM_OC6_SetConfig+0xbc>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d109      	bne.n	8002a8c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	029b      	lsls	r3, r3, #10
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	621a      	str	r2, [r3, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40014400 	.word	0x40014400
 8002ac0:	40014800 	.word	0x40014800

08002ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0201 	bic.w	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 030a 	bic.w	r3, r3, #10
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b087      	sub	sp, #28
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	f023 0210 	bic.w	r2, r3, #16
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	031b      	lsls	r3, r3, #12
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f043 0307 	orr.w	r3, r3, #7
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	021a      	lsls	r2, r3, #8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	609a      	str	r2, [r3, #8]
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e054      	b.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d108      	bne.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d00e      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d009      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d004      	beq.n	8002cda <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40000400 	.word	0x40000400
 8002d1c:	40014000 	.word	0x40014000

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	; 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2103      	movs	r1, #3
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	61bb      	str	r3, [r7, #24]
  return result;
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b085      	sub	sp, #20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b089      	sub	sp, #36	; 0x24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	613b      	str	r3, [r7, #16]
  return result;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2103      	movs	r1, #3
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	401a      	ands	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	61bb      	str	r3, [r7, #24]
  return result;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	fa01 f303 	lsl.w	r3, r1, r3
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002e3c:	bf00      	nop
 8002e3e:	3724      	adds	r7, #36	; 0x24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	613b      	str	r3, [r7, #16]
  return result;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2103      	movs	r1, #3
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	61bb      	str	r3, [r7, #24]
  return result;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	60da      	str	r2, [r3, #12]
}
 8002e9a:	bf00      	nop
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b089      	sub	sp, #36	; 0x24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1a      	ldr	r2, [r3, #32]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	613b      	str	r3, [r7, #16]
  return result;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	210f      	movs	r1, #15
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002ef8:	bf00      	nop
 8002efa:	3724      	adds	r7, #36	; 0x24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	613b      	str	r3, [r7, #16]
  return result;
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	210f      	movs	r1, #15
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	43db      	mvns	r3, r3
 8002f34:	401a      	ands	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	61bb      	str	r3, [r7, #24]
  return result;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b088      	sub	sp, #32
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	613b      	str	r3, [r7, #16]
  return result;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002f88:	e051      	b.n	800302e <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2101      	movs	r1, #1
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d043      	beq.n	8003028 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d003      	beq.n	8002fb0 <LL_GPIO_Init+0x4a>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d10e      	bne.n	8002fce <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	69b9      	ldr	r1, [r7, #24]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff ff16 	bl	8002dea <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fef6 	bl	8002dba <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	69b9      	ldr	r1, [r7, #24]
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ff36 	bl	8002e48 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d11a      	bne.n	800301a <LL_GPIO_Init+0xb4>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	60bb      	str	r3, [r7, #8]
  return result;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b07      	cmp	r3, #7
 8002ffa:	d807      	bhi.n	800300c <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	461a      	mov	r2, r3
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff4e 	bl	8002ea6 <LL_GPIO_SetAFPin_0_7>
 800300a:	e006      	b.n	800301a <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	461a      	mov	r2, r3
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff75 	bl	8002f04 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	69b9      	ldr	r1, [r7, #24]
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fe9a 	bl	8002d5c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1a6      	bne.n	8002f8a <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <LL_RCC_HSI_IsReady>:
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <LL_RCC_HSI_IsReady+0x20>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b02      	cmp	r3, #2
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40021000 	.word	0x40021000

0800306c <LL_RCC_LSE_IsReady>:
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <LL_RCC_LSE_IsReady+0x20>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b02      	cmp	r3, #2
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000

08003090 <LL_RCC_GetSysClkSource>:
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <LL_RCC_GetSysClkSource+0x18>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 030c 	and.w	r3, r3, #12
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000

080030ac <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80030b0:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <LL_RCC_GetAHBPrescaler+0x18>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000

080030c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40021000 	.word	0x40021000

080030e4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <LL_RCC_GetAPB2Prescaler+0x18>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000

08003100 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <LL_RCC_GetUSARTClockSource+0x28>)
 800310a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800310c:	2103      	movs	r1, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	fa01 f303 	lsl.w	r3, r1, r3
 8003114:	401a      	ands	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	4313      	orrs	r3, r2
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000

0800312c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <LL_RCC_PLL_GetMainSource+0x18>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000

08003148 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003154:	4618      	mov	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40021000 	.word	0x40021000

08003164 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <LL_RCC_PLL_GetPrediv+0x18>)
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	f003 030f 	and.w	r3, r3, #15
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000

08003180 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003188:	f000 f860 	bl	800324c <RCC_GetSystemClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f87a 	bl	8003290 <RCC_GetHCLKClockFreq>
 800319c:	4602      	mov	r2, r0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f888 	bl	80032bc <RCC_GetPCLK1ClockFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f894 	bl	80032e4 <RCC_GetPCLK2ClockFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	60da      	str	r2, [r3, #12]
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d12a      	bne.n	8003234 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff8e 	bl	8003100 <LL_RCC_GetUSARTClockSource>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d00f      	beq.n	800320a <LL_RCC_GetUSARTClockFreq+0x3e>
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d005      	beq.n	80031fa <LL_RCC_GetUSARTClockFreq+0x2e>
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d114      	bne.n	800321c <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80031f2:	f000 f82b 	bl	800324c <RCC_GetSystemClockFreq>
 80031f6:	60f8      	str	r0, [r7, #12]
        break;
 80031f8:	e021      	b.n	800323e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80031fa:	f7ff ff25 	bl	8003048 <LL_RCC_HSI_IsReady>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d019      	beq.n	8003238 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8003206:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003208:	e016      	b.n	8003238 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800320a:	f7ff ff2f 	bl	800306c <LL_RCC_LSE_IsReady>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8003214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003218:	60fb      	str	r3, [r7, #12]
        }
        break;
 800321a:	e00f      	b.n	800323c <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800321c:	f000 f816 	bl	800324c <RCC_GetSystemClockFreq>
 8003220:	4603      	mov	r3, r0
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f834 	bl	8003290 <RCC_GetHCLKClockFreq>
 8003228:	4603      	mov	r3, r0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f846 	bl	80032bc <RCC_GetPCLK1ClockFreq>
 8003230:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003232:	e004      	b.n	800323e <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8003234:	bf00      	nop
 8003236:	e002      	b.n	800323e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 800323c:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	007a1200 	.word	0x007a1200

0800324c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003256:	f7ff ff1b 	bl	8003090 <LL_RCC_GetSysClkSource>
 800325a:	4603      	mov	r3, r0
 800325c:	2b04      	cmp	r3, #4
 800325e:	d006      	beq.n	800326e <RCC_GetSystemClockFreq+0x22>
 8003260:	2b08      	cmp	r3, #8
 8003262:	d007      	beq.n	8003274 <RCC_GetSystemClockFreq+0x28>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d109      	bne.n	800327c <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <RCC_GetSystemClockFreq+0x40>)
 800326a:	607b      	str	r3, [r7, #4]
      break;
 800326c:	e009      	b.n	8003282 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <RCC_GetSystemClockFreq+0x40>)
 8003270:	607b      	str	r3, [r7, #4]
      break;
 8003272:	e006      	b.n	8003282 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003274:	f000 f84a 	bl	800330c <RCC_PLL_GetFreqDomain_SYS>
 8003278:	6078      	str	r0, [r7, #4]
      break;
 800327a:	e002      	b.n	8003282 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <RCC_GetSystemClockFreq+0x40>)
 800327e:	607b      	str	r3, [r7, #4]
      break;
 8003280:	bf00      	nop
  }

  return frequency;
 8003282:	687b      	ldr	r3, [r7, #4]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	007a1200 	.word	0x007a1200

08003290 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003298:	f7ff ff08 	bl	80030ac <LL_RCC_GetAHBPrescaler>
 800329c:	4603      	mov	r3, r0
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <RCC_GetHCLKClockFreq+0x28>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	40d3      	lsrs	r3, r2
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	08003628 	.word	0x08003628

080032bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80032c4:	f7ff ff00 	bl	80030c8 <LL_RCC_GetAPB1Prescaler>
 80032c8:	4603      	mov	r3, r0
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <RCC_GetPCLK1ClockFreq+0x24>)
 80032ce:	5cd3      	ldrb	r3, [r2, r3]
 80032d0:	461a      	mov	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	40d3      	lsrs	r3, r2
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	08003638 	.word	0x08003638

080032e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80032ec:	f7ff fefa 	bl	80030e4 <LL_RCC_GetAPB2Prescaler>
 80032f0:	4603      	mov	r3, r0
 80032f2:	0adb      	lsrs	r3, r3, #11
 80032f4:	4a04      	ldr	r2, [pc, #16]	; (8003308 <RCC_GetPCLK2ClockFreq+0x24>)
 80032f6:	5cd3      	ldrb	r3, [r2, r3]
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	40d3      	lsrs	r3, r2
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	08003638 	.word	0x08003638

0800330c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	2300      	movs	r3, #0
 8003318:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800331a:	f7ff ff07 	bl	800312c <LL_RCC_PLL_GetMainSource>
 800331e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332a:	d003      	beq.n	8003334 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800332c:	e005      	b.n	800333a <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800332e:	4b14      	ldr	r3, [pc, #80]	; (8003380 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003330:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003332:	e005      	b.n	8003340 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003336:	60fb      	str	r3, [r7, #12]
      break;
 8003338:	e002      	b.n	8003340 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800333c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800333e:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003340:	f7ff ff10 	bl	8003164 <LL_RCC_PLL_GetPrediv>
 8003344:	4603      	mov	r3, r0
 8003346:	3301      	adds	r3, #1
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	fbb2 f4f3 	udiv	r4, r2, r3
 800334e:	f7ff fefb 	bl	8003148 <LL_RCC_PLL_GetMultiplicator>
 8003352:	4603      	mov	r3, r0
 8003354:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003358:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800335c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	fa92 f2a2 	rbit	r2, r2
 8003364:	603a      	str	r2, [r7, #0]
  return result;
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	fab2 f282 	clz	r2, r2
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	40d3      	lsrs	r3, r2
 8003370:	3302      	adds	r3, #2
 8003372:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	003d0900 	.word	0x003d0900
 8003384:	007a1200 	.word	0x007a1200

08003388 <LL_USART_IsEnabled>:
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <LL_USART_IsEnabled+0x18>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <LL_USART_IsEnabled+0x1a>
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <LL_USART_SetStopBitsLength>:
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	605a      	str	r2, [r3, #4]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_USART_SetHWFlowCtrl>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	609a      	str	r2, [r3, #8]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_USART_SetBaudRate>:
{
 80033fa:	b490      	push	{r4, r7}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340e:	d116      	bne.n	800343e <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	005a      	lsls	r2, r3, #1
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	441a      	add	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	b29b      	uxth	r3, r3
 8003422:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800342a:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	b29b      	uxth	r3, r3
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	60dc      	str	r4, [r3, #12]
}
 800343c:	e00a      	b.n	8003454 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	085a      	lsrs	r2, r3, #1
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	441a      	add	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	b29b      	uxth	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	60da      	str	r2, [r3, #12]
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bc90      	pop	{r4, r7}
 800345c:	4770      	bx	lr
	...

08003460 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ff88 	bl	8003388 <LL_USART_IsEnabled>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d14e      	bne.n	800351c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b29      	ldr	r3, [pc, #164]	; (8003528 <LL_USART_Init+0xc8>)
 8003484:	4013      	ands	r3, r2
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	6851      	ldr	r1, [r2, #4]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	68d2      	ldr	r2, [r2, #12]
 800348e:	4311      	orrs	r1, r2
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	6912      	ldr	r2, [r2, #16]
 8003494:	4311      	orrs	r1, r2
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	6992      	ldr	r2, [r2, #24]
 800349a:	430a      	orrs	r2, r1
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff80 	bl	80033ae <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff ff8d 	bl	80033d4 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <LL_USART_Init+0xcc>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d104      	bne.n	80034cc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7ff fe82 	bl	80031cc <LL_RCC_GetUSARTClockFreq>
 80034c8:	61b8      	str	r0, [r7, #24]
 80034ca:	e016      	b.n	80034fa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a18      	ldr	r2, [pc, #96]	; (8003530 <LL_USART_Init+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d107      	bne.n	80034e4 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fe51 	bl	8003180 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e00a      	b.n	80034fa <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a13      	ldr	r2, [pc, #76]	; (8003534 <LL_USART_Init+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d106      	bne.n	80034fa <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80034ec:	f107 0308 	add.w	r3, r7, #8
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fe45 	bl	8003180 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003508:	2300      	movs	r3, #0
 800350a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff6f 	bl	80033fa <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800351c:	7ffb      	ldrb	r3, [r7, #31]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40013800 	.word	0x40013800
 8003530:	40004400 	.word	0x40004400
 8003534:	40004800 	.word	0x40004800

08003538 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <LL_mDelay+0x44>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003546:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d00c      	beq.n	800356a <LL_mDelay+0x32>
  {
    Delay++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3301      	adds	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003556:	e008      	b.n	800356a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <LL_mDelay+0x44>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <LL_mDelay+0x32>
    {
      Delay--;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	607b      	str	r3, [r7, #4]
  while (Delay)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f3      	bne.n	8003558 <LL_mDelay+0x20>
    }
  }
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e010 	.word	0xe000e010

08003580 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003588:	4a04      	ldr	r2, [pc, #16]	; (800359c <LL_SetSystemCoreClock+0x1c>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000004 	.word	0x20000004

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4e0d      	ldr	r6, [pc, #52]	; (80035d8 <__libc_init_array+0x38>)
 80035a4:	4c0d      	ldr	r4, [pc, #52]	; (80035dc <__libc_init_array+0x3c>)
 80035a6:	1ba4      	subs	r4, r4, r6
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	2500      	movs	r5, #0
 80035ac:	42a5      	cmp	r5, r4
 80035ae:	d109      	bne.n	80035c4 <__libc_init_array+0x24>
 80035b0:	4e0b      	ldr	r6, [pc, #44]	; (80035e0 <__libc_init_array+0x40>)
 80035b2:	4c0c      	ldr	r4, [pc, #48]	; (80035e4 <__libc_init_array+0x44>)
 80035b4:	f000 f820 	bl	80035f8 <_init>
 80035b8:	1ba4      	subs	r4, r4, r6
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	2500      	movs	r5, #0
 80035be:	42a5      	cmp	r5, r4
 80035c0:	d105      	bne.n	80035ce <__libc_init_array+0x2e>
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035c8:	4798      	blx	r3
 80035ca:	3501      	adds	r5, #1
 80035cc:	e7ee      	b.n	80035ac <__libc_init_array+0xc>
 80035ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80035d2:	4798      	blx	r3
 80035d4:	3501      	adds	r5, #1
 80035d6:	e7f2      	b.n	80035be <__libc_init_array+0x1e>
 80035d8:	08003648 	.word	0x08003648
 80035dc:	08003648 	.word	0x08003648
 80035e0:	08003648 	.word	0x08003648
 80035e4:	0800364c 	.word	0x0800364c

080035e8 <memset>:
 80035e8:	4402      	add	r2, r0
 80035ea:	4603      	mov	r3, r0
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d100      	bne.n	80035f2 <memset+0xa>
 80035f0:	4770      	bx	lr
 80035f2:	f803 1b01 	strb.w	r1, [r3], #1
 80035f6:	e7f9      	b.n	80035ec <memset+0x4>

080035f8 <_init>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr

08003604 <_fini>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr
