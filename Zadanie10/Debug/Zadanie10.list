
Zadanie10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000368c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800395c  0800395c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800395c  0800395c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800395c  0800395c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200001e4  08003b48  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003b48  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c54f  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002216  00000000  00000000  0002c763  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  0002f750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019ca4  00000000  00000000  00030408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b10a  00000000  00000000  0004a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc14  00000000  00000000  000551b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  000e4e48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037fc 	.word	0x080037fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080037fc 	.word	0x080037fc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	db0b      	blt.n	8000206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	f003 021f 	and.w	r2, r3, #31
 80001f4:	4907      	ldr	r1, [pc, #28]	; (8000214 <__NVIC_EnableIRQ+0x38>)
 80001f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fa:	095b      	lsrs	r3, r3, #5
 80001fc:	2001      	movs	r0, #1
 80001fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e100 	.word	0xe000e100

08000218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	6039      	str	r1, [r7, #0]
 8000222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000228:	2b00      	cmp	r3, #0
 800022a:	db0a      	blt.n	8000242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	b2da      	uxtb	r2, r3
 8000230:	490c      	ldr	r1, [pc, #48]	; (8000264 <__NVIC_SetPriority+0x4c>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	0112      	lsls	r2, r2, #4
 8000238:	b2d2      	uxtb	r2, r2
 800023a:	440b      	add	r3, r1
 800023c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000240:	e00a      	b.n	8000258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4908      	ldr	r1, [pc, #32]	; (8000268 <__NVIC_SetPriority+0x50>)
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 030f 	and.w	r3, r3, #15
 800024e:	3b04      	subs	r3, #4
 8000250:	0112      	lsls	r2, r2, #4
 8000252:	b2d2      	uxtb	r2, r2
 8000254:	440b      	add	r3, r1
 8000256:	761a      	strb	r2, [r3, #24]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000e100 	.word	0xe000e100
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	4907      	ldr	r1, [pc, #28]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4313      	orrs	r3, r2
 800027e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000282:	695a      	ldr	r2, [r3, #20]
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4013      	ands	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800028a:	68fb      	ldr	r3, [r7, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000

0800029c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80002a0:	2001      	movs	r0, #1
 80002a2:	f7ff ffe3 	bl	800026c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80002a6:	2100      	movs	r1, #0
 80002a8:	2010      	movs	r0, #16
 80002aa:	f7ff ffb5 	bl	8000218 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002ae:	2010      	movs	r0, #16
 80002b0:	f7ff ff94 	bl	80001dc <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 80002b4:	2100      	movs	r1, #0
 80002b6:	2011      	movs	r0, #17
 80002b8:	f7ff ffae 	bl	8000218 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002bc:	2011      	movs	r0, #17
 80002be:	f7ff ff8d 	bl	80001dc <__NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <LL_AHB1_GRP1_EnableClock>:
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d2:	695a      	ldr	r2, [r3, #20]
 80002d4:	4907      	ldr	r1, [pc, #28]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4313      	orrs	r3, r2
 80002da:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4013      	ands	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002e6:	68fb      	ldr	r3, [r7, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40021000 	.word	0x40021000

080002f8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80002fc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000300:	f7ff ffe2 	bl	80002c8 <LL_AHB1_GRP1_EnableClock>

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <LL_RCC_HSI_Enable+0x1c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <LL_RCC_HSI_Enable+0x1c>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <LL_RCC_HSI_IsReady+0x20>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b02      	cmp	r3, #2
 8000336:	bf0c      	ite	eq
 8000338:	2301      	moveq	r3, #1
 800033a:	2300      	movne	r3, #0
 800033c:	b2db      	uxtb	r3, r3
}
 800033e:	4618      	mov	r0, r3
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	00db      	lsls	r3, r3, #3
 8000360:	4904      	ldr	r1, [pc, #16]	; (8000374 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000362:	4313      	orrs	r3, r2
 8000364:	600b      	str	r3, [r1, #0]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <LL_RCC_SetSysClkSource+0x24>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	f023 0203 	bic.w	r2, r3, #3
 8000388:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_RCC_SetSysClkSource+0x24>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4313      	orrs	r3, r2
 800038e:	604b      	str	r3, [r1, #4]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <LL_RCC_GetSysClkSource+0x18>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	f003 030c 	and.w	r3, r3, #12
}
 80003ac:	4618      	mov	r0, r3
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003cc:	4904      	ldr	r1, [pc, #16]	; (80003e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	604b      	str	r3, [r1, #4]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80003f4:	4904      	ldr	r1, [pc, #16]	; (8000408 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	604b      	str	r3, [r1, #4]
}
 80003fc:	bf00      	nop
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800041c:	4904      	ldr	r1, [pc, #16]	; (8000430 <LL_RCC_SetAPB2Prescaler+0x24>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4313      	orrs	r3, r2
 8000422:	604b      	str	r3, [r1, #4]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40021000 	.word	0x40021000

08000434 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_FLASH_SetLatency+0x24>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f023 0207 	bic.w	r2, r3, #7
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_FLASH_SetLatency+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	600b      	str	r3, [r1, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40022000 	.word	0x40022000

0800045c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000460:	4b04      	ldr	r3, [pc, #16]	; (8000474 <LL_FLASH_GetLatency+0x18>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0307 	and.w	r3, r3, #7
}
 8000468:	4618      	mov	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40022000 	.word	0x40022000

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f001 f8aa 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f830 	bl	80004e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000484:	f7ff ff38 	bl	80002f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000488:	f7ff ff08 	bl	800029c <MX_DMA_Init>
  MX_TIM2_Init();
 800048c:	f000 fac0 	bl	8000a10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000490:	f000 fb34 	bl	8000afc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000494:	f000 ff0c 	bl	80012b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 8000498:	4807      	ldr	r0, [pc, #28]	; (80004b8 <main+0x40>)
 800049a:	f000 fef7 	bl	800128c <USART2_RegisterCallback>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800049e:	2100      	movs	r1, #0
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <main+0x44>)
 80004a2:	f001 fc35 	bl	8001d10 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <main+0x48>)
 80004a8:	f001 fb9e 	bl	8001be8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */
	#if POLLING
  	//Polling for new data, no interrupts
  		USART2_CheckDmaReception();
 80004ac:	f000 ffd8 	bl	8001460 <USART2_CheckDmaReception>
  		LL_mDelay(10);
 80004b0:	200a      	movs	r0, #10
 80004b2:	f003 f879 	bl	80035a8 <LL_mDelay>
  		USART2_CheckDmaReception();
 80004b6:	e7f9      	b.n	80004ac <main+0x34>
 80004b8:	08000555 	.word	0x08000555
 80004bc:	20000284 	.word	0x20000284
 80004c0:	20000244 	.word	0x20000244

080004c4 <setDutyCycle>:
  /* USER CODE END 3 */
}


void setDutyCycle(uint8_t D)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	TIM2->CCR1 = D;
 80004ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff ffa3 	bl	8000434 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80004ee:	f7ff ffb5 	bl	800045c <LL_FLASH_GetLatency>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80004f8:	f000 f8d6 	bl	80006a8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 80004fc:	f7ff ff04 	bl	8000308 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000500:	bf00      	nop
 8000502:	f7ff ff11 	bl	8000328 <LL_RCC_HSI_IsReady>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1fa      	bne.n	8000502 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800050c:	2010      	movs	r0, #16
 800050e:	f7ff ff1d 	bl	800034c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000512:	2000      	movs	r0, #0
 8000514:	f7ff ff52 	bl	80003bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff ff63 	bl	80003e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff ff74 	bl	800040c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000524:	2000      	movs	r0, #0
 8000526:	f7ff ff27 	bl	8000378 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800052a:	bf00      	nop
 800052c:	f7ff ff38 	bl	80003a0 <LL_RCC_GetSysClkSource>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1fa      	bne.n	800052c <SystemClock_Config+0x48>
  {
  
  }
  LL_SetSystemCoreClock(8000000);
 8000536:	4806      	ldr	r0, [pc, #24]	; (8000550 <SystemClock_Config+0x6c>)
 8000538:	f003 f85a 	bl	80035f0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800053c:	2000      	movs	r0, #0
 800053e:	f001 f85f 	bl	8001600 <HAL_InitTick>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x68>
  {
    Error_Handler();  
 8000548:	f000 f8ae 	bl	80006a8 <Error_Handler>
  };
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	007a1200 	.word	0x007a1200

08000554 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
    /* Process received data */

        // type your algorithm here:

    for(uint8_t i = 0; i < len; i++)
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e040      	b.n	80005e8 <proccesDmaData+0x94>
    {

        if ((*(data+i) == '$') && (start))
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b24      	cmp	r3, #36	; 0x24
 8000570:	d10e      	bne.n	8000590 <proccesDmaData+0x3c>
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <proccesDmaData+0xa8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00a      	beq.n	8000590 <proccesDmaData+0x3c>
        {
            CompareMessage();
 800057a:	f000 f843 	bl	8000604 <CompareMessage>
            memset(message,0,sizeof(message));
 800057e:	2222      	movs	r2, #34	; 0x22
 8000580:	2100      	movs	r1, #0
 8000582:	481f      	ldr	r0, [pc, #124]	; (8000600 <proccesDmaData+0xac>)
 8000584:	f003 f86c 	bl	8003660 <memset>
            start = 0;
 8000588:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <proccesDmaData+0xa8>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
            break;
 800058e:	e030      	b.n	80005f2 <proccesDmaData+0x9e>
        }
        else if(*(data+i) == '$')
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b24      	cmp	r3, #36	; 0x24
 800059a:	d103      	bne.n	80005a4 <proccesDmaData+0x50>
        {
            start = 1;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <proccesDmaData+0xa8>)
 800059e:	2201      	movs	r2, #1
 80005a0:	601a      	str	r2, [r3, #0]
            break;
 80005a2:	e026      	b.n	80005f2 <proccesDmaData+0x9e>
        }

        if((start >= 1) && (start <= 34))
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <proccesDmaData+0xa8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	dd12      	ble.n	80005d2 <proccesDmaData+0x7e>
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <proccesDmaData+0xa8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b22      	cmp	r3, #34	; 0x22
 80005b2:	dc0e      	bgt.n	80005d2 <proccesDmaData+0x7e>
        {
            message[start-1]= *(data+i);
 80005b4:	7bfb      	ldrb	r3, [r7, #15]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	441a      	add	r2, r3
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <proccesDmaData+0xa8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	7811      	ldrb	r1, [r2, #0]
 80005c2:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <proccesDmaData+0xac>)
 80005c4:	54d1      	strb	r1, [r2, r3]
            start++;
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <proccesDmaData+0xa8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <proccesDmaData+0xa8>)
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	e007      	b.n	80005e2 <proccesDmaData+0x8e>
        }
        else
        {
        	start = 0;
 80005d2:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <proccesDmaData+0xa8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
        	memset(message,0,sizeof(message));
 80005d8:	2222      	movs	r2, #34	; 0x22
 80005da:	2100      	movs	r1, #0
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <proccesDmaData+0xac>)
 80005de:	f003 f83f 	bl	8003660 <memset>
    for(uint8_t i = 0; i < len; i++)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	3301      	adds	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	887a      	ldrh	r2, [r7, #2]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d8b9      	bhi.n	8000566 <proccesDmaData+0x12>
        }

    }
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000200 	.word	0x20000200
 8000600:	20000204 	.word	0x20000204

08000604 <CompareMessage>:

void CompareMessage()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

	if(strcmp(message, "auto") == 0)
 8000608:	491f      	ldr	r1, [pc, #124]	; (8000688 <CompareMessage+0x84>)
 800060a:	4820      	ldr	r0, [pc, #128]	; (800068c <CompareMessage+0x88>)
 800060c:	f7ff fddc 	bl	80001c8 <strcmp>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d108      	bne.n	8000628 <CompareMessage+0x24>
    {
    	autoON = 1;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <CompareMessage+0x8c>)
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
    	PWM = 100;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <CompareMessage+0x90>)
 800061e:	2264      	movs	r2, #100	; 0x64
 8000620:	601a      	str	r2, [r3, #0]
    	enteredmode = 1;
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <CompareMessage+0x94>)
 8000624:	2201      	movs	r2, #1
 8000626:	601a      	str	r2, [r3, #0]
    }
	if(strcmp(message, "manual") == 0)
 8000628:	491c      	ldr	r1, [pc, #112]	; (800069c <CompareMessage+0x98>)
 800062a:	4818      	ldr	r0, [pc, #96]	; (800068c <CompareMessage+0x88>)
 800062c:	f7ff fdcc 	bl	80001c8 <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d105      	bne.n	8000642 <CompareMessage+0x3e>
    {
    	autoON = 0;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <CompareMessage+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
    	enteredmode = 1;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <CompareMessage+0x94>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
    }

    if((autoON == 0) && (enteredmode == 1))
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <CompareMessage+0x8c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11c      	bne.n	8000684 <CompareMessage+0x80>
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <CompareMessage+0x94>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d118      	bne.n	8000684 <CompareMessage+0x80>
    {
    	if(strncmp(message, "PWM",3) == 0)
 8000652:	2203      	movs	r2, #3
 8000654:	4912      	ldr	r1, [pc, #72]	; (80006a0 <CompareMessage+0x9c>)
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <CompareMessage+0x88>)
 8000658:	f003 f80a 	bl	8003670 <strncmp>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d110      	bne.n	8000684 <CompareMessage+0x80>
    	{
    		PWM = atoi(message+3);
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <CompareMessage+0xa0>)
 8000664:	4618      	mov	r0, r3
 8000666:	f002 ffd3 	bl	8003610 <atoi>
 800066a:	4602      	mov	r2, r0
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <CompareMessage+0x90>)
 800066e:	601a      	str	r2, [r3, #0]
      		if (PWM > 99)
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <CompareMessage+0x90>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b63      	cmp	r3, #99	; 0x63
 8000676:	dd02      	ble.n	800067e <CompareMessage+0x7a>
    		{
    			PWM = 100;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <CompareMessage+0x90>)
 800067a:	2264      	movs	r2, #100	; 0x64
 800067c:	601a      	str	r2, [r3, #0]
    		}
      		enteredmode = 0;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <CompareMessage+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
    	}

    }

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08003814 	.word	0x08003814
 800068c:	20000204 	.word	0x20000204
 8000690:	20000000 	.word	0x20000000
 8000694:	20000004 	.word	0x20000004
 8000698:	20000228 	.word	0x20000228
 800069c:	0800381c 	.word	0x0800381c
 80006a0:	08003824 	.word	0x08003824
 80006a4:	20000207 	.word	0x20000207

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <HAL_MspInit+0x44>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6193      	str	r3, [r2, #24]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <HAL_MspInit+0x44>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_MspInit+0x44>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e0:	61d3      	str	r3, [r2, #28]
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_MspInit+0x44>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3b01      	subs	r3, #1
 800070e:	4a0b      	ldr	r2, [pc, #44]	; (800073c <LL_DMA_DisableChannel+0x3c>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	3a01      	subs	r2, #1
 800071e:	4907      	ldr	r1, [pc, #28]	; (800073c <LL_DMA_DisableChannel+0x3c>)
 8000720:	5c8a      	ldrb	r2, [r1, r2]
 8000722:	4611      	mov	r1, r2
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	440a      	add	r2, r1
 8000728:	f023 0301 	bic.w	r3, r3, #1
 800072c:	6013      	str	r3, [r2, #0]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	08003828 	.word	0x08003828

08000740 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000754:	bf0c      	ite	eq
 8000756:	2301      	moveq	r3, #1
 8000758:	2300      	movne	r3, #0
 800075a:	b2db      	uxtb	r3, r3
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800077c:	bf0c      	ite	eq
 800077e:	2301      	moveq	r3, #1
 8000780:	2300      	movne	r3, #0
 8000782:	b2db      	uxtb	r3, r3
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80007a4:	bf0c      	ite	eq
 80007a6:	2301      	moveq	r3, #1
 80007a8:	2300      	movne	r3, #0
 80007aa:	b2db      	uxtb	r3, r3
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007c6:	605a      	str	r2, [r3, #4]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007e2:	605a      	str	r2, [r3, #4]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007fe:	605a      	str	r2, [r3, #4]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	69db      	ldr	r3, [r3, #28]
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	2b10      	cmp	r3, #16
 800081e:	d101      	bne.n	8000824 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000820:	2301      	movs	r3, #1
 8000822:	e000      	b.n	8000826 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000842:	2b40      	cmp	r3, #64	; 0x40
 8000844:	d101      	bne.n	800084a <LL_USART_IsActiveFlag_TC+0x18>
 8000846:	2301      	movs	r3, #1
 8000848:	e000      	b.n	800084c <LL_USART_IsActiveFlag_TC+0x1a>
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2210      	movs	r2, #16
 8000864:	621a      	str	r2, [r3, #32]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <HardFault_Handler+0x4>

08000886 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <BusFault_Handler+0x4>

08000892 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 fecb 	bl	8001660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <DMA1_Channel6_IRQHandler+0x38>)
 80008d6:	f7ff ff33 	bl	8000740 <LL_DMA_IsActiveFlag_TC6>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d105      	bne.n	80008ec <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80008e0:	f000 fdbe 	bl	8001460 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80008e4:	4808      	ldr	r0, [pc, #32]	; (8000908 <DMA1_Channel6_IRQHandler+0x38>)
 80008e6:	f7ff ff67 	bl	80007b8 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80008ea:	e00a      	b.n	8000902 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <DMA1_Channel6_IRQHandler+0x38>)
 80008ee:	f7ff ff4f 	bl	8000790 <LL_DMA_IsActiveFlag_HT6>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d104      	bne.n	8000902 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80008f8:	f000 fdb2 	bl	8001460 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <DMA1_Channel6_IRQHandler+0x38>)
 80008fe:	f7ff ff77 	bl	80007f0 <LL_DMA_ClearFlag_HT6>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000

0800090c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000910:	480a      	ldr	r0, [pc, #40]	; (800093c <DMA1_Channel7_IRQHandler+0x30>)
 8000912:	f7ff ff29 	bl	8000768 <LL_DMA_IsActiveFlag_TC7>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10d      	bne.n	8000938 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <DMA1_Channel7_IRQHandler+0x30>)
 800091e:	f7ff ff59 	bl	80007d4 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000922:	bf00      	nop
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <DMA1_Channel7_IRQHandler+0x34>)
 8000926:	f7ff ff84 	bl	8000832 <LL_USART_IsActiveFlag_TC>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f9      	beq.n	8000924 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8000930:	2107      	movs	r1, #7
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <DMA1_Channel7_IRQHandler+0x30>)
 8000934:	f7ff fee4 	bl	8000700 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020000 	.word	0x40020000
 8000940:	40004400 	.word	0x40004400

08000944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (ledON == 0)
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <TIM3_IRQHandler+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d114      	bne.n	800097a <TIM3_IRQHandler+0x36>
	{
		dutycycle++;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <TIM3_IRQHandler+0x70>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <TIM3_IRQHandler+0x70>)
 800095a:	701a      	strb	r2, [r3, #0]
		setDutyCycle(dutycycle);
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <TIM3_IRQHandler+0x70>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fdaf 	bl	80004c4 <setDutyCycle>
		if (dutycycle == PWM)
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <TIM3_IRQHandler+0x70>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <TIM3_IRQHandler+0x74>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	429a      	cmp	r2, r3
 8000972:	d102      	bne.n	800097a <TIM3_IRQHandler+0x36>
		{
			ledON = 1;
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <TIM3_IRQHandler+0x6c>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
		}
	}
	if (ledON == 1)
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <TIM3_IRQHandler+0x6c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d111      	bne.n	80009a6 <TIM3_IRQHandler+0x62>
	{
		dutycycle--;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <TIM3_IRQHandler+0x70>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	3b01      	subs	r3, #1
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <TIM3_IRQHandler+0x70>)
 800098c:	701a      	strb	r2, [r3, #0]
		setDutyCycle(dutycycle);
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <TIM3_IRQHandler+0x70>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fd96 	bl	80004c4 <setDutyCycle>
		if (dutycycle == 0)
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <TIM3_IRQHandler+0x70>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <TIM3_IRQHandler+0x62>
		{
			ledON = 0;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <TIM3_IRQHandler+0x6c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <TIM3_IRQHandler+0x78>)
 80009a8:	f001 fa04 	bl	8001db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000022c 	.word	0x2000022c
 80009b4:	20000230 	.word	0x20000230
 80009b8:	20000004 	.word	0x20000004
 80009bc:	20000244 	.word	0x20000244

080009c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <USART2_IRQHandler+0x20>)
 80009c6:	f7ff ff21 	bl	800080c <LL_USART_IsActiveFlag_IDLE>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d004      	beq.n	80009da <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80009d0:	f000 fd46 	bl	8001460 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <USART2_IRQHandler+0x20>)
 80009d6:	f7ff ff3f 	bl	8000858 <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40004400 	.word	0x40004400

080009e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <SystemInit+0x28>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <SystemInit+0x28>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SystemInit+0x28>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
 8000a3e:	615a      	str	r2, [r3, #20]
 8000a40:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000a42:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a4c:	f240 321f 	movw	r2, #799	; 0x31f
 8000a50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a5a:	2263      	movs	r2, #99	; 0x63
 8000a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a6c:	f001 f890 	bl	8001b90 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a76:	f7ff fe17 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a84:	4619      	mov	r1, r3
 8000a86:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a88:	f001 fc4a 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a92:	f7ff fe09 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a96:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a98:	f001 f905 	bl	8001ca6 <HAL_TIM_PWM_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000aa2:	f7ff fe01 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000ab6:	f002 f8fd 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ac0:	f7ff fdf2 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac4:	2360      	movs	r3, #96	; 0x60
 8000ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000adc:	f001 fb08 	bl	80020f0 <HAL_TIM_PWM_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ae6:	f7ff fddf 	bl	80006a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000aec:	f000 f8b2 	bl	8000c54 <HAL_TIM_MspPostInit>

}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	; 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000284 	.word	0x20000284

08000afc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]
 8000b2a:	615a      	str	r2, [r3, #20]
 8000b2c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b30:	4a2b      	ldr	r2, [pc, #172]	; (8000be0 <MX_TIM3_Init+0xe4>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b44:	2209      	movs	r2, #9
 8000b46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b56:	f001 f81b 	bl	8001b90 <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b60:	f7ff fda2 	bl	80006a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b72:	f001 fbd5 	bl	8002320 <HAL_TIM_ConfigClockSource>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b7c:	f7ff fd94 	bl	80006a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000b80:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000b82:	f001 f85b 	bl	8001c3c <HAL_TIM_OC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b8c:	f7ff fd8c 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000ba0:	f002 f888 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000baa:	f7ff fd7d 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <MX_TIM3_Init+0xe0>)
 8000bc6:	f001 fa15 	bl	8001ff4 <HAL_TIM_OC_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bd0:	f7ff fd6a 	bl	80006a8 <Error_Handler>
  }

}
 8000bd4:	bf00      	nop
 8000bd6:	3738      	adds	r7, #56	; 0x38
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000244 	.word	0x20000244
 8000be0:	40000400 	.word	0x40000400

08000be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_TIM_Base_MspInit+0x68>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <HAL_TIM_Base_MspInit+0x68>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_TIM_Base_MspInit+0x68>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c0e:	e018      	b.n	8000c42 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_TIM_Base_MspInit+0x6c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d113      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_TIM_Base_MspInit+0x68>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_TIM_Base_MspInit+0x68>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_TIM_Base_MspInit+0x68>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	201d      	movs	r0, #29
 8000c38:	f000 fe01 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c3c:	201d      	movs	r0, #29
 8000c3e:	f000 fe1a 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40000400 	.word	0x40000400

08000c54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c74:	d11c      	bne.n	8000cb0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_TIM_MspPostInit+0x64>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <HAL_TIM_MspPostInit+0x64>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_TIM_MspPostInit+0x64>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f000 fdfe 	bl	80018ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <__NVIC_EnableIRQ>:
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <LL_DMA_EnableChannel>:
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LL_DMA_EnableChannel+0x3c>)
 8000d5c:	5cd3      	ldrb	r3, [r2, r3]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	3a01      	subs	r2, #1
 8000d6a:	4907      	ldr	r1, [pc, #28]	; (8000d88 <LL_DMA_EnableChannel+0x3c>)
 8000d6c:	5c8a      	ldrb	r2, [r1, r2]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	440a      	add	r2, r1
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6013      	str	r3, [r2, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	08003848 	.word	0x08003848

08000d8c <LL_DMA_DisableChannel>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LL_DMA_DisableChannel+0x3c>)
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	3a01      	subs	r2, #1
 8000daa:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <LL_DMA_DisableChannel+0x3c>)
 8000dac:	5c8a      	ldrb	r2, [r1, r2]
 8000dae:	4611      	mov	r1, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	440a      	add	r2, r1
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6013      	str	r3, [r2, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	08003848 	.word	0x08003848

08000dcc <LL_DMA_SetDataTransferDirection>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LL_DMA_SetDataTransferDirection+0x48>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	461a      	mov	r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4413      	add	r3, r2
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dec:	f023 0310 	bic.w	r3, r3, #16
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	3a01      	subs	r2, #1
 8000df4:	4907      	ldr	r1, [pc, #28]	; (8000e14 <LL_DMA_SetDataTransferDirection+0x48>)
 8000df6:	5c8a      	ldrb	r2, [r1, r2]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	440a      	add	r2, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	600b      	str	r3, [r1, #0]
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	08003848 	.word	0x08003848

08000e18 <LL_DMA_GetDataTransferDirection>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f244 0310 	movw	r3, #16400	; 0x4010
 8000e36:	4013      	ands	r3, r2
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	08003848 	.word	0x08003848

08000e48 <LL_DMA_SetMode>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <LL_DMA_SetMode+0x44>)
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f023 0220 	bic.w	r2, r3, #32
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <LL_DMA_SetMode+0x44>)
 8000e6e:	5ccb      	ldrb	r3, [r1, r3]
 8000e70:	4619      	mov	r1, r3
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	440b      	add	r3, r1
 8000e76:	4619      	mov	r1, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	600b      	str	r3, [r1, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	08003848 	.word	0x08003848

08000e90 <LL_DMA_SetPeriphIncMode>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000ea2:	5cd3      	ldrb	r3, [r2, r3]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000eb6:	5ccb      	ldrb	r3, [r1, r3]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	440b      	add	r3, r1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	08003848 	.word	0x08003848

08000ed8 <LL_DMA_SetMemoryIncMode>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	; (8000f1c <LL_DMA_SetMemoryIncMode+0x44>)
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	461a      	mov	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <LL_DMA_SetMemoryIncMode+0x44>)
 8000efe:	5ccb      	ldrb	r3, [r1, r3]
 8000f00:	4619      	mov	r1, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	440b      	add	r3, r1
 8000f06:	4619      	mov	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	08003848 	.word	0x08003848

08000f20 <LL_DMA_SetPeriphSize>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <LL_DMA_SetPeriphSize+0x44>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	461a      	mov	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <LL_DMA_SetPeriphSize+0x44>)
 8000f46:	5ccb      	ldrb	r3, [r1, r3]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	4619      	mov	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	600b      	str	r3, [r1, #0]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	08003848 	.word	0x08003848

08000f68 <LL_DMA_SetMemorySize>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <LL_DMA_SetMemorySize+0x44>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <LL_DMA_SetMemorySize+0x44>)
 8000f8e:	5ccb      	ldrb	r3, [r1, r3]
 8000f90:	4619      	mov	r1, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	440b      	add	r3, r1
 8000f96:	4619      	mov	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	08003848 	.word	0x08003848

08000fb0 <LL_DMA_SetChannelPriorityLevel>:
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	4a0c      	ldr	r2, [pc, #48]	; (8000ff4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fc2:	5cd3      	ldrb	r3, [r2, r3]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4413      	add	r3, r2
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000fd6:	5ccb      	ldrb	r3, [r1, r3]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	440b      	add	r3, r1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	08003848 	.word	0x08003848

08000ff8 <LL_DMA_SetDataLength>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <LL_DMA_SetDataLength+0x44>)
 800100a:	5cd3      	ldrb	r3, [r2, r3]
 800100c:	461a      	mov	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	0c1b      	lsrs	r3, r3, #16
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	3a01      	subs	r2, #1
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <LL_DMA_SetDataLength+0x44>)
 800101e:	5c8a      	ldrb	r2, [r1, r2]
 8001020:	4611      	mov	r1, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	440a      	add	r2, r1
 8001026:	4611      	mov	r1, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4313      	orrs	r3, r2
 800102c:	604b      	str	r3, [r1, #4]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	08003848 	.word	0x08003848

08001040 <LL_DMA_GetDataLength>:
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	4a06      	ldr	r2, [pc, #24]	; (8001068 <LL_DMA_GetDataLength+0x28>)
 8001050:	5cd3      	ldrb	r3, [r2, r3]
 8001052:	461a      	mov	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	b29b      	uxth	r3, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	08003848 	.word	0x08003848

0800106c <LL_DMA_ConfigAddresses>:
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2b10      	cmp	r3, #16
 800107e:	d114      	bne.n	80010aa <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	3b01      	subs	r3, #1
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <LL_DMA_ConfigAddresses+0x74>)
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	461a      	mov	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	3b01      	subs	r3, #1
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <LL_DMA_ConfigAddresses+0x74>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	461a      	mov	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	461a      	mov	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	6093      	str	r3, [r2, #8]
}
 80010a8:	e013      	b.n	80010d2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <LL_DMA_ConfigAddresses+0x74>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <LL_DMA_ConfigAddresses+0x74>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	60d3      	str	r3, [r2, #12]
}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	08003848 	.word	0x08003848

080010e4 <LL_DMA_SetPeriphAddress>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <LL_DMA_SetPeriphAddress+0x2c>)
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	461a      	mov	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	461a      	mov	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6093      	str	r3, [r2, #8]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	08003848 	.word	0x08003848

08001114 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	3b01      	subs	r3, #1
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LL_DMA_EnableIT_TE+0x3c>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	461a      	mov	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4413      	add	r3, r2
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	3a01      	subs	r2, #1
 8001132:	4907      	ldr	r1, [pc, #28]	; (8001150 <LL_DMA_EnableIT_TE+0x3c>)
 8001134:	5c8a      	ldrb	r2, [r1, r2]
 8001136:	4611      	mov	r1, r2
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	440a      	add	r2, r1
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6013      	str	r3, [r2, #0]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	08003848 	.word	0x08003848

08001154 <LL_AHB1_GRP1_EnableClock>:
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	4907      	ldr	r1, [pc, #28]	; (8001180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4313      	orrs	r3, r2
 8001166:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4013      	ands	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000

08001184 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800118e:	69da      	ldr	r2, [r3, #28]
 8001190:	4907      	ldr	r1, [pc, #28]	; (80011b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4013      	ands	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	40021000 	.word	0x40021000

080011b4 <LL_USART_Enable>:
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f043 0201 	orr.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <LL_USART_ConfigAsyncMode>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	609a      	str	r2, [r3, #8]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8001260:	b490      	push	{r4, r7}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d103      	bne.n	8001278 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3328      	adds	r3, #40	; 0x28
 8001274:	461c      	mov	r4, r3
 8001276:	e002      	b.n	800127e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3324      	adds	r3, #36	; 0x24
 800127c:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 800127e:	4623      	mov	r3, r4
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bc90      	pop	{r4, r7}
 8001288:	4770      	bx	lr
	...

0800128c <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <USART2_RegisterCallback+0x20>)
 800129e:	6013      	str	r3, [r2, #0]
	}
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000234 	.word	0x20000234

080012b0 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b090      	sub	sp, #64	; 0x40
 80012b4:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	615a      	str	r2, [r3, #20]
 80012c8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80012da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012de:	f7ff ff51 	bl	8001184 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012e6:	f7ff ff35 	bl	8001154 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 80012ea:	f248 0304 	movw	r3, #32772	; 0x8004
 80012ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012f0:	2302      	movs	r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001300:	2307      	movs	r3, #7
 8001302:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f001 fe63 	bl	8002fd6 <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001310:	2200      	movs	r2, #0
 8001312:	2106      	movs	r1, #6
 8001314:	484f      	ldr	r0, [pc, #316]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001316:	f7ff fd59 	bl	8000dcc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800131a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131e:	2106      	movs	r1, #6
 8001320:	484c      	ldr	r0, [pc, #304]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001322:	f7ff fe45 	bl	8000fb0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8001326:	2200      	movs	r2, #0
 8001328:	2106      	movs	r1, #6
 800132a:	484a      	ldr	r0, [pc, #296]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 800132c:	f7ff fd8c 	bl	8000e48 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8001330:	2200      	movs	r2, #0
 8001332:	2106      	movs	r1, #6
 8001334:	4847      	ldr	r0, [pc, #284]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001336:	f7ff fdab 	bl	8000e90 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	2106      	movs	r1, #6
 800133e:	4845      	ldr	r0, [pc, #276]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001340:	f7ff fdca 	bl	8000ed8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001344:	2200      	movs	r2, #0
 8001346:	2106      	movs	r1, #6
 8001348:	4842      	ldr	r0, [pc, #264]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 800134a:	f7ff fde9 	bl	8000f20 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800134e:	2200      	movs	r2, #0
 8001350:	2106      	movs	r1, #6
 8001352:	4840      	ldr	r0, [pc, #256]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001354:	f7ff fe08 	bl	8000f68 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 8001358:	2101      	movs	r1, #1
 800135a:	483f      	ldr	r0, [pc, #252]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 800135c:	f7ff ff80 	bl	8001260 <LL_USART_DMA_GetRegAddr>
 8001360:	4605      	mov	r5, r0
 8001362:	4c3e      	ldr	r4, [pc, #248]	; (800145c <MX_USART2_UART_Init+0x1ac>)
 8001364:	2106      	movs	r1, #6
 8001366:	483b      	ldr	r0, [pc, #236]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001368:	f7ff fd56 	bl	8000e18 <LL_DMA_GetDataTransferDirection>
 800136c:	4603      	mov	r3, r0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	4623      	mov	r3, r4
 8001372:	462a      	mov	r2, r5
 8001374:	2106      	movs	r1, #6
 8001376:	4837      	ldr	r0, [pc, #220]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001378:	f7ff fe78 	bl	800106c <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800137c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001380:	2106      	movs	r1, #6
 8001382:	4834      	ldr	r0, [pc, #208]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 8001384:	f7ff fe38 	bl	8000ff8 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001388:	2106      	movs	r1, #6
 800138a:	4832      	ldr	r0, [pc, #200]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 800138c:	f7ff fcde 	bl	8000d4c <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8001390:	4831      	ldr	r0, [pc, #196]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 8001392:	f7ff ff45 	bl	8001220 <LL_USART_EnableDMAReq_RX>
  #endif

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001396:	2210      	movs	r2, #16
 8001398:	2107      	movs	r1, #7
 800139a:	482e      	ldr	r0, [pc, #184]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 800139c:	f7ff fd16 	bl	8000dcc <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80013a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a4:	2107      	movs	r1, #7
 80013a6:	482b      	ldr	r0, [pc, #172]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013a8:	f7ff fe02 	bl	8000fb0 <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2107      	movs	r1, #7
 80013b0:	4828      	ldr	r0, [pc, #160]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013b2:	f7ff fd49 	bl	8000e48 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2107      	movs	r1, #7
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013bc:	f7ff fd68 	bl	8000e90 <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	2107      	movs	r1, #7
 80013c4:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013c6:	f7ff fd87 	bl	8000ed8 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2107      	movs	r1, #7
 80013ce:	4821      	ldr	r0, [pc, #132]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013d0:	f7ff fda6 	bl	8000f20 <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2107      	movs	r1, #7
 80013d8:	481e      	ldr	r0, [pc, #120]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013da:	f7ff fdc5 	bl	8000f68 <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 80013de:	2100      	movs	r1, #0
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 80013e2:	f7ff ff3d 	bl	8001260 <LL_USART_DMA_GetRegAddr>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	2107      	movs	r1, #7
 80013ec:	4819      	ldr	r0, [pc, #100]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013ee:	f7ff fe79 	bl	80010e4 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 80013f4:	f7ff ff24 	bl	8001240 <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 80013f8:	2107      	movs	r1, #7
 80013fa:	4816      	ldr	r0, [pc, #88]	; (8001454 <MX_USART2_UART_Init+0x1a4>)
 80013fc:	f7ff fe8a 	bl	8001114 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8001400:	2100      	movs	r1, #0
 8001402:	2026      	movs	r0, #38	; 0x26
 8001404:	f7ff fc78 	bl	8000cf8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001408:	2026      	movs	r0, #38	; 0x26
 800140a:	f7ff fc57 	bl	8000cbc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800140e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001412:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001420:	230c      	movs	r3, #12
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001424:	2300      	movs	r3, #0
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 8001434:	f002 f84c 	bl	80034d0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 800143a:	f7ff fecb 	bl	80011d4 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 800143e:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 8001440:	f7ff fede 	bl	8001200 <LL_USART_DisableIT_CTS>

  	  //type your code here:
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_Enable(USART2);
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_USART2_UART_Init+0x1a8>)
 8001446:	f7ff feb5 	bl	80011b4 <LL_USART_Enable>
}
 800144a:	bf00      	nop
 800144c:	3738      	adds	r7, #56	; 0x38
 800144e:	46bd      	mov	sp, r7
 8001450:	bdb0      	pop	{r4, r5, r7, pc}
 8001452:	bf00      	nop
 8001454:	40020000 	.word	0x40020000
 8001458:	40004400 	.word	0x40004400
 800145c:	200002c4 	.word	0x200002c4

08001460 <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <USART2_CheckDmaReception+0xfc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d072      	beq.n	8001554 <USART2_CheckDmaReception+0xf4>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800146e:	2106      	movs	r1, #6
 8001470:	483b      	ldr	r0, [pc, #236]	; (8001560 <USART2_CheckDmaReception+0x100>)
 8001472:	f7ff fde5 	bl	8001040 <LL_DMA_GetDataLength>
 8001476:	4603      	mov	r3, r0
 8001478:	b29b      	uxth	r3, r3
 800147a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800147e:	80fb      	strh	r3, [r7, #6]

		occupied_memory=pos;
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <USART2_CheckDmaReception+0x104>)
 8001486:	701a      	strb	r2, [r3, #0]
		load=(float)(occupied_memory)/(float)(DMA_USART2_BUFFER_SIZE)*100.0;
 8001488:	4b36      	ldr	r3, [pc, #216]	; (8001564 <USART2_CheckDmaReception+0x104>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001494:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001568 <USART2_CheckDmaReception+0x108>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800156c <USART2_CheckDmaReception+0x10c>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <USART2_CheckDmaReception+0x110>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]

		if (pos != old_pos)
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <USART2_CheckDmaReception+0x114>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	88fa      	ldrh	r2, [r7, #6]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d050      	beq.n	8001556 <USART2_CheckDmaReception+0xf6>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	2beb      	cmp	r3, #235	; 0xeb
 80014b8:	d811      	bhi.n	80014de <USART2_CheckDmaReception+0x7e>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <USART2_CheckDmaReception+0xfc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <USART2_CheckDmaReception+0x114>)
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4a2c      	ldr	r2, [pc, #176]	; (8001578 <USART2_CheckDmaReception+0x118>)
 80014c6:	1888      	adds	r0, r1, r2
 80014c8:	4a2a      	ldr	r2, [pc, #168]	; (8001574 <USART2_CheckDmaReception+0x114>)
 80014ca:	8812      	ldrh	r2, [r2, #0]
 80014cc:	88f9      	ldrh	r1, [r7, #6]
 80014ce:	1a8a      	subs	r2, r1, r2
 80014d0:	b292      	uxth	r2, r2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4798      	blx	r3
				old_pos = pos;
 80014d6:	4a27      	ldr	r2, [pc, #156]	; (8001574 <USART2_CheckDmaReception+0x114>)
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	8013      	strh	r3, [r2, #0]
 80014dc:	e03b      	b.n	8001556 <USART2_CheckDmaReception+0xf6>
			}
			else
			{

				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 80014de:	4b1f      	ldr	r3, [pc, #124]	; (800155c <USART2_CheckDmaReception+0xfc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <USART2_CheckDmaReception+0x114>)
 80014e4:	8812      	ldrh	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4a23      	ldr	r2, [pc, #140]	; (8001578 <USART2_CheckDmaReception+0x118>)
 80014ea:	1888      	adds	r0, r1, r2
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <USART2_CheckDmaReception+0x114>)
 80014ee:	8812      	ldrh	r2, [r2, #0]
 80014f0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80014f4:	b292      	uxth	r2, r2
 80014f6:	4611      	mov	r1, r2
 80014f8:	4798      	blx	r3
				//clear bufferUSART2dma
				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 80014fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014fe:	2100      	movs	r1, #0
 8001500:	481d      	ldr	r0, [pc, #116]	; (8001578 <USART2_CheckDmaReception+0x118>)
 8001502:	f002 f8ad 	bl	8003660 <memset>
				// as was mentioned in datasheet first needs to be disabled
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8001506:	2106      	movs	r1, #6
 8001508:	4815      	ldr	r0, [pc, #84]	; (8001560 <USART2_CheckDmaReception+0x100>)
 800150a:	f7ff fc3f 	bl	8000d8c <LL_DMA_DisableChannel>
				// them reconfigure
				LL_DMA_ConfigAddresses(     DMA1, LL_DMA_CHANNEL_6,
 800150e:	2101      	movs	r1, #1
 8001510:	481a      	ldr	r0, [pc, #104]	; (800157c <USART2_CheckDmaReception+0x11c>)
 8001512:	f7ff fea5 	bl	8001260 <LL_USART_DMA_GetRegAddr>
 8001516:	4605      	mov	r5, r0
 8001518:	4c17      	ldr	r4, [pc, #92]	; (8001578 <USART2_CheckDmaReception+0x118>)
 800151a:	2106      	movs	r1, #6
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <USART2_CheckDmaReception+0x100>)
 800151e:	f7ff fc7b 	bl	8000e18 <LL_DMA_GetDataTransferDirection>
 8001522:	4603      	mov	r3, r0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	4623      	mov	r3, r4
 8001528:	462a      	mov	r2, r5
 800152a:	2106      	movs	r1, #6
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <USART2_CheckDmaReception+0x100>)
 800152e:	f7ff fd9d 	bl	800106c <LL_DMA_ConfigAddresses>
											LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
											(uint32_t)bufferUSART2dma,
											LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	2106      	movs	r1, #6
 8001538:	4809      	ldr	r0, [pc, #36]	; (8001560 <USART2_CheckDmaReception+0x100>)
 800153a:	f7ff fd5d 	bl	8000ff8 <LL_DMA_SetDataLength>
				//lastly enabled
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800153e:	2106      	movs	r1, #6
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <USART2_CheckDmaReception+0x100>)
 8001542:	f7ff fc03 	bl	8000d4c <LL_DMA_EnableChannel>
				LL_USART_EnableDMAReq_RX(USART2);
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <USART2_CheckDmaReception+0x11c>)
 8001548:	f7ff fe6a 	bl	8001220 <LL_USART_EnableDMAReq_RX>


				old_pos = 0;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <USART2_CheckDmaReception+0x114>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	e000      	b.n	8001556 <USART2_CheckDmaReception+0xf6>
	if(USART2_ProcessData == 0) return;
 8001554:	bf00      	nop

			}
		}
}
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	20000234 	.word	0x20000234
 8001560:	40020000 	.word	0x40020000
 8001564:	2000023c 	.word	0x2000023c
 8001568:	43800000 	.word	0x43800000
 800156c:	42c80000 	.word	0x42c80000
 8001570:	20000240 	.word	0x20000240
 8001574:	20000238 	.word	0x20000238
 8001578:	200002c4 	.word	0x200002c4
 800157c:	40004400 	.word	0x40004400

08001580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001584:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001586:	e003      	b.n	8001590 <LoopCopyDataInit>

08001588 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800158a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800158c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800158e:	3104      	adds	r1, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001590:	480b      	ldr	r0, [pc, #44]	; (80015c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001594:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001596:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001598:	d3f6      	bcc.n	8001588 <CopyDataInit>
	ldr	r2, =_sbss
 800159a:	4a0b      	ldr	r2, [pc, #44]	; (80015c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800159c:	e002      	b.n	80015a4 <LoopFillZerobss>

0800159e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800159e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015a0:	f842 3b04 	str.w	r3, [r2], #4

080015a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <LoopForever+0x16>)
	cmp	r2, r3
 80015a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015a8:	d3f9      	bcc.n	800159e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015aa:	f7ff fa1b 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ae:	f002 f833 	bl	8003618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015b2:	f7fe ff61 	bl	8000478 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015b8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80015bc:	08003964 	.word	0x08003964
	ldr	r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015c4:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 80015c8:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 80015cc:	200003c8 	.word	0x200003c8

080015d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_2_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015d8:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_Init+0x28>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_Init+0x28>)
 80015de:	f043 0310 	orr.w	r3, r3, #16
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f91f 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f808 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f0:	f7ff f862 	bl	80006b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x54>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_InitTick+0x58>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001616:	fbb3 f3f1 	udiv	r3, r3, r1
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f937 	bl	8001892 <HAL_SYSTICK_Config>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e00e      	b.n	800164c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b0f      	cmp	r3, #15
 8001632:	d80a      	bhi.n	800164a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001634:	2200      	movs	r2, #0
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f000 f8ff 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001640:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_InitTick+0x5c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000008 	.word	0x20000008
 8001658:	20000010 	.word	0x20000010
 800165c:	2000000c 	.word	0x2000000c

08001660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x20>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_IncTick+0x24>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <HAL_IncTick+0x24>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000010 	.word	0x20000010
 8001684:	200003c4 	.word	0x200003c4

08001688 <__NVIC_SetPriorityGrouping>:
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e14e      	b.n	8001b5a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8140 	beq.w	8001b54 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d00b      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d007      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e8:	2b11      	cmp	r3, #17
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0xea>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b12      	cmp	r3, #18
 8001994:	d123      	bne.n	80019de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	08da      	lsrs	r2, r3, #3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3208      	adds	r2, #8
 800199e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4013      	ands	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	691a      	ldr	r2, [r3, #16]
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	08da      	lsrs	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	6939      	ldr	r1, [r7, #16]
 80019da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	2203      	movs	r2, #3
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0203 	and.w	r2, r3, #3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 809a 	beq.w	8001b54 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x2cc>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <HAL_GPIO_Init+0x2cc>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6193      	str	r3, [r2, #24]
 8001a2c:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x2cc>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	089b      	lsrs	r3, r3, #2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a62:	d013      	beq.n	8001a8c <HAL_GPIO_Init+0x1e0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a46      	ldr	r2, [pc, #280]	; (8001b80 <HAL_GPIO_Init+0x2d4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00d      	beq.n	8001a88 <HAL_GPIO_Init+0x1dc>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a45      	ldr	r2, [pc, #276]	; (8001b84 <HAL_GPIO_Init+0x2d8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d007      	beq.n	8001a84 <HAL_GPIO_Init+0x1d8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <HAL_GPIO_Init+0x2dc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d101      	bne.n	8001a80 <HAL_GPIO_Init+0x1d4>
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1e2>
 8001a80:	2305      	movs	r3, #5
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1e2>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1e2>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1e2>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a9e:	4937      	ldr	r1, [pc, #220]	; (8001b7c <HAL_GPIO_Init+0x2d0>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aac:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ad0:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001afa:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b24:	4a19      	ldr	r2, [pc, #100]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <HAL_GPIO_Init+0x2e0>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f aea9 	bne.w	80018bc <HAL_GPIO_Init+0x10>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e01d      	b.n	8001bde <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f814 	bl	8000be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 fc92 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_TIM_Base_Start_IT+0x50>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d00b      	beq.n	8001c2a <HAL_TIM_Base_Start_IT+0x42>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d007      	beq.n	8001c2a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0201 	orr.w	r2, r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	00010007 	.word	0x00010007

08001c3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e01d      	b.n	8001c8a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f815 	bl	8001c92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3304      	adds	r3, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f000 fc3c 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e01d      	b.n	8001cf4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d106      	bne.n	8001cd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f815 	bl	8001cfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f000 fc07 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	6839      	ldr	r1, [r7, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 ffa0 	bl	8002c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_TIM_PWM_Start+0x90>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00e      	beq.n	8001d50 <HAL_TIM_PWM_Start+0x40>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_TIM_PWM_Start+0x94>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_TIM_PWM_Start+0x40>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_TIM_PWM_Start+0x98>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d004      	beq.n	8001d50 <HAL_TIM_PWM_Start+0x40>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_TIM_PWM_Start+0x9c>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_TIM_PWM_Start+0x44>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <HAL_TIM_PWM_Start+0x46>
 8001d54:	2300      	movs	r3, #0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_TIM_PWM_Start+0xa0>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d00b      	beq.n	8001d94 <HAL_TIM_PWM_Start+0x84>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d82:	d007      	beq.n	8001d94 <HAL_TIM_PWM_Start+0x84>
  {
    __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0201 	orr.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40014000 	.word	0x40014000
 8001da8:	40014400 	.word	0x40014400
 8001dac:	40014800 	.word	0x40014800
 8001db0:	00010007 	.word	0x00010007

08001db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d122      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d11b      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fb5f 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8001dfc:	e005      	b.n	8001e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fb51 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fb62 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d122      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d11b      	bne.n	8001e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0204 	mvn.w	r2, #4
 8001e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fb35 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8001e50:	e005      	b.n	8001e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fb27 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb38 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0208 	mvn.w	r2, #8
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fb0b 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fafd 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fb0e 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0210 	mvn.w	r2, #16
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fae1 	bl	80024ba <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fad3 	bl	80024a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fae4 	bl	80024ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d10e      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0201 	mvn.w	r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 faad 	bl	8002492 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b80      	cmp	r3, #128	; 0x80
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b80      	cmp	r3, #128	; 0x80
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 ff20 	bl	8002da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 ff13 	bl	8002db8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d10e      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d107      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fa92 	bl	80024e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0220 	mvn.w	r2, #32
 8001fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fed3 	bl	8002d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_TIM_OC_ConfigChannel+0x1a>
 800200a:	2302      	movs	r3, #2
 800200c:	e06c      	b.n	80020e8 <HAL_TIM_OC_ConfigChannel+0xf4>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2202      	movs	r2, #2
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b14      	cmp	r3, #20
 8002022:	d857      	bhi.n	80020d4 <HAL_TIM_OC_ConfigChannel+0xe0>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_TIM_OC_ConfigChannel+0x38>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	08002081 	.word	0x08002081
 8002030:	080020d5 	.word	0x080020d5
 8002034:	080020d5 	.word	0x080020d5
 8002038:	080020d5 	.word	0x080020d5
 800203c:	0800208f 	.word	0x0800208f
 8002040:	080020d5 	.word	0x080020d5
 8002044:	080020d5 	.word	0x080020d5
 8002048:	080020d5 	.word	0x080020d5
 800204c:	0800209d 	.word	0x0800209d
 8002050:	080020d5 	.word	0x080020d5
 8002054:	080020d5 	.word	0x080020d5
 8002058:	080020d5 	.word	0x080020d5
 800205c:	080020ab 	.word	0x080020ab
 8002060:	080020d5 	.word	0x080020d5
 8002064:	080020d5 	.word	0x080020d5
 8002068:	080020d5 	.word	0x080020d5
 800206c:	080020b9 	.word	0x080020b9
 8002070:	080020d5 	.word	0x080020d5
 8002074:	080020d5 	.word	0x080020d5
 8002078:	080020d5 	.word	0x080020d5
 800207c:	080020c7 	.word	0x080020c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f000 faae 	bl	80025e8 <TIM_OC1_SetConfig>
      break;
 800208c:	e023      	b.n	80020d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fb2d 	bl	80026f4 <TIM_OC2_SetConfig>
      break;
 800209a:	e01c      	b.n	80020d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fba6 	bl	80027f4 <TIM_OC3_SetConfig>
      break;
 80020a8:	e015      	b.n	80020d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68b9      	ldr	r1, [r7, #8]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fc1d 	bl	80028f0 <TIM_OC4_SetConfig>
      break;
 80020b6:	e00e      	b.n	80020d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fc7a 	bl	80029b8 <TIM_OC5_SetConfig>
      break;
 80020c4:	e007      	b.n	80020d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fcd1 	bl	8002a74 <TIM_OC6_SetConfig>
      break;
 80020d2:	e000      	b.n	80020d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80020d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002106:	2302      	movs	r3, #2
 8002108:	e105      	b.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x226>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b14      	cmp	r3, #20
 800211e:	f200 80f0 	bhi.w	8002302 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	0800217d 	.word	0x0800217d
 800212c:	08002303 	.word	0x08002303
 8002130:	08002303 	.word	0x08002303
 8002134:	08002303 	.word	0x08002303
 8002138:	080021bd 	.word	0x080021bd
 800213c:	08002303 	.word	0x08002303
 8002140:	08002303 	.word	0x08002303
 8002144:	08002303 	.word	0x08002303
 8002148:	080021ff 	.word	0x080021ff
 800214c:	08002303 	.word	0x08002303
 8002150:	08002303 	.word	0x08002303
 8002154:	08002303 	.word	0x08002303
 8002158:	0800223f 	.word	0x0800223f
 800215c:	08002303 	.word	0x08002303
 8002160:	08002303 	.word	0x08002303
 8002164:	08002303 	.word	0x08002303
 8002168:	08002281 	.word	0x08002281
 800216c:	08002303 	.word	0x08002303
 8002170:	08002303 	.word	0x08002303
 8002174:	08002303 	.word	0x08002303
 8002178:	080022c1 	.word	0x080022c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 fa30 	bl	80025e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f042 0208 	orr.w	r2, r2, #8
 8002196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0204 	bic.w	r2, r2, #4
 80021a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6999      	ldr	r1, [r3, #24]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	619a      	str	r2, [r3, #24]
      break;
 80021ba:	e0a3      	b.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fa96 	bl	80026f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6999      	ldr	r1, [r3, #24]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	021a      	lsls	r2, r3, #8
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	430a      	orrs	r2, r1
 80021fa:	619a      	str	r2, [r3, #24]
      break;
 80021fc:	e082      	b.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 faf5 	bl	80027f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69da      	ldr	r2, [r3, #28]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f042 0208 	orr.w	r2, r2, #8
 8002218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	69da      	ldr	r2, [r3, #28]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0204 	bic.w	r2, r2, #4
 8002228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69d9      	ldr	r1, [r3, #28]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	61da      	str	r2, [r3, #28]
      break;
 800223c:	e062      	b.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fb53 	bl	80028f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69da      	ldr	r2, [r3, #28]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69d9      	ldr	r1, [r3, #28]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	021a      	lsls	r2, r3, #8
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	61da      	str	r2, [r3, #28]
      break;
 800227e:	e041      	b.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fb96 	bl	80029b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0208 	orr.w	r2, r2, #8
 800229a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0204 	bic.w	r2, r2, #4
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80022be:	e021      	b.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fbd4 	bl	8002a74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	021a      	lsls	r2, r3, #8
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002300:	e000      	b.n	8002304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8002302:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop

08002320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_TIM_ConfigClockSource+0x18>
 8002334:	2302      	movs	r3, #2
 8002336:	e0a8      	b.n	800248a <HAL_TIM_ConfigClockSource+0x16a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800235a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002362:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d067      	beq.n	8002444 <HAL_TIM_ConfigClockSource+0x124>
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d80b      	bhi.n	8002390 <HAL_TIM_ConfigClockSource+0x70>
 8002378:	2b10      	cmp	r3, #16
 800237a:	d073      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0x144>
 800237c:	2b10      	cmp	r3, #16
 800237e:	d802      	bhi.n	8002386 <HAL_TIM_ConfigClockSource+0x66>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d06f      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002384:	e078      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002386:	2b20      	cmp	r3, #32
 8002388:	d06c      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0x144>
 800238a:	2b30      	cmp	r3, #48	; 0x30
 800238c:	d06a      	beq.n	8002464 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800238e:	e073      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002390:	2b70      	cmp	r3, #112	; 0x70
 8002392:	d00d      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x90>
 8002394:	2b70      	cmp	r3, #112	; 0x70
 8002396:	d804      	bhi.n	80023a2 <HAL_TIM_ConfigClockSource+0x82>
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d033      	beq.n	8002404 <HAL_TIM_ConfigClockSource+0xe4>
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d041      	beq.n	8002424 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80023a0:	e06a      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80023a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a6:	d066      	beq.n	8002476 <HAL_TIM_ConfigClockSource+0x156>
 80023a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ac:	d017      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80023ae:	e063      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f000 fc32 	bl	8002c28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]
      break;
 80023dc:	e04c      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f000 fc1b 	bl	8002c28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002400:	609a      	str	r2, [r3, #8]
      break;
 8002402:	e039      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	461a      	mov	r2, r3
 8002412:	f000 fb8f 	bl	8002b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2150      	movs	r1, #80	; 0x50
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fbe8 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 8002422:	e029      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	461a      	mov	r2, r3
 8002432:	f000 fbae 	bl	8002b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2160      	movs	r1, #96	; 0x60
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fbd8 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 8002442:	e019      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	461a      	mov	r2, r3
 8002452:	f000 fb6f 	bl	8002b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fbc8 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 8002462:	e009      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 fbbf 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 8002474:	e000      	b.n	8002478 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a32      	ldr	r2, [pc, #200]	; (80025d4 <TIM_Base_SetConfig+0xdc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d007      	beq.n	8002520 <TIM_Base_SetConfig+0x28>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d003      	beq.n	8002520 <TIM_Base_SetConfig+0x28>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a2f      	ldr	r2, [pc, #188]	; (80025d8 <TIM_Base_SetConfig+0xe0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d108      	bne.n	8002532 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <TIM_Base_SetConfig+0xdc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <TIM_Base_SetConfig+0x6a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d00f      	beq.n	8002562 <TIM_Base_SetConfig+0x6a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <TIM_Base_SetConfig+0xe0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <TIM_Base_SetConfig+0x6a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <TIM_Base_SetConfig+0xe4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_Base_SetConfig+0x6a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <TIM_Base_SetConfig+0xe8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_Base_SetConfig+0x6a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <TIM_Base_SetConfig+0xec>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d108      	bne.n	8002574 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <TIM_Base_SetConfig+0xdc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00b      	beq.n	80025b8 <TIM_Base_SetConfig+0xc0>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	; (80025dc <TIM_Base_SetConfig+0xe4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <TIM_Base_SetConfig+0xc0>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <TIM_Base_SetConfig+0xe8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0xc0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a0c      	ldr	r2, [pc, #48]	; (80025e4 <TIM_Base_SetConfig+0xec>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	615a      	str	r2, [r3, #20]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800

080025e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f023 0201 	bic.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f023 0302 	bic.w	r3, r3, #2
 8002634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <TIM_OC1_SetConfig+0xfc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00b      	beq.n	8002660 <TIM_OC1_SetConfig+0x78>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <TIM_OC1_SetConfig+0x100>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <TIM_OC1_SetConfig+0x78>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a26      	ldr	r2, [pc, #152]	; (80026ec <TIM_OC1_SetConfig+0x104>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d003      	beq.n	8002660 <TIM_OC1_SetConfig+0x78>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <TIM_OC1_SetConfig+0x108>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10c      	bne.n	800267a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f023 0308 	bic.w	r3, r3, #8
 8002666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <TIM_OC1_SetConfig+0xfc>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00b      	beq.n	800269a <TIM_OC1_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <TIM_OC1_SetConfig+0x100>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <TIM_OC1_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <TIM_OC1_SetConfig+0x104>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <TIM_OC1_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <TIM_OC1_SetConfig+0x108>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d111      	bne.n	80026be <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	621a      	str	r2, [r3, #32]
}
 80026d8:	bf00      	nop
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40014400 	.word	0x40014400
 80026f0:	40014800 	.word	0x40014800

080026f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	f023 0210 	bic.w	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f023 0320 	bic.w	r3, r3, #32
 8002742:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <TIM_OC2_SetConfig+0xf0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10d      	bne.n	8002774 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800275e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002772:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <TIM_OC2_SetConfig+0xf0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00b      	beq.n	8002794 <TIM_OC2_SetConfig+0xa0>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a1a      	ldr	r2, [pc, #104]	; (80027e8 <TIM_OC2_SetConfig+0xf4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d007      	beq.n	8002794 <TIM_OC2_SetConfig+0xa0>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a19      	ldr	r2, [pc, #100]	; (80027ec <TIM_OC2_SetConfig+0xf8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <TIM_OC2_SetConfig+0xa0>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <TIM_OC2_SetConfig+0xfc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d113      	bne.n	80027bc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800279a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800

080027f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a23      	ldr	r2, [pc, #140]	; (80028e0 <TIM_OC3_SetConfig+0xec>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10d      	bne.n	8002872 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800285c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002870:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <TIM_OC3_SetConfig+0xec>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <TIM_OC3_SetConfig+0x9e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <TIM_OC3_SetConfig+0xf0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_OC3_SetConfig+0x9e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <TIM_OC3_SetConfig+0xf4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_OC3_SetConfig+0x9e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <TIM_OC3_SetConfig+0xf8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d113      	bne.n	80028ba <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	621a      	str	r2, [r3, #32]
}
 80028d4:	bf00      	nop
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40014000 	.word	0x40014000
 80028e8:	40014400 	.word	0x40014400
 80028ec:	40014800 	.word	0x40014800

080028f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800291e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800293e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <TIM_OC4_SetConfig+0xb8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00b      	beq.n	800296c <TIM_OC4_SetConfig+0x7c>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a15      	ldr	r2, [pc, #84]	; (80029ac <TIM_OC4_SetConfig+0xbc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d007      	beq.n	800296c <TIM_OC4_SetConfig+0x7c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <TIM_OC4_SetConfig+0xc0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d003      	beq.n	800296c <TIM_OC4_SetConfig+0x7c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <TIM_OC4_SetConfig+0xc4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	621a      	str	r2, [r3, #32]
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40014000 	.word	0x40014000
 80029b0:	40014400 	.word	0x40014400
 80029b4:	40014800 	.word	0x40014800

080029b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <TIM_OC5_SetConfig+0xac>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00b      	beq.n	8002a2a <TIM_OC5_SetConfig+0x72>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <TIM_OC5_SetConfig+0xb0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d007      	beq.n	8002a2a <TIM_OC5_SetConfig+0x72>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <TIM_OC5_SetConfig+0xb4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d003      	beq.n	8002a2a <TIM_OC5_SetConfig+0x72>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a12      	ldr	r2, [pc, #72]	; (8002a70 <TIM_OC5_SetConfig+0xb8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d109      	bne.n	8002a3e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800

08002a74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	051b      	lsls	r3, r3, #20
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <TIM_OC6_SetConfig+0xb0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <TIM_OC6_SetConfig+0x74>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <TIM_OC6_SetConfig+0xb4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <TIM_OC6_SetConfig+0x74>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <TIM_OC6_SetConfig+0xb8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_OC6_SetConfig+0x74>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <TIM_OC6_SetConfig+0xbc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d109      	bne.n	8002afc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	40014800 	.word	0x40014800

08002b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f023 0201 	bic.w	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 030a 	bic.w	r3, r3, #10
 8002b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	621a      	str	r2, [r3, #32]
}
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f023 0210 	bic.w	r2, r3, #16
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	031b      	lsls	r3, r3, #12
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f043 0307 	orr.w	r3, r3, #7
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	021a      	lsls	r2, r3, #8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	609a      	str	r2, [r3, #8]
}
 8002c5c:	bf00      	nop
 8002c5e:	371c      	adds	r7, #28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 031f 	and.w	r3, r3, #31
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e054      	b.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cfc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d009      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a13      	ldr	r2, [pc, #76]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10c      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68ba      	ldr	r2, [r7, #8]
 8002d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40014000 	.word	0x40014000

08002d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	2103      	movs	r1, #3
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	61bb      	str	r3, [r7, #24]
  return result;
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3724      	adds	r7, #36	; 0x24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b089      	sub	sp, #36	; 0x24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	613b      	str	r3, [r7, #16]
  return result;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2103      	movs	r1, #3
 8002e82:	fa01 f303 	lsl.w	r3, r1, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	401a      	ands	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa93 f3a3 	rbit	r3, r3
 8002e94:	61bb      	str	r3, [r7, #24]
  return result;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002eac:	bf00      	nop
 8002eae:	3724      	adds	r7, #36	; 0x24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	613b      	str	r3, [r7, #16]
  return result;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2103      	movs	r1, #3
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	431a      	orrs	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	60da      	str	r2, [r3, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	3724      	adds	r7, #36	; 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b089      	sub	sp, #36	; 0x24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	613b      	str	r3, [r7, #16]
  return result;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	fab3 f383 	clz	r3, r3
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	210f      	movs	r1, #15
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	401a      	ands	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	61bb      	str	r3, [r7, #24]
  return result;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002f68:	bf00      	nop
 8002f6a:	3724      	adds	r7, #36	; 0x24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b089      	sub	sp, #36	; 0x24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	613b      	str	r3, [r7, #16]
  return result;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	210f      	movs	r1, #15
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	61bb      	str	r3, [r7, #24]
  return result;
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002fca:	bf00      	nop
 8002fcc:	3724      	adds	r7, #36	; 0x24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b088      	sub	sp, #32
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
 8002fde:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	613b      	str	r3, [r7, #16]
  return result;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ff8:	e051      	b.n	800309e <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d043      	beq.n	8003098 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d003      	beq.n	8003020 <LL_GPIO_Init+0x4a>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d10e      	bne.n	800303e <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	461a      	mov	r2, r3
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7ff ff16 	bl	8002e5a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fef6 	bl	8002e2a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	461a      	mov	r2, r3
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ff36 	bl	8002eb8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d11a      	bne.n	800308a <LL_GPIO_Init+0xb4>
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	60bb      	str	r3, [r7, #8]
  return result;
 8003060:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b07      	cmp	r3, #7
 800306a:	d807      	bhi.n	800307c <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	461a      	mov	r2, r3
 8003072:	69b9      	ldr	r1, [r7, #24]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff ff4e 	bl	8002f16 <LL_GPIO_SetAFPin_0_7>
 800307a:	e006      	b.n	800308a <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	461a      	mov	r2, r3
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff ff75 	bl	8002f74 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	461a      	mov	r2, r3
 8003090:	69b9      	ldr	r1, [r7, #24]
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff fe9a 	bl	8002dcc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa22 f303 	lsr.w	r3, r2, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1a6      	bne.n	8002ffa <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <LL_RCC_HSI_IsReady>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <LL_RCC_HSI_IsReady+0x20>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40021000 	.word	0x40021000

080030dc <LL_RCC_LSE_IsReady>:
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <LL_RCC_LSE_IsReady+0x20>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40021000 	.word	0x40021000

08003100 <LL_RCC_GetSysClkSource>:
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <LL_RCC_GetSysClkSource+0x18>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000

0800311c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <LL_RCC_GetAHBPrescaler+0x18>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <LL_RCC_GetAPB1Prescaler+0x18>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003144:	4618      	mov	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <LL_RCC_GetAPB2Prescaler+0x18>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000

08003170 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <LL_RCC_GetUSARTClockSource+0x28>)
 800317a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317c:	2103      	movs	r1, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	401a      	ands	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	4313      	orrs	r3, r2
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40021000 	.word	0x40021000

0800319c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <LL_RCC_PLL_GetMainSource+0x18>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80031bc:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40021000 	.word	0x40021000

080031d4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <LL_RCC_PLL_GetPrediv+0x18>)
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f003 030f 	and.w	r3, r3, #15
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80031f8:	f000 f860 	bl	80032bc <RCC_GetSystemClockFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f87a 	bl	8003300 <RCC_GetHCLKClockFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 f888 	bl	800332c <RCC_GetPCLK1ClockFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f894 	bl	8003354 <RCC_GetPCLK2ClockFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12a      	bne.n	80032a4 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff8e 	bl	8003170 <LL_RCC_GetUSARTClockSource>
 8003254:	4603      	mov	r3, r0
 8003256:	2b02      	cmp	r3, #2
 8003258:	d00f      	beq.n	800327a <LL_RCC_GetUSARTClockFreq+0x3e>
 800325a:	2b03      	cmp	r3, #3
 800325c:	d005      	beq.n	800326a <LL_RCC_GetUSARTClockFreq+0x2e>
 800325e:	2b01      	cmp	r3, #1
 8003260:	d114      	bne.n	800328c <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003262:	f000 f82b 	bl	80032bc <RCC_GetSystemClockFreq>
 8003266:	60f8      	str	r0, [r7, #12]
        break;
 8003268:	e021      	b.n	80032ae <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800326a:	f7ff ff25 	bl	80030b8 <LL_RCC_HSI_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d019      	beq.n	80032a8 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8003274:	4b10      	ldr	r3, [pc, #64]	; (80032b8 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8003276:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003278:	e016      	b.n	80032a8 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800327a:	f7ff ff2f 	bl	80030dc <LL_RCC_LSE_IsReady>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8003284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003288:	60fb      	str	r3, [r7, #12]
        }
        break;
 800328a:	e00f      	b.n	80032ac <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800328c:	f000 f816 	bl	80032bc <RCC_GetSystemClockFreq>
 8003290:	4603      	mov	r3, r0
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f834 	bl	8003300 <RCC_GetHCLKClockFreq>
 8003298:	4603      	mov	r3, r0
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f846 	bl	800332c <RCC_GetPCLK1ClockFreq>
 80032a0:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80032a2:	e004      	b.n	80032ae <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 80032a4:	bf00      	nop
 80032a6:	e002      	b.n	80032ae <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80032a8:	bf00      	nop
 80032aa:	e000      	b.n	80032ae <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 80032ac:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80032ae:	68fb      	ldr	r3, [r7, #12]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	007a1200 	.word	0x007a1200

080032bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80032c6:	f7ff ff1b 	bl	8003100 <LL_RCC_GetSysClkSource>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d006      	beq.n	80032de <RCC_GetSystemClockFreq+0x22>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d007      	beq.n	80032e4 <RCC_GetSystemClockFreq+0x28>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80032d8:	4b08      	ldr	r3, [pc, #32]	; (80032fc <RCC_GetSystemClockFreq+0x40>)
 80032da:	607b      	str	r3, [r7, #4]
      break;
 80032dc:	e009      	b.n	80032f2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <RCC_GetSystemClockFreq+0x40>)
 80032e0:	607b      	str	r3, [r7, #4]
      break;
 80032e2:	e006      	b.n	80032f2 <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80032e4:	f000 f84a 	bl	800337c <RCC_PLL_GetFreqDomain_SYS>
 80032e8:	6078      	str	r0, [r7, #4]
      break;
 80032ea:	e002      	b.n	80032f2 <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80032ec:	4b03      	ldr	r3, [pc, #12]	; (80032fc <RCC_GetSystemClockFreq+0x40>)
 80032ee:	607b      	str	r3, [r7, #4]
      break;
 80032f0:	bf00      	nop
  }

  return frequency;
 80032f2:	687b      	ldr	r3, [r7, #4]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	007a1200 	.word	0x007a1200

08003300 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003308:	f7ff ff08 	bl	800311c <LL_RCC_GetAHBPrescaler>
 800330c:	4603      	mov	r3, r0
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <RCC_GetHCLKClockFreq+0x28>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	461a      	mov	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	40d3      	lsrs	r3, r2
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	08003830 	.word	0x08003830

0800332c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003334:	f7ff ff00 	bl	8003138 <LL_RCC_GetAPB1Prescaler>
 8003338:	4603      	mov	r3, r0
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	4a04      	ldr	r2, [pc, #16]	; (8003350 <RCC_GetPCLK1ClockFreq+0x24>)
 800333e:	5cd3      	ldrb	r3, [r2, r3]
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	40d3      	lsrs	r3, r2
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	08003840 	.word	0x08003840

08003354 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800335c:	f7ff fefa 	bl	8003154 <LL_RCC_GetAPB2Prescaler>
 8003360:	4603      	mov	r3, r0
 8003362:	0adb      	lsrs	r3, r3, #11
 8003364:	4a04      	ldr	r2, [pc, #16]	; (8003378 <RCC_GetPCLK2ClockFreq+0x24>)
 8003366:	5cd3      	ldrb	r3, [r2, r3]
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	40d3      	lsrs	r3, r2
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	08003840 	.word	0x08003840

0800337c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800338a:	f7ff ff07 	bl	800319c <LL_RCC_PLL_GetMainSource>
 800338e:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d003      	beq.n	80033a4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800339c:	e005      	b.n	80033aa <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80033a0:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80033a2:	e005      	b.n	80033b0 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80033a6:	60fb      	str	r3, [r7, #12]
      break;
 80033a8:	e002      	b.n	80033b0 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80033ac:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80033ae:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80033b0:	f7ff ff10 	bl	80031d4 <LL_RCC_PLL_GetPrediv>
 80033b4:	4603      	mov	r3, r0
 80033b6:	3301      	adds	r3, #1
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	fbb2 f4f3 	udiv	r4, r2, r3
 80033be:	f7ff fefb 	bl	80031b8 <LL_RCC_PLL_GetMultiplicator>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80033cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	fa92 f2a2 	rbit	r2, r2
 80033d4:	603a      	str	r2, [r7, #0]
  return result;
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	fab2 f282 	clz	r2, r2
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	40d3      	lsrs	r3, r2
 80033e0:	3302      	adds	r3, #2
 80033e2:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	bf00      	nop
 80033f0:	003d0900 	.word	0x003d0900
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <LL_USART_IsEnabled>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <LL_USART_IsEnabled+0x18>
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <LL_USART_IsEnabled+0x1a>
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <LL_USART_SetStopBitsLength>:
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	605a      	str	r2, [r3, #4]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_USART_SetHWFlowCtrl>:
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	609a      	str	r2, [r3, #8]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <LL_USART_SetBaudRate>:
{
 800346a:	b490      	push	{r4, r7}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d116      	bne.n	80034ae <LL_USART_SetBaudRate+0x44>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	005a      	lsls	r2, r3, #1
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	441a      	add	r2, r3
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	b29b      	uxth	r3, r3
 8003492:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 800349a:	401c      	ands	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	60dc      	str	r4, [r3, #12]
}
 80034ac:	e00a      	b.n	80034c4 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	085a      	lsrs	r2, r3, #1
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	441a      	add	r2, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	60da      	str	r2, [r3, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc90      	pop	{r4, r7}
 80034cc:	4770      	bx	lr
	...

080034d0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80034de:	2300      	movs	r3, #0
 80034e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff88 	bl	80033f8 <LL_USART_IsEnabled>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d14e      	bne.n	800358c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <LL_USART_Init+0xc8>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	6851      	ldr	r1, [r2, #4]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	4311      	orrs	r1, r2
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	6912      	ldr	r2, [r2, #16]
 8003504:	4311      	orrs	r1, r2
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	6992      	ldr	r2, [r2, #24]
 800350a:	430a      	orrs	r2, r1
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff80 	bl	800341e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff8d 	bl	8003444 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1b      	ldr	r2, [pc, #108]	; (800359c <LL_USART_Init+0xcc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d104      	bne.n	800353c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003532:	2000      	movs	r0, #0
 8003534:	f7ff fe82 	bl	800323c <LL_RCC_GetUSARTClockFreq>
 8003538:	61b8      	str	r0, [r7, #24]
 800353a:	e016      	b.n	800356a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <LL_USART_Init+0xd0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d107      	bne.n	8003554 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003544:	f107 0308 	add.w	r3, r7, #8
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fe51 	bl	80031f0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e00a      	b.n	800356a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <LL_USART_Init+0xd4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d106      	bne.n	800356a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800355c:	f107 0308 	add.w	r3, r7, #8
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fe45 	bl	80031f0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003578:	2300      	movs	r3, #0
 800357a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff6f 	bl	800346a <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800358c:	7ffb      	ldrb	r3, [r7, #31]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	efff69f3 	.word	0xefff69f3
 800359c:	40013800 	.word	0x40013800
 80035a0:	40004400 	.word	0x40004400
 80035a4:	40004800 	.word	0x40004800

080035a8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <LL_mDelay+0x44>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80035b6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d00c      	beq.n	80035da <LL_mDelay+0x32>
  {
    Delay++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3301      	adds	r3, #1
 80035c4:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80035c6:	e008      	b.n	80035da <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <LL_mDelay+0x44>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <LL_mDelay+0x32>
    {
      Delay--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f3      	bne.n	80035c8 <LL_mDelay+0x20>
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <LL_SetSystemCoreClock+0x1c>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000008 	.word	0x20000008

08003610 <atoi>:
 8003610:	220a      	movs	r2, #10
 8003612:	2100      	movs	r1, #0
 8003614:	f000 b8ba 	b.w	800378c <strtol>

08003618 <__libc_init_array>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	4e0d      	ldr	r6, [pc, #52]	; (8003650 <__libc_init_array+0x38>)
 800361c:	4c0d      	ldr	r4, [pc, #52]	; (8003654 <__libc_init_array+0x3c>)
 800361e:	1ba4      	subs	r4, r4, r6
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	2500      	movs	r5, #0
 8003624:	42a5      	cmp	r5, r4
 8003626:	d109      	bne.n	800363c <__libc_init_array+0x24>
 8003628:	4e0b      	ldr	r6, [pc, #44]	; (8003658 <__libc_init_array+0x40>)
 800362a:	4c0c      	ldr	r4, [pc, #48]	; (800365c <__libc_init_array+0x44>)
 800362c:	f000 f8e6 	bl	80037fc <_init>
 8003630:	1ba4      	subs	r4, r4, r6
 8003632:	10a4      	asrs	r4, r4, #2
 8003634:	2500      	movs	r5, #0
 8003636:	42a5      	cmp	r5, r4
 8003638:	d105      	bne.n	8003646 <__libc_init_array+0x2e>
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003640:	4798      	blx	r3
 8003642:	3501      	adds	r5, #1
 8003644:	e7ee      	b.n	8003624 <__libc_init_array+0xc>
 8003646:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800364a:	4798      	blx	r3
 800364c:	3501      	adds	r5, #1
 800364e:	e7f2      	b.n	8003636 <__libc_init_array+0x1e>
 8003650:	0800395c 	.word	0x0800395c
 8003654:	0800395c 	.word	0x0800395c
 8003658:	0800395c 	.word	0x0800395c
 800365c:	08003960 	.word	0x08003960

08003660 <memset>:
 8003660:	4402      	add	r2, r0
 8003662:	4603      	mov	r3, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	f803 1b01 	strb.w	r1, [r3], #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <strncmp>:
 8003670:	b510      	push	{r4, lr}
 8003672:	b16a      	cbz	r2, 8003690 <strncmp+0x20>
 8003674:	3901      	subs	r1, #1
 8003676:	1884      	adds	r4, r0, r2
 8003678:	f810 3b01 	ldrb.w	r3, [r0], #1
 800367c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <strncmp+0x1c>
 8003684:	42a0      	cmp	r0, r4
 8003686:	d001      	beq.n	800368c <strncmp+0x1c>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f5      	bne.n	8003678 <strncmp+0x8>
 800368c:	1a98      	subs	r0, r3, r2
 800368e:	bd10      	pop	{r4, pc}
 8003690:	4610      	mov	r0, r2
 8003692:	e7fc      	b.n	800368e <strncmp+0x1e>

08003694 <_strtol_l.isra.0>:
 8003694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003698:	4680      	mov	r8, r0
 800369a:	4689      	mov	r9, r1
 800369c:	4692      	mov	sl, r2
 800369e:	461e      	mov	r6, r3
 80036a0:	460f      	mov	r7, r1
 80036a2:	463d      	mov	r5, r7
 80036a4:	9808      	ldr	r0, [sp, #32]
 80036a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80036aa:	f000 f885 	bl	80037b8 <__locale_ctype_ptr_l>
 80036ae:	4420      	add	r0, r4
 80036b0:	7843      	ldrb	r3, [r0, #1]
 80036b2:	f013 0308 	ands.w	r3, r3, #8
 80036b6:	d132      	bne.n	800371e <_strtol_l.isra.0+0x8a>
 80036b8:	2c2d      	cmp	r4, #45	; 0x2d
 80036ba:	d132      	bne.n	8003722 <_strtol_l.isra.0+0x8e>
 80036bc:	787c      	ldrb	r4, [r7, #1]
 80036be:	1cbd      	adds	r5, r7, #2
 80036c0:	2201      	movs	r2, #1
 80036c2:	2e00      	cmp	r6, #0
 80036c4:	d05d      	beq.n	8003782 <_strtol_l.isra.0+0xee>
 80036c6:	2e10      	cmp	r6, #16
 80036c8:	d109      	bne.n	80036de <_strtol_l.isra.0+0x4a>
 80036ca:	2c30      	cmp	r4, #48	; 0x30
 80036cc:	d107      	bne.n	80036de <_strtol_l.isra.0+0x4a>
 80036ce:	782b      	ldrb	r3, [r5, #0]
 80036d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80036d4:	2b58      	cmp	r3, #88	; 0x58
 80036d6:	d14f      	bne.n	8003778 <_strtol_l.isra.0+0xe4>
 80036d8:	786c      	ldrb	r4, [r5, #1]
 80036da:	2610      	movs	r6, #16
 80036dc:	3502      	adds	r5, #2
 80036de:	2a00      	cmp	r2, #0
 80036e0:	bf14      	ite	ne
 80036e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80036e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80036ea:	2700      	movs	r7, #0
 80036ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80036f0:	4638      	mov	r0, r7
 80036f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80036f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80036fa:	2b09      	cmp	r3, #9
 80036fc:	d817      	bhi.n	800372e <_strtol_l.isra.0+0x9a>
 80036fe:	461c      	mov	r4, r3
 8003700:	42a6      	cmp	r6, r4
 8003702:	dd23      	ble.n	800374c <_strtol_l.isra.0+0xb8>
 8003704:	1c7b      	adds	r3, r7, #1
 8003706:	d007      	beq.n	8003718 <_strtol_l.isra.0+0x84>
 8003708:	4584      	cmp	ip, r0
 800370a:	d31c      	bcc.n	8003746 <_strtol_l.isra.0+0xb2>
 800370c:	d101      	bne.n	8003712 <_strtol_l.isra.0+0x7e>
 800370e:	45a6      	cmp	lr, r4
 8003710:	db19      	blt.n	8003746 <_strtol_l.isra.0+0xb2>
 8003712:	fb00 4006 	mla	r0, r0, r6, r4
 8003716:	2701      	movs	r7, #1
 8003718:	f815 4b01 	ldrb.w	r4, [r5], #1
 800371c:	e7eb      	b.n	80036f6 <_strtol_l.isra.0+0x62>
 800371e:	462f      	mov	r7, r5
 8003720:	e7bf      	b.n	80036a2 <_strtol_l.isra.0+0xe>
 8003722:	2c2b      	cmp	r4, #43	; 0x2b
 8003724:	bf04      	itt	eq
 8003726:	1cbd      	addeq	r5, r7, #2
 8003728:	787c      	ldrbeq	r4, [r7, #1]
 800372a:	461a      	mov	r2, r3
 800372c:	e7c9      	b.n	80036c2 <_strtol_l.isra.0+0x2e>
 800372e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003732:	2b19      	cmp	r3, #25
 8003734:	d801      	bhi.n	800373a <_strtol_l.isra.0+0xa6>
 8003736:	3c37      	subs	r4, #55	; 0x37
 8003738:	e7e2      	b.n	8003700 <_strtol_l.isra.0+0x6c>
 800373a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800373e:	2b19      	cmp	r3, #25
 8003740:	d804      	bhi.n	800374c <_strtol_l.isra.0+0xb8>
 8003742:	3c57      	subs	r4, #87	; 0x57
 8003744:	e7dc      	b.n	8003700 <_strtol_l.isra.0+0x6c>
 8003746:	f04f 37ff 	mov.w	r7, #4294967295
 800374a:	e7e5      	b.n	8003718 <_strtol_l.isra.0+0x84>
 800374c:	1c7b      	adds	r3, r7, #1
 800374e:	d108      	bne.n	8003762 <_strtol_l.isra.0+0xce>
 8003750:	2322      	movs	r3, #34	; 0x22
 8003752:	f8c8 3000 	str.w	r3, [r8]
 8003756:	4608      	mov	r0, r1
 8003758:	f1ba 0f00 	cmp.w	sl, #0
 800375c:	d107      	bne.n	800376e <_strtol_l.isra.0+0xda>
 800375e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003762:	b102      	cbz	r2, 8003766 <_strtol_l.isra.0+0xd2>
 8003764:	4240      	negs	r0, r0
 8003766:	f1ba 0f00 	cmp.w	sl, #0
 800376a:	d0f8      	beq.n	800375e <_strtol_l.isra.0+0xca>
 800376c:	b10f      	cbz	r7, 8003772 <_strtol_l.isra.0+0xde>
 800376e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003772:	f8ca 9000 	str.w	r9, [sl]
 8003776:	e7f2      	b.n	800375e <_strtol_l.isra.0+0xca>
 8003778:	2430      	movs	r4, #48	; 0x30
 800377a:	2e00      	cmp	r6, #0
 800377c:	d1af      	bne.n	80036de <_strtol_l.isra.0+0x4a>
 800377e:	2608      	movs	r6, #8
 8003780:	e7ad      	b.n	80036de <_strtol_l.isra.0+0x4a>
 8003782:	2c30      	cmp	r4, #48	; 0x30
 8003784:	d0a3      	beq.n	80036ce <_strtol_l.isra.0+0x3a>
 8003786:	260a      	movs	r6, #10
 8003788:	e7a9      	b.n	80036de <_strtol_l.isra.0+0x4a>
	...

0800378c <strtol>:
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <strtol+0x24>)
 800378e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003790:	681c      	ldr	r4, [r3, #0]
 8003792:	4d08      	ldr	r5, [pc, #32]	; (80037b4 <strtol+0x28>)
 8003794:	6a23      	ldr	r3, [r4, #32]
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf08      	it	eq
 800379a:	462b      	moveq	r3, r5
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	460a      	mov	r2, r1
 80037a2:	4601      	mov	r1, r0
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff ff75 	bl	8003694 <_strtol_l.isra.0>
 80037aa:	b003      	add	sp, #12
 80037ac:	bd30      	pop	{r4, r5, pc}
 80037ae:	bf00      	nop
 80037b0:	20000014 	.word	0x20000014
 80037b4:	20000078 	.word	0x20000078

080037b8 <__locale_ctype_ptr_l>:
 80037b8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80037bc:	4770      	bx	lr

080037be <__ascii_mbtowc>:
 80037be:	b082      	sub	sp, #8
 80037c0:	b901      	cbnz	r1, 80037c4 <__ascii_mbtowc+0x6>
 80037c2:	a901      	add	r1, sp, #4
 80037c4:	b142      	cbz	r2, 80037d8 <__ascii_mbtowc+0x1a>
 80037c6:	b14b      	cbz	r3, 80037dc <__ascii_mbtowc+0x1e>
 80037c8:	7813      	ldrb	r3, [r2, #0]
 80037ca:	600b      	str	r3, [r1, #0]
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	1c10      	adds	r0, r2, #0
 80037d0:	bf18      	it	ne
 80037d2:	2001      	movne	r0, #1
 80037d4:	b002      	add	sp, #8
 80037d6:	4770      	bx	lr
 80037d8:	4610      	mov	r0, r2
 80037da:	e7fb      	b.n	80037d4 <__ascii_mbtowc+0x16>
 80037dc:	f06f 0001 	mvn.w	r0, #1
 80037e0:	e7f8      	b.n	80037d4 <__ascii_mbtowc+0x16>

080037e2 <__ascii_wctomb>:
 80037e2:	b149      	cbz	r1, 80037f8 <__ascii_wctomb+0x16>
 80037e4:	2aff      	cmp	r2, #255	; 0xff
 80037e6:	bf85      	ittet	hi
 80037e8:	238a      	movhi	r3, #138	; 0x8a
 80037ea:	6003      	strhi	r3, [r0, #0]
 80037ec:	700a      	strbls	r2, [r1, #0]
 80037ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80037f2:	bf98      	it	ls
 80037f4:	2001      	movls	r0, #1
 80037f6:	4770      	bx	lr
 80037f8:	4608      	mov	r0, r1
 80037fa:	4770      	bx	lr

080037fc <_init>:
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037fe:	bf00      	nop
 8003800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003802:	bc08      	pop	{r3}
 8003804:	469e      	mov	lr, r3
 8003806:	4770      	bx	lr

08003808 <_fini>:
 8003808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380a:	bf00      	nop
 800380c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800380e:	bc08      	pop	{r3}
 8003810:	469e      	mov	lr, r3
 8003812:	4770      	bx	lr
