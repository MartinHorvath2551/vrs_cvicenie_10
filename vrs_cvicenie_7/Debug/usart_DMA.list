
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08005ee8  08005ee8  00015ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a0  080060a0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080060a0  080060a0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060a0  080060a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a0  080060a0  000160a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060a4  080060a4  000160a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080060a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000008c  08006134  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08006134  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145eb  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c00  00000000  00000000  000346a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c88  00000000  00000000  00038058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001af62  00000000  00000000  00038ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6dd  00000000  00000000  00053c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c64b  00000000  00000000  0006031f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec96a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004228  00000000  00000000  000ec9e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ed0 	.word	0x08005ed0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08005ed0 	.word	0x08005ed0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x28>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x28>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f91b 	bl	8000db8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f002 fa94 	bl	80030b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40022000 	.word	0x40022000

08000b98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f933 	bl	8000e22 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f8fb 	bl	8000dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000024 	.word	0x20000024
 8000bf0:	20000004 	.word	0x20000004
 8000bf4:	20000000 	.word	0x20000000

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	200000d0 	.word	0x200000d0

08000c20 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <NVIC_EnableIRQ+0x30>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	da0b      	bge.n	8000ce4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <NVIC_SetPriority+0x4c>)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	b2d2      	uxtb	r2, r2
 8000cde:	440b      	add	r3, r1
 8000ce0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce2:	e009      	b.n	8000cf8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4907      	ldr	r1, [pc, #28]	; (8000d08 <NVIC_SetPriority+0x50>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d84:	d301      	bcc.n	8000d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00f      	b.n	8000daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <SysTick_Config+0x40>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d92:	210f      	movs	r1, #15
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <SysTick_Config+0x40>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <SysTick_Config+0x40>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ff2d 	bl	8000c20 <NVIC_SetPriorityGrouping>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de0:	f7ff ff42 	bl	8000c68 <NVIC_GetPriorityGrouping>
 8000de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff ff8e 	bl	8000d0c <NVIC_EncodePriority>
 8000df0:	4602      	mov	r2, r0
 8000df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df6:	4611      	mov	r1, r2
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <NVIC_SetPriority>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff35 	bl	8000c84 <NVIC_EnableIRQ>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ffa2 	bl	8000d74 <SysTick_Config>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e52:	e14e      	b.n	80010f2 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8140 	beq.w	80010ec <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x40>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b12      	cmp	r3, #18
 8000e7a:	d123      	bne.n	8000ec4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	220f      	movs	r2, #15
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	6939      	ldr	r1, [r7, #16]
 8000ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0203 	and.w	r2, r3, #3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d00b      	beq.n	8000f18 <HAL_GPIO_Init+0xdc>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	2b11      	cmp	r3, #17
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b12      	cmp	r3, #18
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 809a 	beq.w	80010ec <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb8:	4b55      	ldr	r3, [pc, #340]	; (8001110 <HAL_GPIO_Init+0x2d4>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	4a54      	ldr	r2, [pc, #336]	; (8001110 <HAL_GPIO_Init+0x2d4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6193      	str	r3, [r2, #24]
 8000fc4:	4b52      	ldr	r3, [pc, #328]	; (8001110 <HAL_GPIO_Init+0x2d4>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fd0:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ffa:	d013      	beq.n	8001024 <HAL_GPIO_Init+0x1e8>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_GPIO_Init+0x2dc>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d00d      	beq.n	8001020 <HAL_GPIO_Init+0x1e4>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_GPIO_Init+0x2e0>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d007      	beq.n	800101c <HAL_GPIO_Init+0x1e0>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a44      	ldr	r2, [pc, #272]	; (8001120 <HAL_GPIO_Init+0x2e4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d101      	bne.n	8001018 <HAL_GPIO_Init+0x1dc>
 8001014:	2303      	movs	r3, #3
 8001016:	e006      	b.n	8001026 <HAL_GPIO_Init+0x1ea>
 8001018:	2305      	movs	r3, #5
 800101a:	e004      	b.n	8001026 <HAL_GPIO_Init+0x1ea>
 800101c:	2302      	movs	r3, #2
 800101e:	e002      	b.n	8001026 <HAL_GPIO_Init+0x1ea>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <HAL_GPIO_Init+0x1ea>
 8001024:	2300      	movs	r3, #0
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	f002 0203 	and.w	r2, r2, #3
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	4093      	lsls	r3, r2
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001036:	4937      	ldr	r1, [pc, #220]	; (8001114 <HAL_GPIO_Init+0x2d8>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001044:	4b37      	ldr	r3, [pc, #220]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001068:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001092:	4a24      	ldr	r2, [pc, #144]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_GPIO_Init+0x2e8>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f47f aea9 	bne.w	8000e54 <HAL_GPIO_Init+0x18>
  }
}
 8001102:	bf00      	nop
 8001104:	371c      	adds	r7, #28
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	48000400 	.word	0x48000400
 800111c:	48000800 	.word	0x48000800
 8001120:	48000c00 	.word	0x48000c00
 8001124:	40010400 	.word	0x40010400

08001128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e01d      	b.n	8001176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f002 fa72 	bl	8003638 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3304      	adds	r3, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4610      	mov	r0, r2
 8001168:	f000 faa6 	bl	80016b8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e01d      	b.n	80011cc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <HAL_TIM_OC_Init+0x2c>
  {   
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f815 	bl	80011d4 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2202      	movs	r2, #2
 80011ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4610      	mov	r0, r2
 80011be:	f000 fa7b 	bl	80016b8 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e01d      	b.n	8001236 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d106      	bne.n	8001214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f815 	bl	800123e <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3304      	adds	r3, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f000 fa46 	bl	80016b8 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b02      	cmp	r3, #2
 8001266:	d122      	bne.n	80012ae <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b02      	cmp	r3, #2
 8001274:	d11b      	bne.n	80012ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f06f 0202 	mvn.w	r2, #2
 800127e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f9f1 	bl	800167c <HAL_TIM_IC_CaptureCallback>
 800129a:	e005      	b.n	80012a8 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f9e3 	bl	8001668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f9f4 	bl	8001690 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d122      	bne.n	8001302 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d11b      	bne.n	8001302 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f06f 0204 	mvn.w	r2, #4
 80012d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f9c7 	bl	800167c <HAL_TIM_IC_CaptureCallback>
 80012ee:	e005      	b.n	80012fc <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f9b9 	bl	8001668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f9ca 	bl	8001690 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b08      	cmp	r3, #8
 800130e:	d122      	bne.n	8001356 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11b      	bne.n	8001356 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 0208 	mvn.w	r2, #8
 8001326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2204      	movs	r2, #4
 800132c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f99d 	bl	800167c <HAL_TIM_IC_CaptureCallback>
 8001342:	e005      	b.n	8001350 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f98f 	bl	8001668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f9a0 	bl	8001690 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b10      	cmp	r3, #16
 8001362:	d122      	bne.n	80013aa <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b10      	cmp	r3, #16
 8001370:	d11b      	bne.n	80013aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f06f 0210 	mvn.w	r2, #16
 800137a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2208      	movs	r2, #8
 8001380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f973 	bl	800167c <HAL_TIM_IC_CaptureCallback>
 8001396:	e005      	b.n	80013a4 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f965 	bl	8001668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f976 	bl	8001690 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d10e      	bne.n	80013d6 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d107      	bne.n	80013d6 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f06f 0201 	mvn.w	r2, #1
 80013ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f93f 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e0:	2b80      	cmp	r3, #128	; 0x80
 80013e2:	d10e      	bne.n	8001402 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	2b80      	cmp	r3, #128	; 0x80
 80013f0:	d107      	bne.n	8001402 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 fe6d 	bl	80020dc <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001410:	d10e      	bne.n	8001430 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141c:	2b80      	cmp	r3, #128	; 0x80
 800141e:	d107      	bne.n	8001430 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001428:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fe60 	bl	80020f0 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143a:	2b40      	cmp	r3, #64	; 0x40
 800143c:	d10e      	bne.n	800145c <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	d107      	bne.n	800145c <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001454:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f924 	bl	80016a4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	2b20      	cmp	r3, #32
 8001468:	d10e      	bne.n	8001488 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	2b20      	cmp	r3, #32
 8001476:	d107      	bne.n	8001488 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f06f 0220 	mvn.w	r2, #32
 8001480:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fe20 	bl	80020c8 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d101      	bne.n	80014ac <HAL_TIM_ConfigClockSource+0x1c>
 80014a8:	2302      	movs	r3, #2
 80014aa:	e0cf      	b.n	800164c <HAL_TIM_ConfigClockSource+0x1bc>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80014ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80014d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68fa      	ldr	r2, [r7, #12]
 80014de:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b40      	cmp	r3, #64	; 0x40
 80014e6:	d07c      	beq.n	80015e2 <HAL_TIM_ConfigClockSource+0x152>
 80014e8:	2b40      	cmp	r3, #64	; 0x40
 80014ea:	d80f      	bhi.n	800150c <HAL_TIM_ConfigClockSource+0x7c>
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	f000 808f 	beq.w	8001610 <HAL_TIM_ConfigClockSource+0x180>
 80014f2:	2b10      	cmp	r3, #16
 80014f4:	d803      	bhi.n	80014fe <HAL_TIM_ConfigClockSource+0x6e>
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8083 	beq.w	8001602 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 80014fc:	e09d      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80014fe:	2b20      	cmp	r3, #32
 8001500:	f000 808d 	beq.w	800161e <HAL_TIM_ConfigClockSource+0x18e>
 8001504:	2b30      	cmp	r3, #48	; 0x30
 8001506:	f000 8091 	beq.w	800162c <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 800150a:	e096      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 800150c:	2b70      	cmp	r3, #112	; 0x70
 800150e:	d018      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0xb2>
 8001510:	2b70      	cmp	r3, #112	; 0x70
 8001512:	d804      	bhi.n	800151e <HAL_TIM_ConfigClockSource+0x8e>
 8001514:	2b50      	cmp	r3, #80	; 0x50
 8001516:	d044      	beq.n	80015a2 <HAL_TIM_ConfigClockSource+0x112>
 8001518:	2b60      	cmp	r3, #96	; 0x60
 800151a:	d052      	beq.n	80015c2 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 800151c:	e08d      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 800151e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001522:	d003      	beq.n	800152c <HAL_TIM_ConfigClockSource+0x9c>
 8001524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001528:	d028      	beq.n	800157c <HAL_TIM_ConfigClockSource+0xec>
    break;    
 800152a:	e086      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153a:	f023 0307 	bic.w	r3, r3, #7
 800153e:	6093      	str	r3, [r2, #8]
    break;
 8001540:	e07b      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	f000 fbb2 	bl	8001cba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001564:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001568:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001570:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	609a      	str	r2, [r3, #8]
    break;
 800157a:	e05e      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	6899      	ldr	r1, [r3, #8]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f000 fb95 	bl	8001cba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800159e:	609a      	str	r2, [r3, #8]
    break;
 80015a0:	e04b      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	6859      	ldr	r1, [r3, #4]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f000 fafc 	bl	8001bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2150      	movs	r1, #80	; 0x50
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 fb5d 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 80015c0:	e03b      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f000 fb1f 	bl	8001c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2160      	movs	r1, #96	; 0x60
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fb4d 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 80015e0:	e02b      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6859      	ldr	r1, [r3, #4]
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	461a      	mov	r2, r3
 80015f0:	f000 fadc 	bl	8001bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2140      	movs	r1, #64	; 0x40
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fb3d 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 8001600:	e01b      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fb36 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 800160e:	e014      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2110      	movs	r1, #16
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fb2f 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 800161c:	e00d      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2120      	movs	r1, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fb28 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 800162a:	e006      	b.n	800163a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2130      	movs	r1, #48	; 0x30
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fb21 	bl	8001c7a <TIM_ITRx_SetConfig>
    break;
 8001638:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a32      	ldr	r2, [pc, #200]	; (8001798 <TIM_Base_SetConfig+0xe0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d007      	beq.n	80016e4 <TIM_Base_SetConfig+0x2c>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016da:	d003      	beq.n	80016e4 <TIM_Base_SetConfig+0x2c>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a2f      	ldr	r2, [pc, #188]	; (800179c <TIM_Base_SetConfig+0xe4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d108      	bne.n	80016f6 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a27      	ldr	r2, [pc, #156]	; (8001798 <TIM_Base_SetConfig+0xe0>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <TIM_Base_SetConfig+0x6e>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d00f      	beq.n	8001726 <TIM_Base_SetConfig+0x6e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a24      	ldr	r2, [pc, #144]	; (800179c <TIM_Base_SetConfig+0xe4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00b      	beq.n	8001726 <TIM_Base_SetConfig+0x6e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a23      	ldr	r2, [pc, #140]	; (80017a0 <TIM_Base_SetConfig+0xe8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <TIM_Base_SetConfig+0x6e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <TIM_Base_SetConfig+0xec>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d003      	beq.n	8001726 <TIM_Base_SetConfig+0x6e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <TIM_Base_SetConfig+0xf0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d108      	bne.n	8001738 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800172c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <TIM_Base_SetConfig+0xe0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d00b      	beq.n	800177c <TIM_Base_SetConfig+0xc4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <TIM_Base_SetConfig+0xe8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d007      	beq.n	800177c <TIM_Base_SetConfig+0xc4>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <TIM_Base_SetConfig+0xec>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d003      	beq.n	800177c <TIM_Base_SetConfig+0xc4>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <TIM_Base_SetConfig+0xf0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d103      	bne.n	8001784 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	615a      	str	r2, [r3, #20]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40012c00 	.word	0x40012c00
 800179c:	40000400 	.word	0x40000400
 80017a0:	40014000 	.word	0x40014000
 80017a4:	40014400 	.word	0x40014400
 80017a8:	40014800 	.word	0x40014800

080017ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	f023 0201 	bic.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0303 	bic.w	r3, r3, #3
 80017f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f023 0302 	bic.w	r3, r3, #2
 8001804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4313      	orrs	r3, r2
 800180e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a28      	ldr	r2, [pc, #160]	; (80018b4 <TIM_OC1_SetConfig+0x108>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00b      	beq.n	8001830 <TIM_OC1_SetConfig+0x84>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <TIM_OC1_SetConfig+0x10c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <TIM_OC1_SetConfig+0x84>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a26      	ldr	r2, [pc, #152]	; (80018bc <TIM_OC1_SetConfig+0x110>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d003      	beq.n	8001830 <TIM_OC1_SetConfig+0x84>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a25      	ldr	r2, [pc, #148]	; (80018c0 <TIM_OC1_SetConfig+0x114>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d10c      	bne.n	800184a <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f023 0308 	bic.w	r3, r3, #8
 8001836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <TIM_OC1_SetConfig+0x108>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d00b      	beq.n	800186a <TIM_OC1_SetConfig+0xbe>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <TIM_OC1_SetConfig+0x10c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d007      	beq.n	800186a <TIM_OC1_SetConfig+0xbe>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a17      	ldr	r2, [pc, #92]	; (80018bc <TIM_OC1_SetConfig+0x110>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d003      	beq.n	800186a <TIM_OC1_SetConfig+0xbe>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <TIM_OC1_SetConfig+0x114>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d111      	bne.n	800188e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	621a      	str	r2, [r3, #32]
} 
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40014000 	.word	0x40014000
 80018bc:	40014400 	.word	0x40014400
 80018c0:	40014800 	.word	0x40014800

080018c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	f023 0210 	bic.w	r2, r3, #16
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f023 0320 	bic.w	r3, r3, #32
 800191e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <TIM_OC2_SetConfig+0xfc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d10d      	bne.n	8001950 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800193a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4313      	orrs	r3, r2
 8001946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800194e:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <TIM_OC2_SetConfig+0xfc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d00b      	beq.n	8001970 <TIM_OC2_SetConfig+0xac>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <TIM_OC2_SetConfig+0x100>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d007      	beq.n	8001970 <TIM_OC2_SetConfig+0xac>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a19      	ldr	r2, [pc, #100]	; (80019c8 <TIM_OC2_SetConfig+0x104>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d003      	beq.n	8001970 <TIM_OC2_SetConfig+0xac>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a18      	ldr	r2, [pc, #96]	; (80019cc <TIM_OC2_SetConfig+0x108>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d113      	bne.n	8001998 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001976:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800197e:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	621a      	str	r2, [r3, #32]
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40014000 	.word	0x40014000
 80019c8:	40014400 	.word	0x40014400
 80019cc:	40014800 	.word	0x40014800

080019d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <TIM_OC3_SetConfig+0xf8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10d      	bne.n	8001a5a <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a58:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a1a      	ldr	r2, [pc, #104]	; (8001ac8 <TIM_OC3_SetConfig+0xf8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00b      	beq.n	8001a7a <TIM_OC3_SetConfig+0xaa>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a19      	ldr	r2, [pc, #100]	; (8001acc <TIM_OC3_SetConfig+0xfc>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <TIM_OC3_SetConfig+0xaa>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <TIM_OC3_SetConfig+0x100>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d003      	beq.n	8001a7a <TIM_OC3_SetConfig+0xaa>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <TIM_OC3_SetConfig+0x104>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d113      	bne.n	8001aa2 <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a88:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	621a      	str	r2, [r3, #32]
}
 8001abc:	bf00      	nop
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40014000 	.word	0x40014000
 8001ad0:	40014400 	.word	0x40014400
 8001ad4:	40014800 	.word	0x40014800

08001ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b16:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b1e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b32:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	031b      	lsls	r3, r3, #12
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a16      	ldr	r2, [pc, #88]	; (8001b9c <TIM_OC4_SetConfig+0xc4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00b      	beq.n	8001b60 <TIM_OC4_SetConfig+0x88>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a15      	ldr	r2, [pc, #84]	; (8001ba0 <TIM_OC4_SetConfig+0xc8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d007      	beq.n	8001b60 <TIM_OC4_SetConfig+0x88>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <TIM_OC4_SetConfig+0xcc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d003      	beq.n	8001b60 <TIM_OC4_SetConfig+0x88>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <TIM_OC4_SetConfig+0xd0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d109      	bne.n	8001b74 <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b66:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	621a      	str	r2, [r3, #32]
}
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40012c00 	.word	0x40012c00
 8001ba0:	40014000 	.word	0x40014000
 8001ba4:	40014400 	.word	0x40014400
 8001ba8:	40014800 	.word	0x40014800

08001bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f023 0201 	bic.w	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f023 030a 	bic.w	r3, r3, #10
 8001bf0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	621a      	str	r2, [r3, #32]
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b087      	sub	sp, #28
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f023 0210 	bic.w	r2, r3, #16
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	031b      	lsls	r3, r3, #12
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	011b      	lsls	r3, r3, #4
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	621a      	str	r2, [r3, #32]
}
 8001c6e:	bf00      	nop
 8001c70:	371c      	adds	r7, #28
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b085      	sub	sp, #20
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	460b      	mov	r3, r1
 8001c84:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c96:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	f043 0307 	orr.w	r3, r3, #7
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	609a      	str	r2, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001cd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	021a      	lsls	r2, r3, #8
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	609a      	str	r2, [r3, #8]
} 
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_TIM_OC_ConfigChannel+0x1a>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e06c      	b.n	8001df4 <HAL_TIM_OC_ConfigChannel+0xf4>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  switch (Channel)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b14      	cmp	r3, #20
 8001d2e:	d857      	bhi.n	8001de0 <HAL_TIM_OC_ConfigChannel+0xe0>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <HAL_TIM_OC_ConfigChannel+0x38>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d8d 	.word	0x08001d8d
 8001d3c:	08001de1 	.word	0x08001de1
 8001d40:	08001de1 	.word	0x08001de1
 8001d44:	08001de1 	.word	0x08001de1
 8001d48:	08001d9b 	.word	0x08001d9b
 8001d4c:	08001de1 	.word	0x08001de1
 8001d50:	08001de1 	.word	0x08001de1
 8001d54:	08001de1 	.word	0x08001de1
 8001d58:	08001da9 	.word	0x08001da9
 8001d5c:	08001de1 	.word	0x08001de1
 8001d60:	08001de1 	.word	0x08001de1
 8001d64:	08001de1 	.word	0x08001de1
 8001d68:	08001db7 	.word	0x08001db7
 8001d6c:	08001de1 	.word	0x08001de1
 8001d70:	08001de1 	.word	0x08001de1
 8001d74:	08001de1 	.word	0x08001de1
 8001d78:	08001dc5 	.word	0x08001dc5
 8001d7c:	08001de1 	.word	0x08001de1
 8001d80:	08001de1 	.word	0x08001de1
 8001d84:	08001de1 	.word	0x08001de1
 8001d88:	08001dd3 	.word	0x08001dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fd0a 	bl	80017ac <TIM_OC1_SetConfig>
    }
    break;
 8001d98:	e023      	b.n	8001de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68b9      	ldr	r1, [r7, #8]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fd8f 	bl	80018c4 <TIM_OC2_SetConfig>
    }
    break;
 8001da6:	e01c      	b.n	8001de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68b9      	ldr	r1, [r7, #8]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fe0e 	bl	80019d0 <TIM_OC3_SetConfig>
    }
    break;
 8001db4:	e015      	b.n	8001de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe8b 	bl	8001ad8 <TIM_OC4_SetConfig>
    }
    break;
 8001dc2:	e00e      	b.n	8001de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f99a 	bl	8002104 <TIM_OC5_SetConfig>
    }
    break;
 8001dd0:	e007      	b.n	8001de2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68b9      	ldr	r1, [r7, #8]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f9f7 	bl	80021cc <TIM_OC6_SetConfig>
    }
    break;
 8001dde:	e000      	b.n	8001de2 <HAL_TIM_OC_ConfigChannel+0xe2>
        
    default:
    break;    
 8001de0:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim); 
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e105      	b.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x226>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2202      	movs	r2, #2
 8001e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b14      	cmp	r3, #20
 8001e2a:	f200 80f0 	bhi.w	800200e <HAL_TIM_PWM_ConfigChannel+0x212>
 8001e2e:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e34:	08001e89 	.word	0x08001e89
 8001e38:	0800200f 	.word	0x0800200f
 8001e3c:	0800200f 	.word	0x0800200f
 8001e40:	0800200f 	.word	0x0800200f
 8001e44:	08001ec9 	.word	0x08001ec9
 8001e48:	0800200f 	.word	0x0800200f
 8001e4c:	0800200f 	.word	0x0800200f
 8001e50:	0800200f 	.word	0x0800200f
 8001e54:	08001f0b 	.word	0x08001f0b
 8001e58:	0800200f 	.word	0x0800200f
 8001e5c:	0800200f 	.word	0x0800200f
 8001e60:	0800200f 	.word	0x0800200f
 8001e64:	08001f4b 	.word	0x08001f4b
 8001e68:	0800200f 	.word	0x0800200f
 8001e6c:	0800200f 	.word	0x0800200f
 8001e70:	0800200f 	.word	0x0800200f
 8001e74:	08001f8d 	.word	0x08001f8d
 8001e78:	0800200f 	.word	0x0800200f
 8001e7c:	0800200f 	.word	0x0800200f
 8001e80:	0800200f 	.word	0x0800200f
 8001e84:	08001fcd 	.word	0x08001fcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fc8c 	bl	80017ac <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0208 	orr.w	r2, r2, #8
 8001ea2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6999      	ldr	r1, [r3, #24]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	619a      	str	r2, [r3, #24]
    }
    break;
 8001ec6:	e0a3      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fcf8 	bl	80018c4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee2:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6999      	ldr	r1, [r3, #24]
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	021a      	lsls	r2, r3, #8
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	619a      	str	r2, [r3, #24]
    }
    break;
 8001f08:	e082      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68b9      	ldr	r1, [r7, #8]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fd5d 	bl	80019d0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0208 	orr.w	r2, r2, #8
 8001f24:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0204 	bic.w	r2, r2, #4
 8001f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69d9      	ldr	r1, [r3, #28]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	61da      	str	r2, [r3, #28]
    }
    break;
 8001f48:	e062      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fdc1 	bl	8001ad8 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f64:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69d9      	ldr	r1, [r3, #28]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	61da      	str	r2, [r3, #28]
    }
    break;
 8001f8a:	e041      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f8b6 	bl	8002104 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0204 	bic.w	r2, r2, #4
 8001fb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8001fca:	e021      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68b9      	ldr	r1, [r7, #8]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f8fa 	bl	80021cc <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	021a      	lsls	r2, r3, #8
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 800200c:	e000      	b.n	8002010 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800200e:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop

0800202c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e038      	b.n	80020b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a18      	ldr	r2, [pc, #96]	; (80020c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800206c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800207e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002090:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	4313      	orrs	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
} 
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002142:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002154:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4313      	orrs	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <TIM_OC5_SetConfig+0xb8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00b      	beq.n	8002182 <TIM_OC5_SetConfig+0x7e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <TIM_OC5_SetConfig+0xbc>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <TIM_OC5_SetConfig+0x7e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <TIM_OC5_SetConfig+0xc0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_OC5_SetConfig+0x7e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <TIM_OC5_SetConfig+0xc4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d109      	bne.n	8002196 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002188:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	621a      	str	r2, [r3, #32]
}
 80021b0:	bf00      	nop
 80021b2:	371c      	adds	r7, #28
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40014000 	.word	0x40014000
 80021c4:	40014400 	.word	0x40014400
 80021c8:	40014800 	.word	0x40014800

080021cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800221e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	051b      	lsls	r3, r3, #20
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <TIM_OC6_SetConfig+0xbc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00b      	beq.n	800224c <TIM_OC6_SetConfig+0x80>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <TIM_OC6_SetConfig+0xc0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d007      	beq.n	800224c <TIM_OC6_SetConfig+0x80>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <TIM_OC6_SetConfig+0xc4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_OC6_SetConfig+0x80>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <TIM_OC6_SetConfig+0xc8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d109      	bne.n	8002260 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	029b      	lsls	r3, r3, #10
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4313      	orrs	r3, r2
 800225e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	621a      	str	r2, [r3, #32]
} 
 800227a:	bf00      	nop
 800227c:	371c      	adds	r7, #28
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40014000 	.word	0x40014000
 8002290:	40014400 	.word	0x40014400
 8002294:	40014800 	.word	0x40014800

08002298 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002298:	b480      	push	{r7}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa93 f3a3 	rbit	r3, r3
 80022b2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2103      	movs	r1, #3
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	431a      	orrs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	601a      	str	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002322:	b480      	push	{r7}
 8002324:	b089      	sub	sp, #36	; 0x24
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	613b      	str	r3, [r7, #16]
  return(result);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2103      	movs	r1, #3
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	61bb      	str	r3, [r7, #24]
  return(result);
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	431a      	orrs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002370:	bf00      	nop
 8002372:	3724      	adds	r7, #36	; 0x24
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	613b      	str	r3, [r7, #16]
  return(result);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2103      	movs	r1, #3
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	431a      	orrs	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	60da      	str	r2, [r3, #12]
}
 80023ca:	bf00      	nop
 80023cc:	3724      	adds	r7, #36	; 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b089      	sub	sp, #36	; 0x24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	613b      	str	r3, [r7, #16]
  return(result);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	fab3 f383 	clz	r3, r3
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	210f      	movs	r1, #15
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	fab3 f383 	clz	r3, r3
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002424:	bf00      	nop
 8002426:	3724      	adds	r7, #36	; 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	0a1b      	lsrs	r3, r3, #8
 8002444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	613b      	str	r3, [r7, #16]
  return(result);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	210f      	movs	r1, #15
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa93 f3a3 	rbit	r3, r3
 800246c:	61bb      	str	r3, [r7, #24]
  return(result);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	431a      	orrs	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002482:	bf00      	nop
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b088      	sub	sp, #32
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002498:	2300      	movs	r3, #0
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	613b      	str	r3, [r7, #16]
  return(result);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80024b6:	e048      	b.n	800254a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2101      	movs	r1, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03a      	beq.n	8002544 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	461a      	mov	r2, r3
 80024d4:	69b9      	ldr	r1, [r7, #24]
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fede 	bl	8002298 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d003      	beq.n	80024ec <LL_GPIO_Init+0x5e>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d106      	bne.n	80024fa <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	461a      	mov	r2, r3
 80024f2:	69b9      	ldr	r1, [r7, #24]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ff14 	bl	8002322 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	461a      	mov	r2, r3
 8002500:	69b9      	ldr	r1, [r7, #24]
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ff3a 	bl	800237c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d119      	bne.n	8002544 <LL_GPIO_Init+0xb6>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	60bb      	str	r3, [r7, #8]
  return(result);
 800251c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	2b07      	cmp	r3, #7
 8002524:	d807      	bhi.n	8002536 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	461a      	mov	r2, r3
 800252c:	69b9      	ldr	r1, [r7, #24]
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ff51 	bl	80023d6 <LL_GPIO_SetAFPin_0_7>
 8002534:	e006      	b.n	8002544 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	461a      	mov	r2, r3
 800253c:	69b9      	ldr	r1, [r7, #24]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff76 	bl	8002430 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1af      	bne.n	80024b8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d003      	beq.n	8002568 <LL_GPIO_Init+0xda>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d107      	bne.n	8002578 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	461a      	mov	r2, r3
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff febd 	bl	80022f2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <LL_RCC_HSI_IsReady+0x20>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b02      	cmp	r3, #2
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000

080025a8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <LL_RCC_LSE_IsReady+0x20>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000

080025cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <LL_RCC_GetSysClkSource+0x18>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 030c 	and.w	r3, r3, #12
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <LL_RCC_GetAHBPrescaler+0x18>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002608:	4b04      	ldr	r3, [pc, #16]	; (800261c <LL_RCC_GetAPB1Prescaler+0x18>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <LL_RCC_GetUSARTClockSource+0x28>)
 8002646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002648:	2103      	movs	r1, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	401a      	ands	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	061b      	lsls	r3, r3, #24
 8002656:	4313      	orrs	r3, r2
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40021000 	.word	0x40021000

08002668 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <LL_RCC_PLL_GetMainSource+0x18>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000

08002684 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <LL_RCC_PLL_GetMultiplicator+0x18>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002690:	4618      	mov	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000

080026a0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <LL_RCC_PLL_GetPrediv+0x18>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f003 030f 	and.w	r3, r3, #15
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000

080026bc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80026c4:	f000 f860 	bl	8002788 <RCC_GetSystemClockFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f87a 	bl	80027cc <RCC_GetHCLKClockFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f888 	bl	80027f8 <RCC_GetPCLK1ClockFreq>
 80026e8:	4602      	mov	r2, r0
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f894 	bl	8002820 <RCC_GetPCLK2ClockFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60da      	str	r2, [r3, #12]
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d12a      	bne.n	8002770 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff8e 	bl	800263c <LL_RCC_GetUSARTClockSource>
 8002720:	4603      	mov	r3, r0
 8002722:	2b02      	cmp	r3, #2
 8002724:	d00f      	beq.n	8002746 <LL_RCC_GetUSARTClockFreq+0x3e>
 8002726:	2b03      	cmp	r3, #3
 8002728:	d005      	beq.n	8002736 <LL_RCC_GetUSARTClockFreq+0x2e>
 800272a:	2b01      	cmp	r3, #1
 800272c:	d114      	bne.n	8002758 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800272e:	f000 f82b 	bl	8002788 <RCC_GetSystemClockFreq>
 8002732:	60f8      	str	r0, [r7, #12]
        break;
 8002734:	e021      	b.n	800277a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002736:	f7ff ff25 	bl	8002584 <LL_RCC_HSI_IsReady>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d019      	beq.n	8002774 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8002742:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002744:	e016      	b.n	8002774 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002746:	f7ff ff2f 	bl	80025a8 <LL_RCC_LSE_IsReady>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8002750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002754:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002756:	e00f      	b.n	8002778 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002758:	f000 f816 	bl	8002788 <RCC_GetSystemClockFreq>
 800275c:	4603      	mov	r3, r0
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f834 	bl	80027cc <RCC_GetHCLKClockFreq>
 8002764:	4603      	mov	r3, r0
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f846 	bl	80027f8 <RCC_GetPCLK1ClockFreq>
 800276c:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800276e:	e004      	b.n	800277a <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8002778:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	007a1200 	.word	0x007a1200

08002788 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002792:	f7ff ff1b 	bl	80025cc <LL_RCC_GetSysClkSource>
 8002796:	4603      	mov	r3, r0
 8002798:	2b04      	cmp	r3, #4
 800279a:	d006      	beq.n	80027aa <RCC_GetSystemClockFreq+0x22>
 800279c:	2b08      	cmp	r3, #8
 800279e:	d007      	beq.n	80027b0 <RCC_GetSystemClockFreq+0x28>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <RCC_GetSystemClockFreq+0x40>)
 80027a6:	607b      	str	r3, [r7, #4]
      break;
 80027a8:	e009      	b.n	80027be <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <RCC_GetSystemClockFreq+0x40>)
 80027ac:	607b      	str	r3, [r7, #4]
      break;
 80027ae:	e006      	b.n	80027be <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80027b0:	f000 f84a 	bl	8002848 <RCC_PLL_GetFreqDomain_SYS>
 80027b4:	6078      	str	r0, [r7, #4]
      break;
 80027b6:	e002      	b.n	80027be <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <RCC_GetSystemClockFreq+0x40>)
 80027ba:	607b      	str	r3, [r7, #4]
      break;
 80027bc:	bf00      	nop
  }

  return frequency;
 80027be:	687b      	ldr	r3, [r7, #4]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	007a1200 	.word	0x007a1200

080027cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027d4:	f7ff ff08 	bl	80025e8 <LL_RCC_GetAHBPrescaler>
 80027d8:	4603      	mov	r3, r0
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <RCC_GetHCLKClockFreq+0x28>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	40d3      	lsrs	r3, r2
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	08005f3c 	.word	0x08005f3c

080027f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002800:	f7ff ff00 	bl	8002604 <LL_RCC_GetAPB1Prescaler>
 8002804:	4603      	mov	r3, r0
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <RCC_GetPCLK1ClockFreq+0x24>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	461a      	mov	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	40d3      	lsrs	r3, r2
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	08005f4c 	.word	0x08005f4c

08002820 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002828:	f7ff fefa 	bl	8002620 <LL_RCC_GetAPB2Prescaler>
 800282c:	4603      	mov	r3, r0
 800282e:	0adb      	lsrs	r3, r3, #11
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <RCC_GetPCLK2ClockFreq+0x24>)
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	461a      	mov	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	40d3      	lsrs	r3, r2
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	08005f4c 	.word	0x08005f4c

08002848 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002856:	f7ff ff07 	bl	8002668 <LL_RCC_PLL_GetMainSource>
 800285a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d003      	beq.n	8002870 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002868:	e005      	b.n	8002876 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800286c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800286e:	e005      	b.n	800287c <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002872:	60fb      	str	r3, [r7, #12]
      break;
 8002874:	e002      	b.n	800287c <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8002878:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800287a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800287c:	f7ff ff10 	bl	80026a0 <LL_RCC_PLL_GetPrediv>
 8002880:	4603      	mov	r3, r0
 8002882:	3301      	adds	r3, #1
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	fbb2 f4f3 	udiv	r4, r2, r3
 800288a:	f7ff fefb 	bl	8002684 <LL_RCC_PLL_GetMultiplicator>
 800288e:	4603      	mov	r3, r0
 8002890:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002894:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002898:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	fa92 f2a2 	rbit	r2, r2
 80028a0:	603a      	str	r2, [r7, #0]
  return(result);
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	fab2 f282 	clz	r2, r2
 80028a8:	40d3      	lsrs	r3, r2
 80028aa:	3302      	adds	r3, #2
 80028ac:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	003d0900 	.word	0x003d0900
 80028bc:	007a1200 	.word	0x007a1200

080028c0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	605a      	str	r2, [r3, #4]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	609a      	str	r2, [r3, #8]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8002932:	b4b0      	push	{r4, r5, r7}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8002940:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8002942:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294a:	d114      	bne.n	8002976 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	005a      	lsls	r2, r3, #1
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	441a      	add	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8002960:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8002964:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002966:	086b      	lsrs	r3, r5, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8002974:	e00a      	b.n	800298c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	085a      	lsrs	r2, r3, #1
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	441a      	add	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	b29b      	uxth	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	60da      	str	r2, [r3, #12]
}
 800298c:	bf00      	nop
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bcb0      	pop	{r4, r5, r7}
 8002994:	4770      	bx	lr
	...

08002998 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff88 	bl	80028c0 <LL_USART_IsEnabled>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d14e      	bne.n	8002a54 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <LL_USART_Init+0xc8>)
 80029bc:	4013      	ands	r3, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6851      	ldr	r1, [r2, #4]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	4311      	orrs	r1, r2
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	6912      	ldr	r2, [r2, #16]
 80029cc:	4311      	orrs	r1, r2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	6992      	ldr	r2, [r2, #24]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	4619      	mov	r1, r3
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff80 	bl	80028e6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff8d 	bl	800290c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <LL_USART_Init+0xcc>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d104      	bne.n	8002a04 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fe84 	bl	8002708 <LL_RCC_GetUSARTClockFreq>
 8002a00:	61b8      	str	r0, [r7, #24]
 8002a02:	e016      	b.n	8002a32 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <LL_USART_Init+0xd0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d107      	bne.n	8002a1c <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002a0c:	f107 0308 	add.w	r3, r7, #8
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fe53 	bl	80026bc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e00a      	b.n	8002a32 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <LL_USART_Init+0xd4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d106      	bne.n	8002a32 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe47 	bl	80026bc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	699a      	ldr	r2, [r3, #24]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69b9      	ldr	r1, [r7, #24]
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ff6f 	bl	8002932 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3720      	adds	r7, #32
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	efff69f3 	.word	0xefff69f3
 8002a64:	40013800 	.word	0x40013800
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	40004800 	.word	0x40004800

08002a70 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <LL_InitTick+0x30>)
 8002a84:	3b01      	subs	r3, #1
 8002a86:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <LL_InitTick+0x30>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <LL_InitTick+0x30>)
 8002a90:	2205      	movs	r2, #5
 8002a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002aac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ffdd 	bl	8002a70 <LL_InitTick>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <LL_mDelay+0x44>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002ace:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad6:	d00c      	beq.n	8002af2 <LL_mDelay+0x32>
  {
    Delay++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002ade:	e008      	b.n	8002af2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <LL_mDelay+0x44>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <LL_mDelay+0x32>
    {
      Delay--;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f3      	bne.n	8002ae0 <LL_mDelay+0x20>
    }
  }
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e010 	.word	0xe000e010

08002b08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <LL_SetSystemCoreClock+0x1c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000024 	.word	0x20000024

08002b28 <NVIC_EnableIRQ>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4907      	ldr	r1, [pc, #28]	; (8002b58 <NVIC_EnableIRQ+0x30>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2001      	movs	r0, #1
 8002b42:	fa00 f202 	lsl.w	r2, r0, r2
 8002b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <NVIC_SetPriority>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da0b      	bge.n	8002b88 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <NVIC_SetPriority+0x4c>)
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	3b04      	subs	r3, #4
 8002b7e:	0112      	lsls	r2, r2, #4
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	440b      	add	r3, r1
 8002b84:	761a      	strb	r2, [r3, #24]
}
 8002b86:	e009      	b.n	8002b9c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <NVIC_SetPriority+0x50>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	4907      	ldr	r1, [pc, #28]	; (8002bdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bce:	68fb      	ldr	r3, [r7, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	40021000 	.word	0x40021000

08002be0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002be4:	2001      	movs	r0, #1
 8002be6:	f7ff ffe3 	bl	8002bb0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8002bea:	2100      	movs	r1, #0
 8002bec:	2010      	movs	r0, #16
 8002bee:	f7ff ffb5 	bl	8002b5c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002bf2:	2010      	movs	r0, #16
 8002bf4:	f7ff ff98 	bl	8002b28 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2011      	movs	r0, #17
 8002bfc:	f7ff ffae 	bl	8002b5c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002c00:	2011      	movs	r0, #17
 8002c02:	f7ff ff91 	bl	8002b28 <NVIC_EnableIRQ>

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <LL_AHB1_GRP1_EnableClock>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	4907      	ldr	r1, [pc, #28]	; (8002c38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4013      	ands	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	40021000 	.word	0x40021000

08002c3c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c40:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c44:	f7ff ffe2 	bl	8002c0c <LL_AHB1_GRP1_EnableClock>

}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <LL_RCC_HSI_Enable>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <LL_RCC_HSI_Enable+0x1c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <LL_RCC_HSI_Enable+0x1c>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000

08002c6c <LL_RCC_HSI_IsReady>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <LL_RCC_HSI_IsReady+0x20>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40021000 	.word	0x40021000

08002c90 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4904      	ldr	r1, [pc, #16]	; (8002cb8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000

08002cbc <LL_RCC_SetSysClkSource>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <LL_RCC_SetSysClkSource+0x24>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 0203 	bic.w	r2, r3, #3
 8002ccc:	4904      	ldr	r1, [pc, #16]	; (8002ce0 <LL_RCC_SetSysClkSource+0x24>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <LL_RCC_GetSysClkSource>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <LL_RCC_GetSysClkSource+0x18>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 030c 	and.w	r3, r3, #12
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000

08002d00 <LL_RCC_SetAHBPrescaler>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <LL_RCC_SetAHBPrescaler+0x24>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <LL_RCC_SetAHBPrescaler+0x24>)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	604b      	str	r3, [r1, #4]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	40021000 	.word	0x40021000

08002d28 <LL_RCC_SetAPB1Prescaler>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	4904      	ldr	r1, [pc, #16]	; (8002d4c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40021000 	.word	0x40021000

08002d50 <LL_RCC_SetAPB2Prescaler>:
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40021000 	.word	0x40021000

08002d78 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <LL_FLASH_SetLatency+0x24>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f023 0207 	bic.w	r2, r3, #7
 8002d88:	4904      	ldr	r1, [pc, #16]	; (8002d9c <LL_FLASH_SetLatency+0x24>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40022000 	.word	0x40022000

08002da0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <LL_FLASH_GetLatency+0x18>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40022000 	.word	0x40022000

08002dbc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d106      	bne.n	8002dd8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <LL_SYSTICK_SetClkSource+0x34>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <LL_SYSTICK_SetClkSource+0x34>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002dd6:	e005      	b.n	8002de4 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <LL_SYSTICK_SetClkSource+0x34>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <LL_SYSTICK_SetClkSource+0x34>)
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	6013      	str	r3, [r2, #0]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002df4:	b5b0      	push	{r4, r5, r7, lr}
 8002df6:	f5ad 6d8a 	sub.w	sp, sp, #1104	; 0x450
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t tx_data[1000];
  uint8_t tx_data1[] = "Buffer capacity: ";
 8002dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e00:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <main+0x12c>)
 8002e02:	461c      	mov	r4, r3
 8002e04:	4615      	mov	r5, r2
 8002e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e0a:	682b      	ldr	r3, [r5, #0]
 8002e0c:	8023      	strh	r3, [r4, #0]
  uint8_t tx_data2[] = " bytes, occupied memory: ";
 8002e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e12:	4a44      	ldr	r2, [pc, #272]	; (8002f24 <main+0x130>)
 8002e14:	461c      	mov	r4, r3
 8002e16:	4615      	mov	r5, r2
 8002e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e20:	c403      	stmia	r4!, {r0, r1}
 8002e22:	8022      	strh	r2, [r4, #0]

  uint8_t tx_data3[] = " bytes, load [in %]: ";
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <main+0x134>)
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	4615      	mov	r5, r2
 8002e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e36:	6020      	str	r0, [r4, #0]
 8002e38:	3404      	adds	r4, #4
 8002e3a:	8021      	strh	r1, [r4, #0]

  uint8_t tx_data4[] = "%\r\n";
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	4a3a      	ldr	r2, [pc, #232]	; (8002f2c <main+0x138>)
 8002e42:	601a      	str	r2, [r3, #0]

  char buffer_size_string[4];
  char used_memory_string[10];
  char load_string[3];
  int buffer_size_int = DMA_USART2_BUFFER_SIZE;
 8002e44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e48:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
  sprintf(buffer_size_string, "%d", buffer_size_int);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8002e54:	4936      	ldr	r1, [pc, #216]	; (8002f30 <main+0x13c>)
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f998 	bl	800418c <siprintf>


  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 8002e5c:	4835      	ldr	r0, [pc, #212]	; (8002f34 <main+0x140>)
 8002e5e:	f000 ff73 	bl	8003d48 <USART2_RegisterCallback>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e62:	f7fd fe83 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e66:	f000 f86f 	bl	8002f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e6a:	f7ff fee7 	bl	8002c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e6e:	f7ff feb7 	bl	8002be0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002e72:	f000 ff7b 	bl	8003d6c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8002e76:	f000 faf5 	bl	8003464 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e7a:	f000 fb69 	bl	8003550 <MX_TIM3_Init>
	   */

  	  	  	  //type your code here:
		#if POLLING
	  	//Polling for new data, no interrupts
	  		USART2_CheckDmaReception();
 8002e7e:	f001 f86d 	bl	8003f5c <USART2_CheckDmaReception>
	  		LL_mDelay(10);
 8002e82:	200a      	movs	r0, #10
 8002e84:	f7ff fe1c 	bl	8002ac0 <LL_mDelay>
	  		LL_mDelay(1000);
		#endif

		//memset(tx_data,0,1000);

		sprintf(used_memory_string, "%d", occupied_memory);
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <main+0x144>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	4927      	ldr	r1, [pc, #156]	; (8002f30 <main+0x13c>)
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 f979 	bl	800418c <siprintf>
		//itoa(occupied_memory, used_memory_string, 10);
		gcvt(load, 4, load_string);
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <main+0x148>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb4a 	bl	8000538 <__aeabi_f2d>
 8002ea4:	4604      	mov	r4, r0
 8002ea6:	460d      	mov	r5, r1
 8002ea8:	1d3b      	adds	r3, r7, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	2004      	movs	r0, #4
 8002eae:	ec45 4b10 	vmov	d0, r4, r5
 8002eb2:	f001 f90d 	bl	80040d0 <gcvt>

		//strcat(tx_data, tx_data1);

		USART2_PutBuffer(tx_data1, sizeof(tx_data1));
 8002eb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eba:	2112      	movs	r1, #18
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 f82d 	bl	8003f1c <USART2_PutBuffer>
		USART2_PutBuffer(buffer_size_string, sizeof(buffer_size_string));
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	2104      	movs	r1, #4
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f827 	bl	8003f1c <USART2_PutBuffer>
		USART2_PutBuffer(tx_data2, sizeof(tx_data2));
 8002ece:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ed2:	211a      	movs	r1, #26
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f001 f821 	bl	8003f1c <USART2_PutBuffer>
		USART2_PutBuffer(used_memory_string, sizeof(used_memory_string));
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	210a      	movs	r1, #10
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 f81b 	bl	8003f1c <USART2_PutBuffer>
		USART2_PutBuffer(tx_data3, sizeof(tx_data3));
 8002ee6:	f107 031c 	add.w	r3, r7, #28
 8002eea:	2116      	movs	r1, #22
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 f815 	bl	8003f1c <USART2_PutBuffer>
		USART2_PutBuffer(load_string, sizeof(load_string));
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	2103      	movs	r1, #3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f810 	bl	8003f1c <USART2_PutBuffer>
		USART2_PutBuffer(tx_data4, sizeof(tx_data4));
 8002efc:	f107 0318 	add.w	r3, r7, #24
 8002f00:	2104      	movs	r1, #4
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 f80a 	bl	8003f1c <USART2_PutBuffer>
		strcat(tx_data, tx_data3);
		strcat(tx_data, load_string);
		strcat(tx_data, tx_data4);*/


		if(test)
 8002f08:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <main+0x14c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <main+0x124>
		{
			USART2_PutBuffer(test_message, sizeof(test_message));
 8002f10:	211c      	movs	r1, #28
 8002f12:	480c      	ldr	r0, [pc, #48]	; (8002f44 <main+0x150>)
 8002f14:	f001 f802 	bl	8003f1c <USART2_PutBuffer>
		}

		 //USART2_PutBuffer(tx_data, sizeof(tx_data));

	  	LL_mDelay(200);
 8002f18:	20c8      	movs	r0, #200	; 0xc8
 8002f1a:	f7ff fdd1 	bl	8002ac0 <LL_mDelay>
  {
 8002f1e:	e7ae      	b.n	8002e7e <main+0x8a>
 8002f20:	08005eec 	.word	0x08005eec
 8002f24:	08005f00 	.word	0x08005f00
 8002f28:	08005f1c 	.word	0x08005f1c
 8002f2c:	000a0d25 	.word	0x000a0d25
 8002f30:	08005ee8 	.word	0x08005ee8
 8002f34:	08002fb5 	.word	0x08002fb5
 8002f38:	200000d4 	.word	0x200000d4
 8002f3c:	200000d8 	.word	0x200000d8
 8002f40:	200000a8 	.word	0x200000a8
 8002f44:	20000008 	.word	0x20000008

08002f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff ff13 	bl	8002d78 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002f52:	f7ff ff25 	bl	8002da0 <LL_FLASH_GetLatency>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8002f5c:	f000 f8a2 	bl	80030a4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002f60:	f7ff fe74 	bl	8002c4c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002f64:	bf00      	nop
 8002f66:	f7ff fe81 	bl	8002c6c <LL_RCC_HSI_IsReady>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d1fa      	bne.n	8002f66 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002f70:	2010      	movs	r0, #16
 8002f72:	f7ff fe8d 	bl	8002c90 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7ff fec2 	bl	8002d00 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7ff fed3 	bl	8002d28 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7ff fee4 	bl	8002d50 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7ff fe97 	bl	8002cbc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002f8e:	bf00      	nop
 8002f90:	f7ff fea8 	bl	8002ce4 <LL_RCC_GetSysClkSource>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1fa      	bne.n	8002f90 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8002f9a:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <SystemClock_Config+0x68>)
 8002f9c:	f7ff fd82 	bl	8002aa4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002fa0:	2004      	movs	r0, #4
 8002fa2:	f7ff ff0b 	bl	8002dbc <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8002fa6:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <SystemClock_Config+0x68>)
 8002fa8:	f7ff fdae 	bl	8002b08 <LL_SetSystemCoreClock>
}
 8002fac:	bf00      	nop
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(const uint8_t* data, uint16_t len)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
	/* Process received data */

		// type your algorithm here:

	for(uint8_t i = 0; i < len; i++)
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	e05a      	b.n	800307c <proccesDmaData+0xc8>
	{
		if(*(data+i) == '#')
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b23      	cmp	r3, #35	; 0x23
 8002fd0:	d103      	bne.n	8002fda <proccesDmaData+0x26>
		{
			start = 1;
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <proccesDmaData+0xe0>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e011      	b.n	8002ffe <proccesDmaData+0x4a>
		}
		else if(*(data+i) == '$')
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	4413      	add	r3, r2
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b24      	cmp	r3, #36	; 0x24
 8002fe4:	d10b      	bne.n	8002ffe <proccesDmaData+0x4a>
		{
			start = 0;
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <proccesDmaData+0xe0>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
			count = 0;
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <proccesDmaData+0xe4>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
			lowL = 0;
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <proccesDmaData+0xe8>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
		    capL = 0;
 8002ff8:	4b29      	ldr	r3, [pc, #164]	; (80030a0 <proccesDmaData+0xec>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
		}

		if(start == 1)
 8002ffe:	4b25      	ldr	r3, [pc, #148]	; (8003094 <proccesDmaData+0xe0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d137      	bne.n	8003076 <proccesDmaData+0xc2>
		{
			count++;
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <proccesDmaData+0xe4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a22      	ldr	r2, [pc, #136]	; (8003098 <proccesDmaData+0xe4>)
 800300e:	6013      	str	r3, [r2, #0]
			if(count >= 34)
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <proccesDmaData+0xe4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b21      	cmp	r3, #33	; 0x21
 8003016:	dd0c      	ble.n	8003032 <proccesDmaData+0x7e>
			{
				start = 0;
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <proccesDmaData+0xe0>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
				count = 0;
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <proccesDmaData+0xe4>)
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
				lowL = 0;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <proccesDmaData+0xe8>)
 8003026:	2200      	movs	r2, #0
 8003028:	601a      	str	r2, [r3, #0]
				capL = 0;
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <proccesDmaData+0xec>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e021      	b.n	8003076 <proccesDmaData+0xc2>
			}
			else
			{
				if(*(data+i) > 96 && *(data+i) < 123)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b60      	cmp	r3, #96	; 0x60
 800303c:	d90a      	bls.n	8003054 <proccesDmaData+0xa0>
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b7a      	cmp	r3, #122	; 0x7a
 8003048:	d804      	bhi.n	8003054 <proccesDmaData+0xa0>
				{
					lowL++;
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <proccesDmaData+0xe8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3301      	adds	r3, #1
 8003050:	4a12      	ldr	r2, [pc, #72]	; (800309c <proccesDmaData+0xe8>)
 8003052:	6013      	str	r3, [r2, #0]
				}
				if(*(data+i) > 64 && *(data+i) < 91)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d90a      	bls.n	8003076 <proccesDmaData+0xc2>
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b5a      	cmp	r3, #90	; 0x5a
 800306a:	d804      	bhi.n	8003076 <proccesDmaData+0xc2>
				{
					capL++;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <proccesDmaData+0xec>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	4a0b      	ldr	r2, [pc, #44]	; (80030a0 <proccesDmaData+0xec>)
 8003074:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < len; i++)
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	3301      	adds	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	b29b      	uxth	r3, r3
 8003080:	887a      	ldrh	r2, [r7, #2]
 8003082:	429a      	cmp	r2, r3
 8003084:	d89f      	bhi.n	8002fc6 <proccesDmaData+0x12>

		}


	}
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200000ac 	.word	0x200000ac
 8003098:	200000b0 	.word	0x200000b0
 800309c:	200000b8 	.word	0x200000b8
 80030a0:	200000b4 	.word	0x200000b4

080030a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_MspInit+0x44>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_MspInit+0x44>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6193      	str	r3, [r2, #24]
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <HAL_MspInit+0x44>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_MspInit+0x44>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	4a08      	ldr	r2, [pc, #32]	; (80030f8 <HAL_MspInit+0x44>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	61d3      	str	r3, [r2, #28]
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_MspInit+0x44>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	3b01      	subs	r3, #1
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <LL_DMA_DisableChannel+0x3c>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
 800310e:	461a      	mov	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	3a01      	subs	r2, #1
 800311a:	4907      	ldr	r1, [pc, #28]	; (8003138 <LL_DMA_DisableChannel+0x3c>)
 800311c:	5c8a      	ldrb	r2, [r1, r2]
 800311e:	4611      	mov	r1, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	440a      	add	r2, r1
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6013      	str	r3, [r2, #0]
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	08005f34 	.word	0x08005f34

0800313c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003174:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031c2:	605a      	str	r2, [r3, #4]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031de:	605a      	str	r2, [r3, #4]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031fa:	605a      	str	r2, [r3, #4]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f003 0310 	and.w	r3, r3, #16
 8003218:	2b10      	cmp	r3, #16
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	bf0c      	ite	eq
 8003242:	2301      	moveq	r3, #1
 8003244:	2300      	movne	r3, #0
 8003246:	b2db      	uxtb	r3, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2210      	movs	r2, #16
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <HardFault_Handler+0x4>

08003282 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <MemManage_Handler+0x4>

08003288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <BusFault_Handler+0x4>

0800328e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <UsageFault_Handler+0x4>

08003294 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c2:	f7fd fc99 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0

	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 80032d0:	480c      	ldr	r0, [pc, #48]	; (8003304 <DMA1_Channel6_IRQHandler+0x38>)
 80032d2:	f7ff ff33 	bl	800313c <LL_DMA_IsActiveFlag_TC6>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 80032dc:	f000 fe3e 	bl	8003f5c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 80032e0:	4808      	ldr	r0, [pc, #32]	; (8003304 <DMA1_Channel6_IRQHandler+0x38>)
 80032e2:	f7ff ff67 	bl	80031b4 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80032e6:	e00a      	b.n	80032fe <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <DMA1_Channel6_IRQHandler+0x38>)
 80032ea:	f7ff ff4f 	bl	800318c <LL_DMA_IsActiveFlag_HT6>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d104      	bne.n	80032fe <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 80032f4:	f000 fe32 	bl	8003f5c <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <DMA1_Channel6_IRQHandler+0x38>)
 80032fa:	f7ff ff77 	bl	80031ec <LL_DMA_ClearFlag_HT6>
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40020000 	.word	0x40020000

08003308 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 800330c:	480a      	ldr	r0, [pc, #40]	; (8003338 <DMA1_Channel7_IRQHandler+0x30>)
 800330e:	f7ff ff29 	bl	8003164 <LL_DMA_IsActiveFlag_TC7>
 8003312:	4603      	mov	r3, r0
 8003314:	2b01      	cmp	r3, #1
 8003316:	d10d      	bne.n	8003334 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8003318:	4807      	ldr	r0, [pc, #28]	; (8003338 <DMA1_Channel7_IRQHandler+0x30>)
 800331a:	f7ff ff59 	bl	80031d0 <LL_DMA_ClearFlag_TC7>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 800331e:	bf00      	nop
 8003320:	4806      	ldr	r0, [pc, #24]	; (800333c <DMA1_Channel7_IRQHandler+0x34>)
 8003322:	f7ff ff84 	bl	800322e <LL_USART_IsActiveFlag_TC>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f9      	beq.n	8003320 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800332c:	2107      	movs	r1, #7
 800332e:	4802      	ldr	r0, [pc, #8]	; (8003338 <DMA1_Channel7_IRQHandler+0x30>)
 8003330:	f7ff fee4 	bl	80030fc <LL_DMA_DisableChannel>
	}
  
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40020000 	.word	0x40020000
 800333c:	40004400 	.word	0x40004400

08003340 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003344:	4802      	ldr	r0, [pc, #8]	; (8003350 <TIM3_IRQHandler+0x10>)
 8003346:	f7fd ff84 	bl	8001252 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200000dc 	.word	0x200000dc

08003354 <USART2_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART2_IRQHandler(void){
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8003358:	4806      	ldr	r0, [pc, #24]	; (8003374 <USART2_IRQHandler+0x20>)
 800335a:	f7ff ff55 	bl	8003208 <LL_USART_IsActiveFlag_IDLE>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d004      	beq.n	800336e <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8003364:	f000 fdfa 	bl	8003f5c <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <USART2_IRQHandler+0x20>)
 800336a:	f7ff ff73 	bl	8003254 <LL_USART_ClearFlag_IDLE>
	}
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40004400 	.word	0x40004400

08003378 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003380:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <_sbrk+0x50>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <_sbrk+0x16>
		heap_end = &end;
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <_sbrk+0x50>)
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <_sbrk+0x54>)
 800338c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <_sbrk+0x50>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <_sbrk+0x50>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4413      	add	r3, r2
 800339c:	466a      	mov	r2, sp
 800339e:	4293      	cmp	r3, r2
 80033a0:	d907      	bls.n	80033b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80033a2:	f000 fec1 	bl	8004128 <__errno>
 80033a6:	4602      	mov	r2, r0
 80033a8:	230c      	movs	r3, #12
 80033aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
 80033b0:	e006      	b.n	80033c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <_sbrk+0x50>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	4a03      	ldr	r2, [pc, #12]	; (80033c8 <_sbrk+0x50>)
 80033bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80033be:	68fb      	ldr	r3, [r7, #12]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200000bc 	.word	0x200000bc
 80033cc:	20000260 	.word	0x20000260

080033d0 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033d4:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <SystemInit+0x84>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	4a1e      	ldr	r2, [pc, #120]	; (8003454 <SystemInit+0x84>)
 80033dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <SystemInit+0x88>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <SystemInit+0x88>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <SystemInit+0x88>)
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	4918      	ldr	r1, [pc, #96]	; (8003458 <SystemInit+0x88>)
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <SystemInit+0x8c>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <SystemInit+0x88>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <SystemInit+0x88>)
 8003402:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <SystemInit+0x88>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <SystemInit+0x88>)
 8003412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003416:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <SystemInit+0x88>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <SystemInit+0x88>)
 800341e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003422:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <SystemInit+0x88>)
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <SystemInit+0x88>)
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <SystemInit+0x88>)
 8003432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003434:	4908      	ldr	r1, [pc, #32]	; (8003458 <SystemInit+0x88>)
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <SystemInit+0x90>)
 8003438:	4013      	ands	r3, r2
 800343a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <SystemInit+0x88>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SystemInit+0x84>)
 8003444:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003448:	609a      	str	r2, [r3, #8]
#endif
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00
 8003458:	40021000 	.word	0x40021000
 800345c:	f87fc00c 	.word	0xf87fc00c
 8003460:	ff00fccc 	.word	0xff00fccc

08003464 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	; 0x38
 8003468:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800346a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	605a      	str	r2, [r3, #4]
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003484:	463b      	mov	r3, r7
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	611a      	str	r2, [r3, #16]
 8003492:	615a      	str	r2, [r3, #20]
 8003494:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <MX_TIM2_Init+0xe8>)
 8003498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800349c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <MX_TIM2_Init+0xe8>)
 80034a0:	f240 321f 	movw	r2, #799	; 0x31f
 80034a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034a6:	4b29      	ldr	r3, [pc, #164]	; (800354c <MX_TIM2_Init+0xe8>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <MX_TIM2_Init+0xe8>)
 80034ae:	2263      	movs	r2, #99	; 0x63
 80034b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <MX_TIM2_Init+0xe8>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b8:	4b24      	ldr	r3, [pc, #144]	; (800354c <MX_TIM2_Init+0xe8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034be:	4823      	ldr	r0, [pc, #140]	; (800354c <MX_TIM2_Init+0xe8>)
 80034c0:	f7fd fe32 	bl	8001128 <HAL_TIM_Base_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80034ca:	f7ff fdeb 	bl	80030a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d8:	4619      	mov	r1, r3
 80034da:	481c      	ldr	r0, [pc, #112]	; (800354c <MX_TIM2_Init+0xe8>)
 80034dc:	f7fd ffd8 	bl	8001490 <HAL_TIM_ConfigClockSource>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80034e6:	f7ff fddd 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034ea:	4818      	ldr	r0, [pc, #96]	; (800354c <MX_TIM2_Init+0xe8>)
 80034ec:	f7fd fe7c 	bl	80011e8 <HAL_TIM_PWM_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80034f6:	f7ff fdd5 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003502:	f107 031c 	add.w	r3, r7, #28
 8003506:	4619      	mov	r1, r3
 8003508:	4810      	ldr	r0, [pc, #64]	; (800354c <MX_TIM2_Init+0xe8>)
 800350a:	f7fe fd8f 	bl	800202c <HAL_TIMEx_MasterConfigSynchronization>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003514:	f7ff fdc6 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003518:	2360      	movs	r3, #96	; 0x60
 800351a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003528:	463b      	mov	r3, r7
 800352a:	2200      	movs	r2, #0
 800352c:	4619      	mov	r1, r3
 800352e:	4807      	ldr	r0, [pc, #28]	; (800354c <MX_TIM2_Init+0xe8>)
 8003530:	f7fe fc64 	bl	8001dfc <HAL_TIM_PWM_ConfigChannel>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800353a:	f7ff fdb3 	bl	80030a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800353e:	4803      	ldr	r0, [pc, #12]	; (800354c <MX_TIM2_Init+0xe8>)
 8003540:	f000 f8b2 	bl	80036a8 <HAL_TIM_MspPostInit>

}
 8003544:	bf00      	nop
 8003546:	3738      	adds	r7, #56	; 0x38
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	2000011c 	.word	0x2000011c

08003550 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	; 0x38
 8003554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	605a      	str	r2, [r3, #4]
 800356e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003570:	463b      	mov	r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	611a      	str	r2, [r3, #16]
 800357e:	615a      	str	r2, [r3, #20]
 8003580:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003582:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <MX_TIM3_Init+0xe0>)
 8003584:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <MX_TIM3_Init+0xe4>)
 8003586:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8003588:	4b29      	ldr	r3, [pc, #164]	; (8003630 <MX_TIM3_Init+0xe0>)
 800358a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800358e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003590:	4b27      	ldr	r3, [pc, #156]	; (8003630 <MX_TIM3_Init+0xe0>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <MX_TIM3_Init+0xe0>)
 8003598:	2209      	movs	r2, #9
 800359a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <MX_TIM3_Init+0xe0>)
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <MX_TIM3_Init+0xe0>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035a8:	4821      	ldr	r0, [pc, #132]	; (8003630 <MX_TIM3_Init+0xe0>)
 80035aa:	f7fd fdbd 	bl	8001128 <HAL_TIM_Base_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80035b4:	f7ff fd76 	bl	80030a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c2:	4619      	mov	r1, r3
 80035c4:	481a      	ldr	r0, [pc, #104]	; (8003630 <MX_TIM3_Init+0xe0>)
 80035c6:	f7fd ff63 	bl	8001490 <HAL_TIM_ConfigClockSource>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80035d0:	f7ff fd68 	bl	80030a4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80035d4:	4816      	ldr	r0, [pc, #88]	; (8003630 <MX_TIM3_Init+0xe0>)
 80035d6:	f7fd fdd2 	bl	800117e <HAL_TIM_OC_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80035e0:	f7ff fd60 	bl	80030a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	4619      	mov	r1, r3
 80035f2:	480f      	ldr	r0, [pc, #60]	; (8003630 <MX_TIM3_Init+0xe0>)
 80035f4:	f7fe fd1a 	bl	800202c <HAL_TIMEx_MasterConfigSynchronization>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80035fe:	f7ff fd51 	bl	80030a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8003602:	2310      	movs	r3, #16
 8003604:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003612:	463b      	mov	r3, r7
 8003614:	2200      	movs	r2, #0
 8003616:	4619      	mov	r1, r3
 8003618:	4805      	ldr	r0, [pc, #20]	; (8003630 <MX_TIM3_Init+0xe0>)
 800361a:	f7fe fb71 	bl	8001d00 <HAL_TIM_OC_ConfigChannel>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003624:	f7ff fd3e 	bl	80030a4 <Error_Handler>
  }

}
 8003628:	bf00      	nop
 800362a:	3738      	adds	r7, #56	; 0x38
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200000dc 	.word	0x200000dc
 8003634:	40000400 	.word	0x40000400

08003638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d10c      	bne.n	8003664 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_TIM_Base_MspInit+0x68>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <HAL_TIM_Base_MspInit+0x68>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	61d3      	str	r3, [r2, #28]
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_TIM_Base_MspInit+0x68>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003662:	e018      	b.n	8003696 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_TIM_Base_MspInit+0x6c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d113      	bne.n	8003696 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_TIM_Base_MspInit+0x68>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <HAL_TIM_Base_MspInit+0x68>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	61d3      	str	r3, [r2, #28]
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_TIM_Base_MspInit+0x68>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2100      	movs	r1, #0
 800368a:	201d      	movs	r0, #29
 800368c:	f7fd fb9f 	bl	8000dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003690:	201d      	movs	r0, #29
 8003692:	f7fd fbb8 	bl	8000e06 <HAL_NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40000400 	.word	0x40000400

080036a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c8:	d11c      	bne.n	8003704 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_TIM_MspPostInit+0x64>)
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	4a0f      	ldr	r2, [pc, #60]	; (800370c <HAL_TIM_MspPostInit+0x64>)
 80036d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d4:	6153      	str	r3, [r2, #20]
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_TIM_MspPostInit+0x64>)
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036e2:	2320      	movs	r3, #32
 80036e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	4619      	mov	r1, r3
 80036fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003700:	f7fd fb9c 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003704:	bf00      	nop
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40021000 	.word	0x40021000

08003710 <NVIC_EnableIRQ>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	4907      	ldr	r1, [pc, #28]	; (8003740 <NVIC_EnableIRQ+0x30>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	2001      	movs	r0, #1
 800372a:	fa00 f202 	lsl.w	r2, r0, r2
 800372e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e100 	.word	0xe000e100

08003744 <NVIC_SetPriority>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	6039      	str	r1, [r7, #0]
 800374e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003754:	2b00      	cmp	r3, #0
 8003756:	da0b      	bge.n	8003770 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	490c      	ldr	r1, [pc, #48]	; (8003790 <NVIC_SetPriority+0x4c>)
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 030f 	and.w	r3, r3, #15
 8003764:	3b04      	subs	r3, #4
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	440b      	add	r3, r1
 800376c:	761a      	strb	r2, [r3, #24]
}
 800376e:	e009      	b.n	8003784 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	b2da      	uxtb	r2, r3
 8003774:	4907      	ldr	r1, [pc, #28]	; (8003794 <NVIC_SetPriority+0x50>)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	0112      	lsls	r2, r2, #4
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	440b      	add	r3, r1
 8003780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00
 8003794:	e000e100 	.word	0xe000e100

08003798 <LL_DMA_EnableChannel>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <LL_DMA_EnableChannel+0x3c>)
 80037a8:	5cd3      	ldrb	r3, [r2, r3]
 80037aa:	461a      	mov	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	3a01      	subs	r2, #1
 80037b6:	4907      	ldr	r1, [pc, #28]	; (80037d4 <LL_DMA_EnableChannel+0x3c>)
 80037b8:	5c8a      	ldrb	r2, [r1, r2]
 80037ba:	4611      	mov	r1, r2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	440a      	add	r2, r1
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6013      	str	r3, [r2, #0]
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	08005f54 	.word	0x08005f54

080037d8 <LL_DMA_DisableChannel>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <LL_DMA_DisableChannel+0x3c>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	461a      	mov	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4413      	add	r3, r2
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	3a01      	subs	r2, #1
 80037f6:	4907      	ldr	r1, [pc, #28]	; (8003814 <LL_DMA_DisableChannel+0x3c>)
 80037f8:	5c8a      	ldrb	r2, [r1, r2]
 80037fa:	4611      	mov	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	440a      	add	r2, r1
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6013      	str	r3, [r2, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	08005f54 	.word	0x08005f54

08003818 <LL_DMA_SetDataTransferDirection>:
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3b01      	subs	r3, #1
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <LL_DMA_SetDataTransferDirection+0x48>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	461a      	mov	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	3a01      	subs	r2, #1
 8003840:	4907      	ldr	r1, [pc, #28]	; (8003860 <LL_DMA_SetDataTransferDirection+0x48>)
 8003842:	5c8a      	ldrb	r2, [r1, r2]
 8003844:	4611      	mov	r1, r2
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	440a      	add	r2, r1
 800384a:	4611      	mov	r1, r2
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]
}
 8003852:	bf00      	nop
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	08005f54 	.word	0x08005f54

08003864 <LL_DMA_GetDataTransferDirection>:
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	4a07      	ldr	r2, [pc, #28]	; (8003890 <LL_DMA_GetDataTransferDirection+0x2c>)
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4413      	add	r3, r2
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f244 0310 	movw	r3, #16400	; 0x4010
 8003882:	4013      	ands	r3, r2
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	08005f54 	.word	0x08005f54

08003894 <LL_DMA_SetMode>:
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	4a0c      	ldr	r2, [pc, #48]	; (80038d8 <LL_DMA_SetMode+0x44>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 0220 	bic.w	r2, r3, #32
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	4907      	ldr	r1, [pc, #28]	; (80038d8 <LL_DMA_SetMode+0x44>)
 80038ba:	5ccb      	ldrb	r3, [r1, r3]
 80038bc:	4619      	mov	r1, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	440b      	add	r3, r1
 80038c2:	4619      	mov	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
}
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	08005f54 	.word	0x08005f54

080038dc <LL_DMA_SetPeriphIncMode>:
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <LL_DMA_SetPeriphIncMode+0x44>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	461a      	mov	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	3b01      	subs	r3, #1
 8003900:	4907      	ldr	r1, [pc, #28]	; (8003920 <LL_DMA_SetPeriphIncMode+0x44>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	4619      	mov	r1, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	440b      	add	r3, r1
 800390a:	4619      	mov	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]
}
 8003912:	bf00      	nop
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	08005f54 	.word	0x08005f54

08003924 <LL_DMA_SetMemoryIncMode>:
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3b01      	subs	r3, #1
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <LL_DMA_SetMemoryIncMode+0x44>)
 8003936:	5cd3      	ldrb	r3, [r2, r3]
 8003938:	461a      	mov	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3b01      	subs	r3, #1
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <LL_DMA_SetMemoryIncMode+0x44>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	4619      	mov	r1, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	440b      	add	r3, r1
 8003952:	4619      	mov	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	08005f54 	.word	0x08005f54

0800396c <LL_DMA_SetPeriphSize>:
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a0c      	ldr	r2, [pc, #48]	; (80039b0 <LL_DMA_SetPeriphSize+0x44>)
 800397e:	5cd3      	ldrb	r3, [r2, r3]
 8003980:	461a      	mov	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	4907      	ldr	r1, [pc, #28]	; (80039b0 <LL_DMA_SetPeriphSize+0x44>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	4619      	mov	r1, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	440b      	add	r3, r1
 800399a:	4619      	mov	r1, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	08005f54 	.word	0x08005f54

080039b4 <LL_DMA_SetMemorySize>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <LL_DMA_SetMemorySize+0x44>)
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	461a      	mov	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <LL_DMA_SetMemorySize+0x44>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	4619      	mov	r1, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	440b      	add	r3, r1
 80039e2:	4619      	mov	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	08005f54 	.word	0x08005f54

080039fc <LL_DMA_SetChannelPriorityLevel>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	461a      	mov	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4907      	ldr	r1, [pc, #28]	; (8003a40 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	4619      	mov	r1, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	440b      	add	r3, r1
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	600b      	str	r3, [r1, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	08005f54 	.word	0x08005f54

08003a44 <LL_DMA_SetDataLength>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <LL_DMA_SetDataLength+0x44>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	3a01      	subs	r2, #1
 8003a68:	4907      	ldr	r1, [pc, #28]	; (8003a88 <LL_DMA_SetDataLength+0x44>)
 8003a6a:	5c8a      	ldrb	r2, [r1, r2]
 8003a6c:	4611      	mov	r1, r2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	440a      	add	r2, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
}
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	08005f54 	.word	0x08005f54

08003a8c <LL_DMA_GetDataLength>:
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a06      	ldr	r2, [pc, #24]	; (8003ab4 <LL_DMA_GetDataLength+0x28>)
 8003a9c:	5cd3      	ldrb	r3, [r2, r3]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b29b      	uxth	r3, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	08005f54 	.word	0x08005f54

08003ab8 <LL_DMA_ConfigAddresses>:
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d114      	bne.n	8003af6 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <LL_DMA_ConfigAddresses+0x74>)
 8003ad2:	5cd3      	ldrb	r3, [r2, r3]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4413      	add	r3, r2
 8003ada:	461a      	mov	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <LL_DMA_ConfigAddresses+0x74>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	461a      	mov	r2, r3
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6093      	str	r3, [r2, #8]
}
 8003af4:	e013      	b.n	8003b1e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <LL_DMA_ConfigAddresses+0x74>)
 8003afc:	5cd3      	ldrb	r3, [r2, r3]
 8003afe:	461a      	mov	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4413      	add	r3, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <LL_DMA_ConfigAddresses+0x74>)
 8003b10:	5cd3      	ldrb	r3, [r2, r3]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	60d3      	str	r3, [r2, #12]
}
 8003b1e:	bf00      	nop
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	08005f54 	.word	0x08005f54

08003b30 <LL_DMA_SetMemoryAddress>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4a06      	ldr	r2, [pc, #24]	; (8003b5c <LL_DMA_SetMemoryAddress+0x2c>)
 8003b42:	5cd3      	ldrb	r3, [r2, r3]
 8003b44:	461a      	mov	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	60d3      	str	r3, [r2, #12]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	08005f54 	.word	0x08005f54

08003b60 <LL_DMA_SetPeriphAddress>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <LL_DMA_SetPeriphAddress+0x2c>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	461a      	mov	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6093      	str	r3, [r2, #8]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	08005f54 	.word	0x08005f54

08003b90 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <LL_DMA_EnableIT_TC+0x3c>)
 8003ba0:	5cd3      	ldrb	r3, [r2, r3]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	3a01      	subs	r2, #1
 8003bae:	4907      	ldr	r1, [pc, #28]	; (8003bcc <LL_DMA_EnableIT_TC+0x3c>)
 8003bb0:	5c8a      	ldrb	r2, [r1, r2]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	440a      	add	r2, r1
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	6013      	str	r3, [r2, #0]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	08005f54 	.word	0x08005f54

08003bd0 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <LL_DMA_EnableIT_TE+0x3c>)
 8003be0:	5cd3      	ldrb	r3, [r2, r3]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	3a01      	subs	r2, #1
 8003bee:	4907      	ldr	r1, [pc, #28]	; (8003c0c <LL_DMA_EnableIT_TE+0x3c>)
 8003bf0:	5c8a      	ldrb	r2, [r1, r2]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	440a      	add	r2, r1
 8003bf8:	f043 0308 	orr.w	r3, r3, #8
 8003bfc:	6013      	str	r3, [r2, #0]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	08005f54 	.word	0x08005f54

08003c10 <LL_AHB1_GRP1_EnableClock>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003c26:	695a      	ldr	r2, [r3, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40021000 	.word	0x40021000

08003c40 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	4907      	ldr	r1, [pc, #28]	; (8003c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	40021000 	.word	0x40021000

08003c70 <LL_USART_Enable>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	601a      	str	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <LL_USART_ConfigAsyncMode>:
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8003d1c:	b490      	push	{r4, r7}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8003d26:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3328      	adds	r3, #40	; 0x28
 8003d32:	461c      	mov	r4, r3
 8003d34:	e002      	b.n	8003d3c <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 8003d3c:	4623      	mov	r3, r4
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc90      	pop	{r4, r7}
 8003d46:	4770      	bx	lr

08003d48 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(const uint8_t* data, uint16_t len) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a03      	ldr	r2, [pc, #12]	; (8003d68 <USART2_RegisterCallback+0x20>)
 8003d5a:	6013      	str	r3, [r2, #0]
	}
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	200000c0 	.word	0x200000c0

08003d6c <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8003d6c:	b5b0      	push	{r4, r5, r7, lr}
 8003d6e:	b090      	sub	sp, #64	; 0x40
 8003d70:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	611a      	str	r2, [r3, #16]
 8003d82:	615a      	str	r2, [r3, #20]
 8003d84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
 8003d94:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003d96:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003d9a:	f7ff ff51 	bl	8003c40 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003d9e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003da2:	f7ff ff35 	bl	8003c10 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8003da6:	f248 0304 	movw	r3, #32772	; 0x8004
 8003daa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003dac:	2302      	movs	r3, #2
 8003dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003db0:	2303      	movs	r3, #3
 8003db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003dbc:	2307      	movs	r3, #7
 8003dbe:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dc8:	f7fe fb61 	bl	800248e <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2106      	movs	r1, #6
 8003dd0:	484f      	ldr	r0, [pc, #316]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003dd2:	f7ff fd21 	bl	8003818 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8003dd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dda:	2106      	movs	r1, #6
 8003ddc:	484c      	ldr	r0, [pc, #304]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003dde:	f7ff fe0d 	bl	80039fc <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8003de2:	2200      	movs	r2, #0
 8003de4:	2106      	movs	r1, #6
 8003de6:	484a      	ldr	r0, [pc, #296]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003de8:	f7ff fd54 	bl	8003894 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8003dec:	2200      	movs	r2, #0
 8003dee:	2106      	movs	r1, #6
 8003df0:	4847      	ldr	r0, [pc, #284]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003df2:	f7ff fd73 	bl	80038dc <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	2106      	movs	r1, #6
 8003dfa:	4845      	ldr	r0, [pc, #276]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003dfc:	f7ff fd92 	bl	8003924 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8003e00:	2200      	movs	r2, #0
 8003e02:	2106      	movs	r1, #6
 8003e04:	4842      	ldr	r0, [pc, #264]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e06:	f7ff fdb1 	bl	800396c <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2106      	movs	r1, #6
 8003e0e:	4840      	ldr	r0, [pc, #256]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e10:	f7ff fdd0 	bl	80039b4 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_6,
 8003e14:	2101      	movs	r1, #1
 8003e16:	483f      	ldr	r0, [pc, #252]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003e18:	f7ff ff80 	bl	8003d1c <LL_USART_DMA_GetRegAddr>
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	4c3e      	ldr	r4, [pc, #248]	; (8003f18 <MX_USART2_UART_Init+0x1ac>)
 8003e20:	2106      	movs	r1, #6
 8003e22:	483b      	ldr	r0, [pc, #236]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e24:	f7ff fd1e 	bl	8003864 <LL_DMA_GetDataTransferDirection>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	462a      	mov	r2, r5
 8003e30:	2106      	movs	r1, #6
 8003e32:	4837      	ldr	r0, [pc, #220]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e34:	f7ff fe40 	bl	8003ab8 <LL_DMA_ConfigAddresses>
  						 LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
  						 (uint32_t)bufferUSART2dma,
  						 LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8003e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e3c:	2106      	movs	r1, #6
 8003e3e:	4834      	ldr	r0, [pc, #208]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e40:	f7ff fe00 	bl	8003a44 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8003e44:	2106      	movs	r1, #6
 8003e46:	4832      	ldr	r0, [pc, #200]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e48:	f7ff fca6 	bl	8003798 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8003e4c:	4831      	ldr	r0, [pc, #196]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003e4e:	f7ff ff45 	bl	8003cdc <LL_USART_EnableDMAReq_RX>
  #endif

  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
    LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8003e52:	2210      	movs	r2, #16
 8003e54:	2107      	movs	r1, #7
 8003e56:	482e      	ldr	r0, [pc, #184]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e58:	f7ff fcde 	bl	8003818 <LL_DMA_SetDataTransferDirection>
    LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8003e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e60:	2107      	movs	r1, #7
 8003e62:	482b      	ldr	r0, [pc, #172]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e64:	f7ff fdca 	bl	80039fc <LL_DMA_SetChannelPriorityLevel>
    LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2107      	movs	r1, #7
 8003e6c:	4828      	ldr	r0, [pc, #160]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e6e:	f7ff fd11 	bl	8003894 <LL_DMA_SetMode>
    LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2107      	movs	r1, #7
 8003e76:	4826      	ldr	r0, [pc, #152]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e78:	f7ff fd30 	bl	80038dc <LL_DMA_SetPeriphIncMode>
    LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	2107      	movs	r1, #7
 8003e80:	4823      	ldr	r0, [pc, #140]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e82:	f7ff fd4f 	bl	8003924 <LL_DMA_SetMemoryIncMode>
    LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2107      	movs	r1, #7
 8003e8a:	4821      	ldr	r0, [pc, #132]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e8c:	f7ff fd6e 	bl	800396c <LL_DMA_SetPeriphSize>
    LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2107      	movs	r1, #7
 8003e94:	481e      	ldr	r0, [pc, #120]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003e96:	f7ff fd8d 	bl	80039b4 <LL_DMA_SetMemorySize>

    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	481d      	ldr	r0, [pc, #116]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003e9e:	f7ff ff3d 	bl	8003d1c <LL_USART_DMA_GetRegAddr>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2107      	movs	r1, #7
 8003ea8:	4819      	ldr	r0, [pc, #100]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003eaa:	f7ff fe59 	bl	8003b60 <LL_DMA_SetPeriphAddress>
    LL_USART_EnableDMAReq_TX(USART2);
 8003eae:	4819      	ldr	r0, [pc, #100]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003eb0:	f7ff ff24 	bl	8003cfc <LL_USART_EnableDMAReq_TX>

    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8003eb4:	2107      	movs	r1, #7
 8003eb6:	4816      	ldr	r0, [pc, #88]	; (8003f10 <MX_USART2_UART_Init+0x1a4>)
 8003eb8:	f7ff fe8a 	bl	8003bd0 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	2026      	movs	r0, #38	; 0x26
 8003ec0:	f7ff fc40 	bl	8003744 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8003ec4:	2026      	movs	r0, #38	; 0x26
 8003ec6:	f7ff fc23 	bl	8003710 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8003eca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ece:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003edc:	230c      	movs	r3, #12
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003ee8:	f107 031c 	add.w	r3, r7, #28
 8003eec:	4619      	mov	r1, r3
 8003eee:	4809      	ldr	r0, [pc, #36]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003ef0:	f7fe fd52 	bl	8002998 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003ef4:	4807      	ldr	r0, [pc, #28]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003ef6:	f7ff fecb 	bl	8003c90 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8003efa:	4806      	ldr	r0, [pc, #24]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003efc:	f7ff fede 	bl	8003cbc <LL_USART_DisableIT_CTS>

  	  //type your code here:
#if !POLLING
  LL_USART_EnableIT_IDLE(USART2);
#endif
  LL_USART_Enable(USART2);
 8003f00:	4804      	ldr	r0, [pc, #16]	; (8003f14 <MX_USART2_UART_Init+0x1a8>)
 8003f02:	f7ff feb5 	bl	8003c70 <LL_USART_Enable>
}
 8003f06:	bf00      	nop
 8003f08:	3738      	adds	r7, #56	; 0x38
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40004400 	.word	0x40004400
 8003f18:	2000015c 	.word	0x2000015c

08003f1c <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2107      	movs	r1, #7
 8003f2e:	480a      	ldr	r0, [pc, #40]	; (8003f58 <USART2_PutBuffer+0x3c>)
 8003f30:	f7ff fdfe 	bl	8003b30 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	461a      	mov	r2, r3
 8003f38:	2107      	movs	r1, #7
 8003f3a:	4807      	ldr	r0, [pc, #28]	; (8003f58 <USART2_PutBuffer+0x3c>)
 8003f3c:	f7ff fd82 	bl	8003a44 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8003f40:	2107      	movs	r1, #7
 8003f42:	4805      	ldr	r0, [pc, #20]	; (8003f58 <USART2_PutBuffer+0x3c>)
 8003f44:	f7ff fe24 	bl	8003b90 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8003f48:	2107      	movs	r1, #7
 8003f4a:	4803      	ldr	r0, [pc, #12]	; (8003f58 <USART2_PutBuffer+0x3c>)
 8003f4c:	f7ff fc24 	bl	8003798 <LL_DMA_EnableChannel>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40020000 	.word	0x40020000

08003f5c <USART2_CheckDmaReception>:
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */

void USART2_CheckDmaReception(void)
{
 8003f5c:	b5b0      	push	{r4, r5, r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 8003f62:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <USART2_CheckDmaReception+0xfc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d072      	beq.n	8004050 <USART2_CheckDmaReception+0xf4>

		static uint16_t old_pos = 0;

		uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8003f6a:	2106      	movs	r1, #6
 8003f6c:	483b      	ldr	r0, [pc, #236]	; (800405c <USART2_CheckDmaReception+0x100>)
 8003f6e:	f7ff fd8d 	bl	8003a8c <LL_DMA_GetDataLength>
 8003f72:	4603      	mov	r3, r0
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003f7a:	80fb      	strh	r3, [r7, #6]

		occupied_memory=pos;
 8003f7c:	88fb      	ldrh	r3, [r7, #6]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	4b37      	ldr	r3, [pc, #220]	; (8004060 <USART2_CheckDmaReception+0x104>)
 8003f82:	701a      	strb	r2, [r3, #0]
		load=(float)(occupied_memory)/(float)(DMA_USART2_BUFFER_SIZE)*100.0;
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <USART2_CheckDmaReception+0x104>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f90:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004064 <USART2_CheckDmaReception+0x108>
 8003f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f98:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004068 <USART2_CheckDmaReception+0x10c>
 8003f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fa0:	4b32      	ldr	r3, [pc, #200]	; (800406c <USART2_CheckDmaReception+0x110>)
 8003fa2:	edc3 7a00 	vstr	s15, [r3]

		if (pos != old_pos)
 8003fa6:	4b32      	ldr	r3, [pc, #200]	; (8004070 <USART2_CheckDmaReception+0x114>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d050      	beq.n	8004052 <USART2_CheckDmaReception+0xf6>
		{
			if (pos < (DMA_USART2_BUFFER_SIZE-20))
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2beb      	cmp	r3, #235	; 0xeb
 8003fb4:	d811      	bhi.n	8003fda <USART2_CheckDmaReception+0x7e>
			{
				USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8003fb6:	4b28      	ldr	r3, [pc, #160]	; (8004058 <USART2_CheckDmaReception+0xfc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2d      	ldr	r2, [pc, #180]	; (8004070 <USART2_CheckDmaReception+0x114>)
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4a2c      	ldr	r2, [pc, #176]	; (8004074 <USART2_CheckDmaReception+0x118>)
 8003fc2:	1888      	adds	r0, r1, r2
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <USART2_CheckDmaReception+0x114>)
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	88f9      	ldrh	r1, [r7, #6]
 8003fca:	1a8a      	subs	r2, r1, r2
 8003fcc:	b292      	uxth	r2, r2
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4798      	blx	r3
				old_pos = pos;
 8003fd2:	4a27      	ldr	r2, [pc, #156]	; (8004070 <USART2_CheckDmaReception+0x114>)
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	8013      	strh	r3, [r2, #0]
 8003fd8:	e03b      	b.n	8004052 <USART2_CheckDmaReception+0xf6>
			else
			{



				USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 8003fda:	4b1f      	ldr	r3, [pc, #124]	; (8004058 <USART2_CheckDmaReception+0xfc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a24      	ldr	r2, [pc, #144]	; (8004070 <USART2_CheckDmaReception+0x114>)
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4a23      	ldr	r2, [pc, #140]	; (8004074 <USART2_CheckDmaReception+0x118>)
 8003fe6:	1888      	adds	r0, r1, r2
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <USART2_CheckDmaReception+0x114>)
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4798      	blx	r3
				//clear bufferUSART2dma
				memset(bufferUSART2dma, 0, DMA_USART2_BUFFER_SIZE);
 8003ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	481d      	ldr	r0, [pc, #116]	; (8004074 <USART2_CheckDmaReception+0x118>)
 8003ffe:	f000 f8bd 	bl	800417c <memset>
				// as was mentioned in datasheet first needs to be disabled
				LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8004002:	2106      	movs	r1, #6
 8004004:	4815      	ldr	r0, [pc, #84]	; (800405c <USART2_CheckDmaReception+0x100>)
 8004006:	f7ff fbe7 	bl	80037d8 <LL_DMA_DisableChannel>
				// them reconfigure
				LL_DMA_ConfigAddresses(     DMA1, LL_DMA_CHANNEL_6,
 800400a:	2101      	movs	r1, #1
 800400c:	481a      	ldr	r0, [pc, #104]	; (8004078 <USART2_CheckDmaReception+0x11c>)
 800400e:	f7ff fe85 	bl	8003d1c <LL_USART_DMA_GetRegAddr>
 8004012:	4605      	mov	r5, r0
 8004014:	4c17      	ldr	r4, [pc, #92]	; (8004074 <USART2_CheckDmaReception+0x118>)
 8004016:	2106      	movs	r1, #6
 8004018:	4810      	ldr	r0, [pc, #64]	; (800405c <USART2_CheckDmaReception+0x100>)
 800401a:	f7ff fc23 	bl	8003864 <LL_DMA_GetDataTransferDirection>
 800401e:	4603      	mov	r3, r0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	4623      	mov	r3, r4
 8004024:	462a      	mov	r2, r5
 8004026:	2106      	movs	r1, #6
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <USART2_CheckDmaReception+0x100>)
 800402a:	f7ff fd45 	bl	8003ab8 <LL_DMA_ConfigAddresses>
											LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
											(uint32_t)bufferUSART2dma,
											LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
				LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800402e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004032:	2106      	movs	r1, #6
 8004034:	4809      	ldr	r0, [pc, #36]	; (800405c <USART2_CheckDmaReception+0x100>)
 8004036:	f7ff fd05 	bl	8003a44 <LL_DMA_SetDataLength>
				//lastly enabled
				LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800403a:	2106      	movs	r1, #6
 800403c:	4807      	ldr	r0, [pc, #28]	; (800405c <USART2_CheckDmaReception+0x100>)
 800403e:	f7ff fbab 	bl	8003798 <LL_DMA_EnableChannel>
				LL_USART_EnableDMAReq_RX(USART2);
 8004042:	480d      	ldr	r0, [pc, #52]	; (8004078 <USART2_CheckDmaReception+0x11c>)
 8004044:	f7ff fe4a 	bl	8003cdc <LL_USART_EnableDMAReq_RX>


				old_pos = 0;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <USART2_CheckDmaReception+0x114>)
 800404a:	2200      	movs	r2, #0
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	e000      	b.n	8004052 <USART2_CheckDmaReception+0xf6>
	if(USART2_ProcessData == 0) return;
 8004050:	bf00      	nop

			}
		}
}
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bdb0      	pop	{r4, r5, r7, pc}
 8004058:	200000c0 	.word	0x200000c0
 800405c:	40020000 	.word	0x40020000
 8004060:	200000d4 	.word	0x200000d4
 8004064:	43800000 	.word	0x43800000
 8004068:	42c80000 	.word	0x42c80000
 800406c:	200000d8 	.word	0x200000d8
 8004070:	200000c4 	.word	0x200000c4
 8004074:	2000015c 	.word	0x2000015c
 8004078:	40004400 	.word	0x40004400

0800407c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800407c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040b4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004080:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004082:	e003      	b.n	800408c <LoopCopyDataInit>

08004084 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004086:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004088:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800408a:	3104      	adds	r1, #4

0800408c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800408c:	480b      	ldr	r0, [pc, #44]	; (80040bc <LoopForever+0xa>)
	ldr	r3, =_edata
 800408e:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004090:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004092:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004094:	d3f6      	bcc.n	8004084 <CopyDataInit>
	ldr	r2, =_sbss
 8004096:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004098:	e002      	b.n	80040a0 <LoopFillZerobss>

0800409a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800409a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800409c:	f842 3b04 	str.w	r3, [r2], #4

080040a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <LoopForever+0x16>)
	cmp	r2, r3
 80040a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80040a4:	d3f9      	bcc.n	800409a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040a6:	f7ff f993 	bl	80033d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040aa:	f000 f843 	bl	8004134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040ae:	f7fe fea1 	bl	8002df4 <main>

080040b2 <LoopForever>:

LoopForever:
    b LoopForever
 80040b2:	e7fe      	b.n	80040b2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040b4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80040b8:	080060a8 	.word	0x080060a8
	ldr	r0, =_sdata
 80040bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80040c0:	2000008c 	.word	0x2000008c
	ldr	r2, =_sbss
 80040c4:	2000008c 	.word	0x2000008c
	ldr	r3, = _ebss
 80040c8:	20000260 	.word	0x20000260

080040cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040cc:	e7fe      	b.n	80040cc <ADC1_2_IRQHandler>
	...

080040d0 <gcvt>:
 80040d0:	b530      	push	{r4, r5, lr}
 80040d2:	ed2d 8b02 	vpush	{d8}
 80040d6:	eeb0 8a40 	vmov.f32	s16, s0
 80040da:	eef0 8a60 	vmov.f32	s17, s1
 80040de:	460c      	mov	r4, r1
 80040e0:	2200      	movs	r2, #0
 80040e2:	b083      	sub	sp, #12
 80040e4:	4605      	mov	r5, r0
 80040e6:	2300      	movs	r3, #0
 80040e8:	ec51 0b10 	vmov	r0, r1, d0
 80040ec:	f7fc fcee 	bl	8000acc <__aeabi_dcmplt>
 80040f0:	4622      	mov	r2, r4
 80040f2:	b118      	cbz	r0, 80040fc <gcvt+0x2c>
 80040f4:	232d      	movs	r3, #45	; 0x2d
 80040f6:	f802 3b01 	strb.w	r3, [r2], #1
 80040fa:	3d01      	subs	r5, #1
 80040fc:	2300      	movs	r3, #0
 80040fe:	4809      	ldr	r0, [pc, #36]	; (8004124 <gcvt+0x54>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	4629      	mov	r1, r5
 8004104:	2367      	movs	r3, #103	; 0x67
 8004106:	eeb0 0a48 	vmov.f32	s0, s16
 800410a:	eef0 0a68 	vmov.f32	s1, s17
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	f000 f8d2 	bl	80042b8 <_gcvt>
 8004114:	2800      	cmp	r0, #0
 8004116:	bf14      	ite	ne
 8004118:	4620      	movne	r0, r4
 800411a:	2000      	moveq	r0, #0
 800411c:	b003      	add	sp, #12
 800411e:	ecbd 8b02 	vpop	{d8}
 8004122:	bd30      	pop	{r4, r5, pc}
 8004124:	20000028 	.word	0x20000028

08004128 <__errno>:
 8004128:	4b01      	ldr	r3, [pc, #4]	; (8004130 <__errno+0x8>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000028 	.word	0x20000028

08004134 <__libc_init_array>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4e0d      	ldr	r6, [pc, #52]	; (800416c <__libc_init_array+0x38>)
 8004138:	4c0d      	ldr	r4, [pc, #52]	; (8004170 <__libc_init_array+0x3c>)
 800413a:	1ba4      	subs	r4, r4, r6
 800413c:	10a4      	asrs	r4, r4, #2
 800413e:	2500      	movs	r5, #0
 8004140:	42a5      	cmp	r5, r4
 8004142:	d109      	bne.n	8004158 <__libc_init_array+0x24>
 8004144:	4e0b      	ldr	r6, [pc, #44]	; (8004174 <__libc_init_array+0x40>)
 8004146:	4c0c      	ldr	r4, [pc, #48]	; (8004178 <__libc_init_array+0x44>)
 8004148:	f001 fec2 	bl	8005ed0 <_init>
 800414c:	1ba4      	subs	r4, r4, r6
 800414e:	10a4      	asrs	r4, r4, #2
 8004150:	2500      	movs	r5, #0
 8004152:	42a5      	cmp	r5, r4
 8004154:	d105      	bne.n	8004162 <__libc_init_array+0x2e>
 8004156:	bd70      	pop	{r4, r5, r6, pc}
 8004158:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800415c:	4798      	blx	r3
 800415e:	3501      	adds	r5, #1
 8004160:	e7ee      	b.n	8004140 <__libc_init_array+0xc>
 8004162:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004166:	4798      	blx	r3
 8004168:	3501      	adds	r5, #1
 800416a:	e7f2      	b.n	8004152 <__libc_init_array+0x1e>
 800416c:	080060a0 	.word	0x080060a0
 8004170:	080060a0 	.word	0x080060a0
 8004174:	080060a0 	.word	0x080060a0
 8004178:	080060a4 	.word	0x080060a4

0800417c <memset>:
 800417c:	4402      	add	r2, r0
 800417e:	4603      	mov	r3, r0
 8004180:	4293      	cmp	r3, r2
 8004182:	d100      	bne.n	8004186 <memset+0xa>
 8004184:	4770      	bx	lr
 8004186:	f803 1b01 	strb.w	r1, [r3], #1
 800418a:	e7f9      	b.n	8004180 <memset+0x4>

0800418c <siprintf>:
 800418c:	b40e      	push	{r1, r2, r3}
 800418e:	b500      	push	{lr}
 8004190:	b09c      	sub	sp, #112	; 0x70
 8004192:	ab1d      	add	r3, sp, #116	; 0x74
 8004194:	9002      	str	r0, [sp, #8]
 8004196:	9006      	str	r0, [sp, #24]
 8004198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800419c:	4809      	ldr	r0, [pc, #36]	; (80041c4 <siprintf+0x38>)
 800419e:	9107      	str	r1, [sp, #28]
 80041a0:	9104      	str	r1, [sp, #16]
 80041a2:	4909      	ldr	r1, [pc, #36]	; (80041c8 <siprintf+0x3c>)
 80041a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041a8:	9105      	str	r1, [sp, #20]
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	a902      	add	r1, sp, #8
 80041b0:	f000 fd2e 	bl	8004c10 <_svfiprintf_r>
 80041b4:	9b02      	ldr	r3, [sp, #8]
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	b01c      	add	sp, #112	; 0x70
 80041bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c0:	b003      	add	sp, #12
 80041c2:	4770      	bx	lr
 80041c4:	20000028 	.word	0x20000028
 80041c8:	ffff0208 	.word	0xffff0208

080041cc <print_e>:
 80041cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ce:	b087      	sub	sp, #28
 80041d0:	ec43 2b10 	vmov	d0, r2, r3
 80041d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80041d6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80041da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80041dc:	ab04      	add	r3, sp, #16
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	460f      	mov	r7, r1
 80041e6:	ab05      	add	r3, sp, #20
 80041e8:	2102      	movs	r1, #2
 80041ea:	1c62      	adds	r2, r4, #1
 80041ec:	f001 f834 	bl	8005258 <_dtoa_r>
 80041f0:	4601      	mov	r1, r0
 80041f2:	9805      	ldr	r0, [sp, #20]
 80041f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80041f8:	4298      	cmp	r0, r3
 80041fa:	d104      	bne.n	8004206 <print_e+0x3a>
 80041fc:	4638      	mov	r0, r7
 80041fe:	f000 ff97 	bl	8005130 <strcpy>
 8004202:	b007      	add	sp, #28
 8004204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004206:	780b      	ldrb	r3, [r1, #0]
 8004208:	703b      	strb	r3, [r7, #0]
 800420a:	2d00      	cmp	r5, #0
 800420c:	d143      	bne.n	8004296 <print_e+0xca>
 800420e:	2c00      	cmp	r4, #0
 8004210:	d141      	bne.n	8004296 <print_e+0xca>
 8004212:	1c7b      	adds	r3, r7, #1
 8004214:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004218:	b10a      	cbz	r2, 800421e <print_e+0x52>
 800421a:	2c00      	cmp	r4, #0
 800421c:	dc3f      	bgt.n	800429e <print_e+0xd2>
 800421e:	2e67      	cmp	r6, #103	; 0x67
 8004220:	d044      	beq.n	80042ac <print_e+0xe0>
 8004222:	2e47      	cmp	r6, #71	; 0x47
 8004224:	d044      	beq.n	80042b0 <print_e+0xe4>
 8004226:	461a      	mov	r2, r3
 8004228:	191d      	adds	r5, r3, r4
 800422a:	2730      	movs	r7, #48	; 0x30
 800422c:	1aa9      	subs	r1, r5, r2
 800422e:	2900      	cmp	r1, #0
 8004230:	dc39      	bgt.n	80042a6 <print_e+0xda>
 8004232:	2c00      	cmp	r4, #0
 8004234:	bfa8      	it	ge
 8004236:	191b      	addge	r3, r3, r4
 8004238:	1e41      	subs	r1, r0, #1
 800423a:	2900      	cmp	r1, #0
 800423c:	bfb8      	it	lt
 800423e:	f1c0 0001 	rsblt	r0, r0, #1
 8004242:	9105      	str	r1, [sp, #20]
 8004244:	bfb8      	it	lt
 8004246:	9005      	strlt	r0, [sp, #20]
 8004248:	461a      	mov	r2, r3
 800424a:	9805      	ldr	r0, [sp, #20]
 800424c:	f802 6b02 	strb.w	r6, [r2], #2
 8004250:	bfb5      	itete	lt
 8004252:	212d      	movlt	r1, #45	; 0x2d
 8004254:	212b      	movge	r1, #43	; 0x2b
 8004256:	7059      	strblt	r1, [r3, #1]
 8004258:	7059      	strbge	r1, [r3, #1]
 800425a:	2863      	cmp	r0, #99	; 0x63
 800425c:	dd0b      	ble.n	8004276 <print_e+0xaa>
 800425e:	2164      	movs	r1, #100	; 0x64
 8004260:	fb90 f1f1 	sdiv	r1, r0, r1
 8004264:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8004268:	1cda      	adds	r2, r3, #3
 800426a:	709c      	strb	r4, [r3, #2]
 800426c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8004270:	fb03 0101 	mla	r1, r3, r1, r0
 8004274:	9105      	str	r1, [sp, #20]
 8004276:	9905      	ldr	r1, [sp, #20]
 8004278:	230a      	movs	r3, #10
 800427a:	fb91 f3f3 	sdiv	r3, r1, r3
 800427e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004282:	7010      	strb	r0, [r2, #0]
 8004284:	f06f 0009 	mvn.w	r0, #9
 8004288:	fb00 1303 	mla	r3, r0, r3, r1
 800428c:	3330      	adds	r3, #48	; 0x30
 800428e:	7053      	strb	r3, [r2, #1]
 8004290:	2300      	movs	r3, #0
 8004292:	7093      	strb	r3, [r2, #2]
 8004294:	e7b5      	b.n	8004202 <print_e+0x36>
 8004296:	222e      	movs	r2, #46	; 0x2e
 8004298:	1cbb      	adds	r3, r7, #2
 800429a:	707a      	strb	r2, [r7, #1]
 800429c:	e7ba      	b.n	8004214 <print_e+0x48>
 800429e:	f803 2b01 	strb.w	r2, [r3], #1
 80042a2:	3c01      	subs	r4, #1
 80042a4:	e7b6      	b.n	8004214 <print_e+0x48>
 80042a6:	f802 7b01 	strb.w	r7, [r2], #1
 80042aa:	e7bf      	b.n	800422c <print_e+0x60>
 80042ac:	2665      	movs	r6, #101	; 0x65
 80042ae:	e7c3      	b.n	8004238 <print_e+0x6c>
 80042b0:	2645      	movs	r6, #69	; 0x45
 80042b2:	e7c1      	b.n	8004238 <print_e+0x6c>
 80042b4:	0000      	movs	r0, r0
	...

080042b8 <_gcvt>:
 80042b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	ec55 4b10 	vmov	r4, r5, d0
 80042c0:	b088      	sub	sp, #32
 80042c2:	4681      	mov	r9, r0
 80042c4:	460f      	mov	r7, r1
 80042c6:	4616      	mov	r6, r2
 80042c8:	469a      	mov	sl, r3
 80042ca:	2200      	movs	r2, #0
 80042cc:	2300      	movs	r3, #0
 80042ce:	ee10 0a10 	vmov	r0, s0
 80042d2:	4629      	mov	r1, r5
 80042d4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80042d8:	f7fc fbf8 	bl	8000acc <__aeabi_dcmplt>
 80042dc:	b110      	cbz	r0, 80042e4 <_gcvt+0x2c>
 80042de:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80042e2:	461d      	mov	r5, r3
 80042e4:	2200      	movs	r2, #0
 80042e6:	2300      	movs	r3, #0
 80042e8:	4620      	mov	r0, r4
 80042ea:	4629      	mov	r1, r5
 80042ec:	f7fc fbe4 	bl	8000ab8 <__aeabi_dcmpeq>
 80042f0:	b138      	cbz	r0, 8004302 <_gcvt+0x4a>
 80042f2:	2330      	movs	r3, #48	; 0x30
 80042f4:	7033      	strb	r3, [r6, #0]
 80042f6:	2300      	movs	r3, #0
 80042f8:	7073      	strb	r3, [r6, #1]
 80042fa:	4630      	mov	r0, r6
 80042fc:	b008      	add	sp, #32
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004302:	a350      	add	r3, pc, #320	; (adr r3, 8004444 <_gcvt+0x18c>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fc fbe8 	bl	8000ae0 <__aeabi_dcmple>
 8004310:	b150      	cbz	r0, 8004328 <_gcvt+0x70>
 8004312:	3f01      	subs	r7, #1
 8004314:	e9cd a801 	strd	sl, r8, [sp, #4]
 8004318:	9700      	str	r7, [sp, #0]
 800431a:	4622      	mov	r2, r4
 800431c:	462b      	mov	r3, r5
 800431e:	4631      	mov	r1, r6
 8004320:	4648      	mov	r0, r9
 8004322:	f7ff ff53 	bl	80041cc <print_e>
 8004326:	e7e8      	b.n	80042fa <_gcvt+0x42>
 8004328:	4638      	mov	r0, r7
 800432a:	f000 fb6b 	bl	8004a04 <_mprec_log10>
 800432e:	4622      	mov	r2, r4
 8004330:	462b      	mov	r3, r5
 8004332:	ec51 0b10 	vmov	r0, r1, d0
 8004336:	f7fc fbd3 	bl	8000ae0 <__aeabi_dcmple>
 800433a:	2800      	cmp	r0, #0
 800433c:	d1e9      	bne.n	8004312 <_gcvt+0x5a>
 800433e:	2200      	movs	r2, #0
 8004340:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <_gcvt+0x188>)
 8004342:	4620      	mov	r0, r4
 8004344:	4629      	mov	r1, r5
 8004346:	f7fc fbc1 	bl	8000acc <__aeabi_dcmplt>
 800434a:	aa07      	add	r2, sp, #28
 800434c:	ab06      	add	r3, sp, #24
 800434e:	e9cd 3200 	strd	r3, r2, [sp]
 8004352:	ab05      	add	r3, sp, #20
 8004354:	463a      	mov	r2, r7
 8004356:	b360      	cbz	r0, 80043b2 <_gcvt+0xfa>
 8004358:	2103      	movs	r1, #3
 800435a:	ec45 4b10 	vmov	d0, r4, r5
 800435e:	4648      	mov	r0, r9
 8004360:	f000 ff7a 	bl	8005258 <_dtoa_r>
 8004364:	9a05      	ldr	r2, [sp, #20]
 8004366:	f242 730f 	movw	r3, #9999	; 0x270f
 800436a:	429a      	cmp	r2, r3
 800436c:	d023      	beq.n	80043b6 <_gcvt+0xfe>
 800436e:	4633      	mov	r3, r6
 8004370:	4437      	add	r7, r6
 8004372:	4601      	mov	r1, r0
 8004374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004378:	9d05      	ldr	r5, [sp, #20]
 800437a:	1afc      	subs	r4, r7, r3
 800437c:	b32a      	cbz	r2, 80043ca <_gcvt+0x112>
 800437e:	2d00      	cmp	r5, #0
 8004380:	dc1e      	bgt.n	80043c0 <_gcvt+0x108>
 8004382:	f1b8 0f00 	cmp.w	r8, #0
 8004386:	d102      	bne.n	800438e <_gcvt+0xd6>
 8004388:	780a      	ldrb	r2, [r1, #0]
 800438a:	2a00      	cmp	r2, #0
 800438c:	d045      	beq.n	800441a <_gcvt+0x162>
 800438e:	429e      	cmp	r6, r3
 8004390:	bf02      	ittt	eq
 8004392:	1c73      	addeq	r3, r6, #1
 8004394:	2230      	moveq	r2, #48	; 0x30
 8004396:	7032      	strbeq	r2, [r6, #0]
 8004398:	222e      	movs	r2, #46	; 0x2e
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	9a05      	ldr	r2, [sp, #20]
 800439e:	3301      	adds	r3, #1
 80043a0:	2000      	movs	r0, #0
 80043a2:	2730      	movs	r7, #48	; 0x30
 80043a4:	2a00      	cmp	r2, #0
 80043a6:	4615      	mov	r5, r2
 80043a8:	db24      	blt.n	80043f4 <_gcvt+0x13c>
 80043aa:	b100      	cbz	r0, 80043ae <_gcvt+0xf6>
 80043ac:	9205      	str	r2, [sp, #20]
 80043ae:	1e4a      	subs	r2, r1, #1
 80043b0:	e02b      	b.n	800440a <_gcvt+0x152>
 80043b2:	2102      	movs	r1, #2
 80043b4:	e7d1      	b.n	800435a <_gcvt+0xa2>
 80043b6:	4601      	mov	r1, r0
 80043b8:	4630      	mov	r0, r6
 80043ba:	f000 feb9 	bl	8005130 <strcpy>
 80043be:	e79c      	b.n	80042fa <_gcvt+0x42>
 80043c0:	3d01      	subs	r5, #1
 80043c2:	f803 2b01 	strb.w	r2, [r3], #1
 80043c6:	9505      	str	r5, [sp, #20]
 80043c8:	e7d3      	b.n	8004372 <_gcvt+0xba>
 80043ca:	1b2d      	subs	r5, r5, r4
 80043cc:	2730      	movs	r7, #48	; 0x30
 80043ce:	e005      	b.n	80043dc <_gcvt+0x124>
 80043d0:	2c00      	cmp	r4, #0
 80043d2:	dd06      	ble.n	80043e2 <_gcvt+0x12a>
 80043d4:	f803 7b01 	strb.w	r7, [r3], #1
 80043d8:	3c01      	subs	r4, #1
 80043da:	2201      	movs	r2, #1
 80043dc:	1928      	adds	r0, r5, r4
 80043de:	2800      	cmp	r0, #0
 80043e0:	dcf6      	bgt.n	80043d0 <_gcvt+0x118>
 80043e2:	2a00      	cmp	r2, #0
 80043e4:	d0cd      	beq.n	8004382 <_gcvt+0xca>
 80043e6:	9005      	str	r0, [sp, #20]
 80043e8:	e7cb      	b.n	8004382 <_gcvt+0xca>
 80043ea:	f803 7b01 	strb.w	r7, [r3], #1
 80043ee:	3c01      	subs	r4, #1
 80043f0:	2001      	movs	r0, #1
 80043f2:	e7d7      	b.n	80043a4 <_gcvt+0xec>
 80043f4:	2c00      	cmp	r4, #0
 80043f6:	f102 0201 	add.w	r2, r2, #1
 80043fa:	dcf6      	bgt.n	80043ea <_gcvt+0x132>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d0d6      	beq.n	80043ae <_gcvt+0xf6>
 8004400:	9505      	str	r5, [sp, #20]
 8004402:	e7d4      	b.n	80043ae <_gcvt+0xf6>
 8004404:	f803 1b01 	strb.w	r1, [r3], #1
 8004408:	3c01      	subs	r4, #1
 800440a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800440e:	b109      	cbz	r1, 8004414 <_gcvt+0x15c>
 8004410:	2c00      	cmp	r4, #0
 8004412:	dcf7      	bgt.n	8004404 <_gcvt+0x14c>
 8004414:	f1b8 0f00 	cmp.w	r8, #0
 8004418:	d10b      	bne.n	8004432 <_gcvt+0x17a>
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e76c      	b.n	80042fa <_gcvt+0x42>
 8004420:	f802 5b01 	strb.w	r5, [r2], #1
 8004424:	1a81      	subs	r1, r0, r2
 8004426:	2900      	cmp	r1, #0
 8004428:	dcfa      	bgt.n	8004420 <_gcvt+0x168>
 800442a:	2c00      	cmp	r4, #0
 800442c:	bfa8      	it	ge
 800442e:	191b      	addge	r3, r3, r4
 8004430:	e7f3      	b.n	800441a <_gcvt+0x162>
 8004432:	461a      	mov	r2, r3
 8004434:	1918      	adds	r0, r3, r4
 8004436:	2530      	movs	r5, #48	; 0x30
 8004438:	e7f4      	b.n	8004424 <_gcvt+0x16c>
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w
 8004440:	3ff00000 	.word	0x3ff00000
 8004444:	eb1c432d 	.word	0xeb1c432d
 8004448:	3f1a36e2 	.word	0x3f1a36e2

0800444c <_Balloc>:
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004450:	4604      	mov	r4, r0
 8004452:	460e      	mov	r6, r1
 8004454:	b93d      	cbnz	r5, 8004466 <_Balloc+0x1a>
 8004456:	2010      	movs	r0, #16
 8004458:	f001 fcb6 	bl	8005dc8 <malloc>
 800445c:	6260      	str	r0, [r4, #36]	; 0x24
 800445e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004462:	6005      	str	r5, [r0, #0]
 8004464:	60c5      	str	r5, [r0, #12]
 8004466:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004468:	68eb      	ldr	r3, [r5, #12]
 800446a:	b183      	cbz	r3, 800448e <_Balloc+0x42>
 800446c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004474:	b9b8      	cbnz	r0, 80044a6 <_Balloc+0x5a>
 8004476:	2101      	movs	r1, #1
 8004478:	fa01 f506 	lsl.w	r5, r1, r6
 800447c:	1d6a      	adds	r2, r5, #5
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	4620      	mov	r0, r4
 8004482:	f000 fadd 	bl	8004a40 <_calloc_r>
 8004486:	b160      	cbz	r0, 80044a2 <_Balloc+0x56>
 8004488:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800448c:	e00e      	b.n	80044ac <_Balloc+0x60>
 800448e:	2221      	movs	r2, #33	; 0x21
 8004490:	2104      	movs	r1, #4
 8004492:	4620      	mov	r0, r4
 8004494:	f000 fad4 	bl	8004a40 <_calloc_r>
 8004498:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800449a:	60e8      	str	r0, [r5, #12]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e4      	bne.n	800446c <_Balloc+0x20>
 80044a2:	2000      	movs	r0, #0
 80044a4:	bd70      	pop	{r4, r5, r6, pc}
 80044a6:	6802      	ldr	r2, [r0, #0]
 80044a8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80044ac:	2300      	movs	r3, #0
 80044ae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80044b2:	e7f7      	b.n	80044a4 <_Balloc+0x58>

080044b4 <_Bfree>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80044b8:	4606      	mov	r6, r0
 80044ba:	460d      	mov	r5, r1
 80044bc:	b93c      	cbnz	r4, 80044ce <_Bfree+0x1a>
 80044be:	2010      	movs	r0, #16
 80044c0:	f001 fc82 	bl	8005dc8 <malloc>
 80044c4:	6270      	str	r0, [r6, #36]	; 0x24
 80044c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044ca:	6004      	str	r4, [r0, #0]
 80044cc:	60c4      	str	r4, [r0, #12]
 80044ce:	b13d      	cbz	r5, 80044e0 <_Bfree+0x2c>
 80044d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80044d2:	686a      	ldr	r2, [r5, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044da:	6029      	str	r1, [r5, #0]
 80044dc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80044e0:	bd70      	pop	{r4, r5, r6, pc}

080044e2 <__multadd>:
 80044e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e6:	690d      	ldr	r5, [r1, #16]
 80044e8:	461f      	mov	r7, r3
 80044ea:	4606      	mov	r6, r0
 80044ec:	460c      	mov	r4, r1
 80044ee:	f101 0c14 	add.w	ip, r1, #20
 80044f2:	2300      	movs	r3, #0
 80044f4:	f8dc 0000 	ldr.w	r0, [ip]
 80044f8:	b281      	uxth	r1, r0
 80044fa:	fb02 7101 	mla	r1, r2, r1, r7
 80044fe:	0c0f      	lsrs	r7, r1, #16
 8004500:	0c00      	lsrs	r0, r0, #16
 8004502:	fb02 7000 	mla	r0, r2, r0, r7
 8004506:	b289      	uxth	r1, r1
 8004508:	3301      	adds	r3, #1
 800450a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800450e:	429d      	cmp	r5, r3
 8004510:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004514:	f84c 1b04 	str.w	r1, [ip], #4
 8004518:	dcec      	bgt.n	80044f4 <__multadd+0x12>
 800451a:	b1d7      	cbz	r7, 8004552 <__multadd+0x70>
 800451c:	68a3      	ldr	r3, [r4, #8]
 800451e:	42ab      	cmp	r3, r5
 8004520:	dc12      	bgt.n	8004548 <__multadd+0x66>
 8004522:	6861      	ldr	r1, [r4, #4]
 8004524:	4630      	mov	r0, r6
 8004526:	3101      	adds	r1, #1
 8004528:	f7ff ff90 	bl	800444c <_Balloc>
 800452c:	6922      	ldr	r2, [r4, #16]
 800452e:	3202      	adds	r2, #2
 8004530:	f104 010c 	add.w	r1, r4, #12
 8004534:	4680      	mov	r8, r0
 8004536:	0092      	lsls	r2, r2, #2
 8004538:	300c      	adds	r0, #12
 800453a:	f001 fc4d 	bl	8005dd8 <memcpy>
 800453e:	4621      	mov	r1, r4
 8004540:	4630      	mov	r0, r6
 8004542:	f7ff ffb7 	bl	80044b4 <_Bfree>
 8004546:	4644      	mov	r4, r8
 8004548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800454c:	3501      	adds	r5, #1
 800454e:	615f      	str	r7, [r3, #20]
 8004550:	6125      	str	r5, [r4, #16]
 8004552:	4620      	mov	r0, r4
 8004554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004558 <__hi0bits>:
 8004558:	0c02      	lsrs	r2, r0, #16
 800455a:	0412      	lsls	r2, r2, #16
 800455c:	4603      	mov	r3, r0
 800455e:	b9b2      	cbnz	r2, 800458e <__hi0bits+0x36>
 8004560:	0403      	lsls	r3, r0, #16
 8004562:	2010      	movs	r0, #16
 8004564:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004568:	bf04      	itt	eq
 800456a:	021b      	lsleq	r3, r3, #8
 800456c:	3008      	addeq	r0, #8
 800456e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004572:	bf04      	itt	eq
 8004574:	011b      	lsleq	r3, r3, #4
 8004576:	3004      	addeq	r0, #4
 8004578:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800457c:	bf04      	itt	eq
 800457e:	009b      	lsleq	r3, r3, #2
 8004580:	3002      	addeq	r0, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	db06      	blt.n	8004594 <__hi0bits+0x3c>
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	d503      	bpl.n	8004592 <__hi0bits+0x3a>
 800458a:	3001      	adds	r0, #1
 800458c:	4770      	bx	lr
 800458e:	2000      	movs	r0, #0
 8004590:	e7e8      	b.n	8004564 <__hi0bits+0xc>
 8004592:	2020      	movs	r0, #32
 8004594:	4770      	bx	lr

08004596 <__lo0bits>:
 8004596:	6803      	ldr	r3, [r0, #0]
 8004598:	f013 0207 	ands.w	r2, r3, #7
 800459c:	4601      	mov	r1, r0
 800459e:	d00b      	beq.n	80045b8 <__lo0bits+0x22>
 80045a0:	07da      	lsls	r2, r3, #31
 80045a2:	d423      	bmi.n	80045ec <__lo0bits+0x56>
 80045a4:	0798      	lsls	r0, r3, #30
 80045a6:	bf49      	itett	mi
 80045a8:	085b      	lsrmi	r3, r3, #1
 80045aa:	089b      	lsrpl	r3, r3, #2
 80045ac:	2001      	movmi	r0, #1
 80045ae:	600b      	strmi	r3, [r1, #0]
 80045b0:	bf5c      	itt	pl
 80045b2:	600b      	strpl	r3, [r1, #0]
 80045b4:	2002      	movpl	r0, #2
 80045b6:	4770      	bx	lr
 80045b8:	b298      	uxth	r0, r3
 80045ba:	b9a8      	cbnz	r0, 80045e8 <__lo0bits+0x52>
 80045bc:	0c1b      	lsrs	r3, r3, #16
 80045be:	2010      	movs	r0, #16
 80045c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80045c4:	bf04      	itt	eq
 80045c6:	0a1b      	lsreq	r3, r3, #8
 80045c8:	3008      	addeq	r0, #8
 80045ca:	071a      	lsls	r2, r3, #28
 80045cc:	bf04      	itt	eq
 80045ce:	091b      	lsreq	r3, r3, #4
 80045d0:	3004      	addeq	r0, #4
 80045d2:	079a      	lsls	r2, r3, #30
 80045d4:	bf04      	itt	eq
 80045d6:	089b      	lsreq	r3, r3, #2
 80045d8:	3002      	addeq	r0, #2
 80045da:	07da      	lsls	r2, r3, #31
 80045dc:	d402      	bmi.n	80045e4 <__lo0bits+0x4e>
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	d006      	beq.n	80045f0 <__lo0bits+0x5a>
 80045e2:	3001      	adds	r0, #1
 80045e4:	600b      	str	r3, [r1, #0]
 80045e6:	4770      	bx	lr
 80045e8:	4610      	mov	r0, r2
 80045ea:	e7e9      	b.n	80045c0 <__lo0bits+0x2a>
 80045ec:	2000      	movs	r0, #0
 80045ee:	4770      	bx	lr
 80045f0:	2020      	movs	r0, #32
 80045f2:	4770      	bx	lr

080045f4 <__i2b>:
 80045f4:	b510      	push	{r4, lr}
 80045f6:	460c      	mov	r4, r1
 80045f8:	2101      	movs	r1, #1
 80045fa:	f7ff ff27 	bl	800444c <_Balloc>
 80045fe:	2201      	movs	r2, #1
 8004600:	6144      	str	r4, [r0, #20]
 8004602:	6102      	str	r2, [r0, #16]
 8004604:	bd10      	pop	{r4, pc}

08004606 <__multiply>:
 8004606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	4614      	mov	r4, r2
 800460c:	690a      	ldr	r2, [r1, #16]
 800460e:	6923      	ldr	r3, [r4, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	bfb8      	it	lt
 8004614:	460b      	movlt	r3, r1
 8004616:	4688      	mov	r8, r1
 8004618:	bfbc      	itt	lt
 800461a:	46a0      	movlt	r8, r4
 800461c:	461c      	movlt	r4, r3
 800461e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004622:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800462a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800462e:	eb07 0609 	add.w	r6, r7, r9
 8004632:	42b3      	cmp	r3, r6
 8004634:	bfb8      	it	lt
 8004636:	3101      	addlt	r1, #1
 8004638:	f7ff ff08 	bl	800444c <_Balloc>
 800463c:	f100 0514 	add.w	r5, r0, #20
 8004640:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004644:	462b      	mov	r3, r5
 8004646:	2200      	movs	r2, #0
 8004648:	4573      	cmp	r3, lr
 800464a:	d316      	bcc.n	800467a <__multiply+0x74>
 800464c:	f104 0214 	add.w	r2, r4, #20
 8004650:	f108 0114 	add.w	r1, r8, #20
 8004654:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004658:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	9b00      	ldr	r3, [sp, #0]
 8004660:	9201      	str	r2, [sp, #4]
 8004662:	4293      	cmp	r3, r2
 8004664:	d80c      	bhi.n	8004680 <__multiply+0x7a>
 8004666:	2e00      	cmp	r6, #0
 8004668:	dd03      	ble.n	8004672 <__multiply+0x6c>
 800466a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800466e:	2b00      	cmp	r3, #0
 8004670:	d05d      	beq.n	800472e <__multiply+0x128>
 8004672:	6106      	str	r6, [r0, #16]
 8004674:	b003      	add	sp, #12
 8004676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467a:	f843 2b04 	str.w	r2, [r3], #4
 800467e:	e7e3      	b.n	8004648 <__multiply+0x42>
 8004680:	f8b2 b000 	ldrh.w	fp, [r2]
 8004684:	f1bb 0f00 	cmp.w	fp, #0
 8004688:	d023      	beq.n	80046d2 <__multiply+0xcc>
 800468a:	4689      	mov	r9, r1
 800468c:	46ac      	mov	ip, r5
 800468e:	f04f 0800 	mov.w	r8, #0
 8004692:	f859 4b04 	ldr.w	r4, [r9], #4
 8004696:	f8dc a000 	ldr.w	sl, [ip]
 800469a:	b2a3      	uxth	r3, r4
 800469c:	fa1f fa8a 	uxth.w	sl, sl
 80046a0:	fb0b a303 	mla	r3, fp, r3, sl
 80046a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80046a8:	f8dc 4000 	ldr.w	r4, [ip]
 80046ac:	4443      	add	r3, r8
 80046ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80046b2:	fb0b 840a 	mla	r4, fp, sl, r8
 80046b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80046ba:	46e2      	mov	sl, ip
 80046bc:	b29b      	uxth	r3, r3
 80046be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80046c2:	454f      	cmp	r7, r9
 80046c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80046c8:	f84a 3b04 	str.w	r3, [sl], #4
 80046cc:	d82b      	bhi.n	8004726 <__multiply+0x120>
 80046ce:	f8cc 8004 	str.w	r8, [ip, #4]
 80046d2:	9b01      	ldr	r3, [sp, #4]
 80046d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80046d8:	3204      	adds	r2, #4
 80046da:	f1ba 0f00 	cmp.w	sl, #0
 80046de:	d020      	beq.n	8004722 <__multiply+0x11c>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	4689      	mov	r9, r1
 80046e4:	46a8      	mov	r8, r5
 80046e6:	f04f 0b00 	mov.w	fp, #0
 80046ea:	f8b9 c000 	ldrh.w	ip, [r9]
 80046ee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80046f2:	fb0a 440c 	mla	r4, sl, ip, r4
 80046f6:	445c      	add	r4, fp
 80046f8:	46c4      	mov	ip, r8
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004700:	f84c 3b04 	str.w	r3, [ip], #4
 8004704:	f859 3b04 	ldr.w	r3, [r9], #4
 8004708:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800470c:	0c1b      	lsrs	r3, r3, #16
 800470e:	fb0a b303 	mla	r3, sl, r3, fp
 8004712:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004716:	454f      	cmp	r7, r9
 8004718:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800471c:	d805      	bhi.n	800472a <__multiply+0x124>
 800471e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004722:	3504      	adds	r5, #4
 8004724:	e79b      	b.n	800465e <__multiply+0x58>
 8004726:	46d4      	mov	ip, sl
 8004728:	e7b3      	b.n	8004692 <__multiply+0x8c>
 800472a:	46e0      	mov	r8, ip
 800472c:	e7dd      	b.n	80046ea <__multiply+0xe4>
 800472e:	3e01      	subs	r6, #1
 8004730:	e799      	b.n	8004666 <__multiply+0x60>
	...

08004734 <__pow5mult>:
 8004734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004738:	4615      	mov	r5, r2
 800473a:	f012 0203 	ands.w	r2, r2, #3
 800473e:	4606      	mov	r6, r0
 8004740:	460f      	mov	r7, r1
 8004742:	d007      	beq.n	8004754 <__pow5mult+0x20>
 8004744:	3a01      	subs	r2, #1
 8004746:	4c21      	ldr	r4, [pc, #132]	; (80047cc <__pow5mult+0x98>)
 8004748:	2300      	movs	r3, #0
 800474a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800474e:	f7ff fec8 	bl	80044e2 <__multadd>
 8004752:	4607      	mov	r7, r0
 8004754:	10ad      	asrs	r5, r5, #2
 8004756:	d035      	beq.n	80047c4 <__pow5mult+0x90>
 8004758:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800475a:	b93c      	cbnz	r4, 800476c <__pow5mult+0x38>
 800475c:	2010      	movs	r0, #16
 800475e:	f001 fb33 	bl	8005dc8 <malloc>
 8004762:	6270      	str	r0, [r6, #36]	; 0x24
 8004764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004768:	6004      	str	r4, [r0, #0]
 800476a:	60c4      	str	r4, [r0, #12]
 800476c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004774:	b94c      	cbnz	r4, 800478a <__pow5mult+0x56>
 8004776:	f240 2171 	movw	r1, #625	; 0x271
 800477a:	4630      	mov	r0, r6
 800477c:	f7ff ff3a 	bl	80045f4 <__i2b>
 8004780:	2300      	movs	r3, #0
 8004782:	f8c8 0008 	str.w	r0, [r8, #8]
 8004786:	4604      	mov	r4, r0
 8004788:	6003      	str	r3, [r0, #0]
 800478a:	f04f 0800 	mov.w	r8, #0
 800478e:	07eb      	lsls	r3, r5, #31
 8004790:	d50a      	bpl.n	80047a8 <__pow5mult+0x74>
 8004792:	4639      	mov	r1, r7
 8004794:	4622      	mov	r2, r4
 8004796:	4630      	mov	r0, r6
 8004798:	f7ff ff35 	bl	8004606 <__multiply>
 800479c:	4639      	mov	r1, r7
 800479e:	4681      	mov	r9, r0
 80047a0:	4630      	mov	r0, r6
 80047a2:	f7ff fe87 	bl	80044b4 <_Bfree>
 80047a6:	464f      	mov	r7, r9
 80047a8:	106d      	asrs	r5, r5, #1
 80047aa:	d00b      	beq.n	80047c4 <__pow5mult+0x90>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	b938      	cbnz	r0, 80047c0 <__pow5mult+0x8c>
 80047b0:	4622      	mov	r2, r4
 80047b2:	4621      	mov	r1, r4
 80047b4:	4630      	mov	r0, r6
 80047b6:	f7ff ff26 	bl	8004606 <__multiply>
 80047ba:	6020      	str	r0, [r4, #0]
 80047bc:	f8c0 8000 	str.w	r8, [r0]
 80047c0:	4604      	mov	r4, r0
 80047c2:	e7e4      	b.n	800478e <__pow5mult+0x5a>
 80047c4:	4638      	mov	r0, r7
 80047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ca:	bf00      	nop
 80047cc:	08006050 	.word	0x08006050

080047d0 <__lshift>:
 80047d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d4:	460c      	mov	r4, r1
 80047d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	6849      	ldr	r1, [r1, #4]
 80047de:	eb0a 0903 	add.w	r9, sl, r3
 80047e2:	68a3      	ldr	r3, [r4, #8]
 80047e4:	4607      	mov	r7, r0
 80047e6:	4616      	mov	r6, r2
 80047e8:	f109 0501 	add.w	r5, r9, #1
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	db32      	blt.n	8004856 <__lshift+0x86>
 80047f0:	4638      	mov	r0, r7
 80047f2:	f7ff fe2b 	bl	800444c <_Balloc>
 80047f6:	2300      	movs	r3, #0
 80047f8:	4680      	mov	r8, r0
 80047fa:	f100 0114 	add.w	r1, r0, #20
 80047fe:	461a      	mov	r2, r3
 8004800:	4553      	cmp	r3, sl
 8004802:	db2b      	blt.n	800485c <__lshift+0x8c>
 8004804:	6920      	ldr	r0, [r4, #16]
 8004806:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800480a:	f104 0314 	add.w	r3, r4, #20
 800480e:	f016 021f 	ands.w	r2, r6, #31
 8004812:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004816:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800481a:	d025      	beq.n	8004868 <__lshift+0x98>
 800481c:	f1c2 0e20 	rsb	lr, r2, #32
 8004820:	2000      	movs	r0, #0
 8004822:	681e      	ldr	r6, [r3, #0]
 8004824:	468a      	mov	sl, r1
 8004826:	4096      	lsls	r6, r2
 8004828:	4330      	orrs	r0, r6
 800482a:	f84a 0b04 	str.w	r0, [sl], #4
 800482e:	f853 0b04 	ldr.w	r0, [r3], #4
 8004832:	459c      	cmp	ip, r3
 8004834:	fa20 f00e 	lsr.w	r0, r0, lr
 8004838:	d814      	bhi.n	8004864 <__lshift+0x94>
 800483a:	6048      	str	r0, [r1, #4]
 800483c:	b108      	cbz	r0, 8004842 <__lshift+0x72>
 800483e:	f109 0502 	add.w	r5, r9, #2
 8004842:	3d01      	subs	r5, #1
 8004844:	4638      	mov	r0, r7
 8004846:	f8c8 5010 	str.w	r5, [r8, #16]
 800484a:	4621      	mov	r1, r4
 800484c:	f7ff fe32 	bl	80044b4 <_Bfree>
 8004850:	4640      	mov	r0, r8
 8004852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004856:	3101      	adds	r1, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	e7c7      	b.n	80047ec <__lshift+0x1c>
 800485c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004860:	3301      	adds	r3, #1
 8004862:	e7cd      	b.n	8004800 <__lshift+0x30>
 8004864:	4651      	mov	r1, sl
 8004866:	e7dc      	b.n	8004822 <__lshift+0x52>
 8004868:	3904      	subs	r1, #4
 800486a:	f853 2b04 	ldr.w	r2, [r3], #4
 800486e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004872:	459c      	cmp	ip, r3
 8004874:	d8f9      	bhi.n	800486a <__lshift+0x9a>
 8004876:	e7e4      	b.n	8004842 <__lshift+0x72>

08004878 <__mcmp>:
 8004878:	6903      	ldr	r3, [r0, #16]
 800487a:	690a      	ldr	r2, [r1, #16]
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	b530      	push	{r4, r5, lr}
 8004880:	d10c      	bne.n	800489c <__mcmp+0x24>
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	3014      	adds	r0, #20
 8004886:	3114      	adds	r1, #20
 8004888:	1884      	adds	r4, r0, r2
 800488a:	4411      	add	r1, r2
 800488c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004890:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004894:	4295      	cmp	r5, r2
 8004896:	d003      	beq.n	80048a0 <__mcmp+0x28>
 8004898:	d305      	bcc.n	80048a6 <__mcmp+0x2e>
 800489a:	2301      	movs	r3, #1
 800489c:	4618      	mov	r0, r3
 800489e:	bd30      	pop	{r4, r5, pc}
 80048a0:	42a0      	cmp	r0, r4
 80048a2:	d3f3      	bcc.n	800488c <__mcmp+0x14>
 80048a4:	e7fa      	b.n	800489c <__mcmp+0x24>
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
 80048aa:	e7f7      	b.n	800489c <__mcmp+0x24>

080048ac <__mdiff>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	460d      	mov	r5, r1
 80048b2:	4607      	mov	r7, r0
 80048b4:	4611      	mov	r1, r2
 80048b6:	4628      	mov	r0, r5
 80048b8:	4614      	mov	r4, r2
 80048ba:	f7ff ffdd 	bl	8004878 <__mcmp>
 80048be:	1e06      	subs	r6, r0, #0
 80048c0:	d108      	bne.n	80048d4 <__mdiff+0x28>
 80048c2:	4631      	mov	r1, r6
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff fdc1 	bl	800444c <_Balloc>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	bfa4      	itt	ge
 80048d6:	4623      	movge	r3, r4
 80048d8:	462c      	movge	r4, r5
 80048da:	4638      	mov	r0, r7
 80048dc:	6861      	ldr	r1, [r4, #4]
 80048de:	bfa6      	itte	ge
 80048e0:	461d      	movge	r5, r3
 80048e2:	2600      	movge	r6, #0
 80048e4:	2601      	movlt	r6, #1
 80048e6:	f7ff fdb1 	bl	800444c <_Balloc>
 80048ea:	692b      	ldr	r3, [r5, #16]
 80048ec:	60c6      	str	r6, [r0, #12]
 80048ee:	6926      	ldr	r6, [r4, #16]
 80048f0:	f105 0914 	add.w	r9, r5, #20
 80048f4:	f104 0214 	add.w	r2, r4, #20
 80048f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80048fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004900:	f100 0514 	add.w	r5, r0, #20
 8004904:	f04f 0e00 	mov.w	lr, #0
 8004908:	f852 ab04 	ldr.w	sl, [r2], #4
 800490c:	f859 4b04 	ldr.w	r4, [r9], #4
 8004910:	fa1e f18a 	uxtah	r1, lr, sl
 8004914:	b2a3      	uxth	r3, r4
 8004916:	1ac9      	subs	r1, r1, r3
 8004918:	0c23      	lsrs	r3, r4, #16
 800491a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800491e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004922:	b289      	uxth	r1, r1
 8004924:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004928:	45c8      	cmp	r8, r9
 800492a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800492e:	4694      	mov	ip, r2
 8004930:	f845 3b04 	str.w	r3, [r5], #4
 8004934:	d8e8      	bhi.n	8004908 <__mdiff+0x5c>
 8004936:	45bc      	cmp	ip, r7
 8004938:	d304      	bcc.n	8004944 <__mdiff+0x98>
 800493a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800493e:	b183      	cbz	r3, 8004962 <__mdiff+0xb6>
 8004940:	6106      	str	r6, [r0, #16]
 8004942:	e7c5      	b.n	80048d0 <__mdiff+0x24>
 8004944:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004948:	fa1e f381 	uxtah	r3, lr, r1
 800494c:	141a      	asrs	r2, r3, #16
 800494e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004958:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800495c:	f845 3b04 	str.w	r3, [r5], #4
 8004960:	e7e9      	b.n	8004936 <__mdiff+0x8a>
 8004962:	3e01      	subs	r6, #1
 8004964:	e7e9      	b.n	800493a <__mdiff+0x8e>

08004966 <__d2b>:
 8004966:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800496a:	460e      	mov	r6, r1
 800496c:	2101      	movs	r1, #1
 800496e:	ec59 8b10 	vmov	r8, r9, d0
 8004972:	4615      	mov	r5, r2
 8004974:	f7ff fd6a 	bl	800444c <_Balloc>
 8004978:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800497c:	4607      	mov	r7, r0
 800497e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004982:	bb34      	cbnz	r4, 80049d2 <__d2b+0x6c>
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	f1b8 0300 	subs.w	r3, r8, #0
 800498a:	d027      	beq.n	80049dc <__d2b+0x76>
 800498c:	a802      	add	r0, sp, #8
 800498e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004992:	f7ff fe00 	bl	8004596 <__lo0bits>
 8004996:	9900      	ldr	r1, [sp, #0]
 8004998:	b1f0      	cbz	r0, 80049d8 <__d2b+0x72>
 800499a:	9a01      	ldr	r2, [sp, #4]
 800499c:	f1c0 0320 	rsb	r3, r0, #32
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	430b      	orrs	r3, r1
 80049a6:	40c2      	lsrs	r2, r0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	9201      	str	r2, [sp, #4]
 80049ac:	9b01      	ldr	r3, [sp, #4]
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf14      	ite	ne
 80049b4:	2102      	movne	r1, #2
 80049b6:	2101      	moveq	r1, #1
 80049b8:	6139      	str	r1, [r7, #16]
 80049ba:	b1c4      	cbz	r4, 80049ee <__d2b+0x88>
 80049bc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80049c0:	4404      	add	r4, r0
 80049c2:	6034      	str	r4, [r6, #0]
 80049c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80049c8:	6028      	str	r0, [r5, #0]
 80049ca:	4638      	mov	r0, r7
 80049cc:	b003      	add	sp, #12
 80049ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d6:	e7d5      	b.n	8004984 <__d2b+0x1e>
 80049d8:	6179      	str	r1, [r7, #20]
 80049da:	e7e7      	b.n	80049ac <__d2b+0x46>
 80049dc:	a801      	add	r0, sp, #4
 80049de:	f7ff fdda 	bl	8004596 <__lo0bits>
 80049e2:	9b01      	ldr	r3, [sp, #4]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	2101      	movs	r1, #1
 80049e8:	6139      	str	r1, [r7, #16]
 80049ea:	3020      	adds	r0, #32
 80049ec:	e7e5      	b.n	80049ba <__d2b+0x54>
 80049ee:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80049f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80049f6:	6030      	str	r0, [r6, #0]
 80049f8:	6918      	ldr	r0, [r3, #16]
 80049fa:	f7ff fdad 	bl	8004558 <__hi0bits>
 80049fe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004a02:	e7e1      	b.n	80049c8 <__d2b+0x62>

08004a04 <_mprec_log10>:
 8004a04:	2817      	cmp	r0, #23
 8004a06:	b5d0      	push	{r4, r6, r7, lr}
 8004a08:	4604      	mov	r4, r0
 8004a0a:	dc07      	bgt.n	8004a1c <_mprec_log10+0x18>
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <_mprec_log10+0x30>)
 8004a0e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8004a12:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004a16:	ec41 0b10 	vmov	d0, r0, r1
 8004a1a:	bdd0      	pop	{r4, r6, r7, pc}
 8004a1c:	4906      	ldr	r1, [pc, #24]	; (8004a38 <_mprec_log10+0x34>)
 8004a1e:	4f07      	ldr	r7, [pc, #28]	; (8004a3c <_mprec_log10+0x38>)
 8004a20:	2000      	movs	r0, #0
 8004a22:	2600      	movs	r6, #0
 8004a24:	4632      	mov	r2, r6
 8004a26:	463b      	mov	r3, r7
 8004a28:	f7fb fdde 	bl	80005e8 <__aeabi_dmul>
 8004a2c:	3c01      	subs	r4, #1
 8004a2e:	d1f9      	bne.n	8004a24 <_mprec_log10+0x20>
 8004a30:	e7f1      	b.n	8004a16 <_mprec_log10+0x12>
 8004a32:	bf00      	nop
 8004a34:	08005f88 	.word	0x08005f88
 8004a38:	3ff00000 	.word	0x3ff00000
 8004a3c:	40240000 	.word	0x40240000

08004a40 <_calloc_r>:
 8004a40:	b538      	push	{r3, r4, r5, lr}
 8004a42:	fb02 f401 	mul.w	r4, r2, r1
 8004a46:	4621      	mov	r1, r4
 8004a48:	f000 f808 	bl	8004a5c <_malloc_r>
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b118      	cbz	r0, 8004a58 <_calloc_r+0x18>
 8004a50:	4622      	mov	r2, r4
 8004a52:	2100      	movs	r1, #0
 8004a54:	f7ff fb92 	bl	800417c <memset>
 8004a58:	4628      	mov	r0, r5
 8004a5a:	bd38      	pop	{r3, r4, r5, pc}

08004a5c <_malloc_r>:
 8004a5c:	b570      	push	{r4, r5, r6, lr}
 8004a5e:	1ccd      	adds	r5, r1, #3
 8004a60:	f025 0503 	bic.w	r5, r5, #3
 8004a64:	3508      	adds	r5, #8
 8004a66:	2d0c      	cmp	r5, #12
 8004a68:	bf38      	it	cc
 8004a6a:	250c      	movcc	r5, #12
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	4606      	mov	r6, r0
 8004a70:	db01      	blt.n	8004a76 <_malloc_r+0x1a>
 8004a72:	42a9      	cmp	r1, r5
 8004a74:	d903      	bls.n	8004a7e <_malloc_r+0x22>
 8004a76:	230c      	movs	r3, #12
 8004a78:	6033      	str	r3, [r6, #0]
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	bd70      	pop	{r4, r5, r6, pc}
 8004a7e:	f001 f9cf 	bl	8005e20 <__malloc_lock>
 8004a82:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <_malloc_r+0xac>)
 8004a84:	6814      	ldr	r4, [r2, #0]
 8004a86:	4621      	mov	r1, r4
 8004a88:	b991      	cbnz	r1, 8004ab0 <_malloc_r+0x54>
 8004a8a:	4c20      	ldr	r4, [pc, #128]	; (8004b0c <_malloc_r+0xb0>)
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	b91b      	cbnz	r3, 8004a98 <_malloc_r+0x3c>
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 fb3d 	bl	8005110 <_sbrk_r>
 8004a96:	6020      	str	r0, [r4, #0]
 8004a98:	4629      	mov	r1, r5
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f000 fb38 	bl	8005110 <_sbrk_r>
 8004aa0:	1c43      	adds	r3, r0, #1
 8004aa2:	d124      	bne.n	8004aee <_malloc_r+0x92>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	6033      	str	r3, [r6, #0]
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f001 f9ba 	bl	8005e22 <__malloc_unlock>
 8004aae:	e7e4      	b.n	8004a7a <_malloc_r+0x1e>
 8004ab0:	680b      	ldr	r3, [r1, #0]
 8004ab2:	1b5b      	subs	r3, r3, r5
 8004ab4:	d418      	bmi.n	8004ae8 <_malloc_r+0x8c>
 8004ab6:	2b0b      	cmp	r3, #11
 8004ab8:	d90f      	bls.n	8004ada <_malloc_r+0x7e>
 8004aba:	600b      	str	r3, [r1, #0]
 8004abc:	50cd      	str	r5, [r1, r3]
 8004abe:	18cc      	adds	r4, r1, r3
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f001 f9ae 	bl	8005e22 <__malloc_unlock>
 8004ac6:	f104 000b 	add.w	r0, r4, #11
 8004aca:	1d23      	adds	r3, r4, #4
 8004acc:	f020 0007 	bic.w	r0, r0, #7
 8004ad0:	1ac3      	subs	r3, r0, r3
 8004ad2:	d0d3      	beq.n	8004a7c <_malloc_r+0x20>
 8004ad4:	425a      	negs	r2, r3
 8004ad6:	50e2      	str	r2, [r4, r3]
 8004ad8:	e7d0      	b.n	8004a7c <_malloc_r+0x20>
 8004ada:	428c      	cmp	r4, r1
 8004adc:	684b      	ldr	r3, [r1, #4]
 8004ade:	bf16      	itet	ne
 8004ae0:	6063      	strne	r3, [r4, #4]
 8004ae2:	6013      	streq	r3, [r2, #0]
 8004ae4:	460c      	movne	r4, r1
 8004ae6:	e7eb      	b.n	8004ac0 <_malloc_r+0x64>
 8004ae8:	460c      	mov	r4, r1
 8004aea:	6849      	ldr	r1, [r1, #4]
 8004aec:	e7cc      	b.n	8004a88 <_malloc_r+0x2c>
 8004aee:	1cc4      	adds	r4, r0, #3
 8004af0:	f024 0403 	bic.w	r4, r4, #3
 8004af4:	42a0      	cmp	r0, r4
 8004af6:	d005      	beq.n	8004b04 <_malloc_r+0xa8>
 8004af8:	1a21      	subs	r1, r4, r0
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 fb08 	bl	8005110 <_sbrk_r>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d0cf      	beq.n	8004aa4 <_malloc_r+0x48>
 8004b04:	6025      	str	r5, [r4, #0]
 8004b06:	e7db      	b.n	8004ac0 <_malloc_r+0x64>
 8004b08:	200000c8 	.word	0x200000c8
 8004b0c:	200000cc 	.word	0x200000cc

08004b10 <_realloc_r>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	4607      	mov	r7, r0
 8004b14:	4614      	mov	r4, r2
 8004b16:	460e      	mov	r6, r1
 8004b18:	b921      	cbnz	r1, 8004b24 <_realloc_r+0x14>
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b20:	f7ff bf9c 	b.w	8004a5c <_malloc_r>
 8004b24:	b922      	cbnz	r2, 8004b30 <_realloc_r+0x20>
 8004b26:	f001 f97d 	bl	8005e24 <_free_r>
 8004b2a:	4625      	mov	r5, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b30:	f001 f9c6 	bl	8005ec0 <_malloc_usable_size_r>
 8004b34:	42a0      	cmp	r0, r4
 8004b36:	d20f      	bcs.n	8004b58 <_realloc_r+0x48>
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f7ff ff8e 	bl	8004a5c <_malloc_r>
 8004b40:	4605      	mov	r5, r0
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d0f2      	beq.n	8004b2c <_realloc_r+0x1c>
 8004b46:	4631      	mov	r1, r6
 8004b48:	4622      	mov	r2, r4
 8004b4a:	f001 f945 	bl	8005dd8 <memcpy>
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4638      	mov	r0, r7
 8004b52:	f001 f967 	bl	8005e24 <_free_r>
 8004b56:	e7e9      	b.n	8004b2c <_realloc_r+0x1c>
 8004b58:	4635      	mov	r5, r6
 8004b5a:	e7e7      	b.n	8004b2c <_realloc_r+0x1c>

08004b5c <__ssputs_r>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	688e      	ldr	r6, [r1, #8]
 8004b62:	429e      	cmp	r6, r3
 8004b64:	4682      	mov	sl, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	4690      	mov	r8, r2
 8004b6a:	4699      	mov	r9, r3
 8004b6c:	d837      	bhi.n	8004bde <__ssputs_r+0x82>
 8004b6e:	898a      	ldrh	r2, [r1, #12]
 8004b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b74:	d031      	beq.n	8004bda <__ssputs_r+0x7e>
 8004b76:	6825      	ldr	r5, [r4, #0]
 8004b78:	6909      	ldr	r1, [r1, #16]
 8004b7a:	1a6f      	subs	r7, r5, r1
 8004b7c:	6965      	ldr	r5, [r4, #20]
 8004b7e:	2302      	movs	r3, #2
 8004b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b84:	fb95 f5f3 	sdiv	r5, r5, r3
 8004b88:	f109 0301 	add.w	r3, r9, #1
 8004b8c:	443b      	add	r3, r7
 8004b8e:	429d      	cmp	r5, r3
 8004b90:	bf38      	it	cc
 8004b92:	461d      	movcc	r5, r3
 8004b94:	0553      	lsls	r3, r2, #21
 8004b96:	d530      	bpl.n	8004bfa <__ssputs_r+0x9e>
 8004b98:	4629      	mov	r1, r5
 8004b9a:	f7ff ff5f 	bl	8004a5c <_malloc_r>
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	b950      	cbnz	r0, 8004bb8 <__ssputs_r+0x5c>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	f8ca 3000 	str.w	r3, [sl]
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb8:	463a      	mov	r2, r7
 8004bba:	6921      	ldr	r1, [r4, #16]
 8004bbc:	f001 f90c 	bl	8005dd8 <memcpy>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	81a3      	strh	r3, [r4, #12]
 8004bcc:	6126      	str	r6, [r4, #16]
 8004bce:	6165      	str	r5, [r4, #20]
 8004bd0:	443e      	add	r6, r7
 8004bd2:	1bed      	subs	r5, r5, r7
 8004bd4:	6026      	str	r6, [r4, #0]
 8004bd6:	60a5      	str	r5, [r4, #8]
 8004bd8:	464e      	mov	r6, r9
 8004bda:	454e      	cmp	r6, r9
 8004bdc:	d900      	bls.n	8004be0 <__ssputs_r+0x84>
 8004bde:	464e      	mov	r6, r9
 8004be0:	4632      	mov	r2, r6
 8004be2:	4641      	mov	r1, r8
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	f001 f902 	bl	8005dee <memmove>
 8004bea:	68a3      	ldr	r3, [r4, #8]
 8004bec:	1b9b      	subs	r3, r3, r6
 8004bee:	60a3      	str	r3, [r4, #8]
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	441e      	add	r6, r3
 8004bf4:	6026      	str	r6, [r4, #0]
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	e7dc      	b.n	8004bb4 <__ssputs_r+0x58>
 8004bfa:	462a      	mov	r2, r5
 8004bfc:	f7ff ff88 	bl	8004b10 <_realloc_r>
 8004c00:	4606      	mov	r6, r0
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d1e2      	bne.n	8004bcc <__ssputs_r+0x70>
 8004c06:	6921      	ldr	r1, [r4, #16]
 8004c08:	4650      	mov	r0, sl
 8004c0a:	f001 f90b 	bl	8005e24 <_free_r>
 8004c0e:	e7c8      	b.n	8004ba2 <__ssputs_r+0x46>

08004c10 <_svfiprintf_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	461d      	mov	r5, r3
 8004c16:	898b      	ldrh	r3, [r1, #12]
 8004c18:	061f      	lsls	r7, r3, #24
 8004c1a:	b09d      	sub	sp, #116	; 0x74
 8004c1c:	4680      	mov	r8, r0
 8004c1e:	460c      	mov	r4, r1
 8004c20:	4616      	mov	r6, r2
 8004c22:	d50f      	bpl.n	8004c44 <_svfiprintf_r+0x34>
 8004c24:	690b      	ldr	r3, [r1, #16]
 8004c26:	b96b      	cbnz	r3, 8004c44 <_svfiprintf_r+0x34>
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	f7ff ff17 	bl	8004a5c <_malloc_r>
 8004c2e:	6020      	str	r0, [r4, #0]
 8004c30:	6120      	str	r0, [r4, #16]
 8004c32:	b928      	cbnz	r0, 8004c40 <_svfiprintf_r+0x30>
 8004c34:	230c      	movs	r3, #12
 8004c36:	f8c8 3000 	str.w	r3, [r8]
 8004c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3e:	e0c8      	b.n	8004dd2 <_svfiprintf_r+0x1c2>
 8004c40:	2340      	movs	r3, #64	; 0x40
 8004c42:	6163      	str	r3, [r4, #20]
 8004c44:	2300      	movs	r3, #0
 8004c46:	9309      	str	r3, [sp, #36]	; 0x24
 8004c48:	2320      	movs	r3, #32
 8004c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c4e:	2330      	movs	r3, #48	; 0x30
 8004c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c54:	9503      	str	r5, [sp, #12]
 8004c56:	f04f 0b01 	mov.w	fp, #1
 8004c5a:	4637      	mov	r7, r6
 8004c5c:	463d      	mov	r5, r7
 8004c5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c62:	b10b      	cbz	r3, 8004c68 <_svfiprintf_r+0x58>
 8004c64:	2b25      	cmp	r3, #37	; 0x25
 8004c66:	d13e      	bne.n	8004ce6 <_svfiprintf_r+0xd6>
 8004c68:	ebb7 0a06 	subs.w	sl, r7, r6
 8004c6c:	d00b      	beq.n	8004c86 <_svfiprintf_r+0x76>
 8004c6e:	4653      	mov	r3, sl
 8004c70:	4632      	mov	r2, r6
 8004c72:	4621      	mov	r1, r4
 8004c74:	4640      	mov	r0, r8
 8004c76:	f7ff ff71 	bl	8004b5c <__ssputs_r>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	f000 80a4 	beq.w	8004dc8 <_svfiprintf_r+0x1b8>
 8004c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c82:	4453      	add	r3, sl
 8004c84:	9309      	str	r3, [sp, #36]	; 0x24
 8004c86:	783b      	ldrb	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 809d 	beq.w	8004dc8 <_svfiprintf_r+0x1b8>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	f04f 32ff 	mov.w	r2, #4294967295
 8004c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c98:	9304      	str	r3, [sp, #16]
 8004c9a:	9307      	str	r3, [sp, #28]
 8004c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ca2:	462f      	mov	r7, r5
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004caa:	4850      	ldr	r0, [pc, #320]	; (8004dec <_svfiprintf_r+0x1dc>)
 8004cac:	f7fb fa90 	bl	80001d0 <memchr>
 8004cb0:	9b04      	ldr	r3, [sp, #16]
 8004cb2:	b9d0      	cbnz	r0, 8004cea <_svfiprintf_r+0xda>
 8004cb4:	06d9      	lsls	r1, r3, #27
 8004cb6:	bf44      	itt	mi
 8004cb8:	2220      	movmi	r2, #32
 8004cba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cbe:	071a      	lsls	r2, r3, #28
 8004cc0:	bf44      	itt	mi
 8004cc2:	222b      	movmi	r2, #43	; 0x2b
 8004cc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004cc8:	782a      	ldrb	r2, [r5, #0]
 8004cca:	2a2a      	cmp	r2, #42	; 0x2a
 8004ccc:	d015      	beq.n	8004cfa <_svfiprintf_r+0xea>
 8004cce:	9a07      	ldr	r2, [sp, #28]
 8004cd0:	462f      	mov	r7, r5
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	250a      	movs	r5, #10
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cdc:	3b30      	subs	r3, #48	; 0x30
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d94d      	bls.n	8004d7e <_svfiprintf_r+0x16e>
 8004ce2:	b1b8      	cbz	r0, 8004d14 <_svfiprintf_r+0x104>
 8004ce4:	e00f      	b.n	8004d06 <_svfiprintf_r+0xf6>
 8004ce6:	462f      	mov	r7, r5
 8004ce8:	e7b8      	b.n	8004c5c <_svfiprintf_r+0x4c>
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <_svfiprintf_r+0x1dc>)
 8004cec:	1a80      	subs	r0, r0, r2
 8004cee:	fa0b f000 	lsl.w	r0, fp, r0
 8004cf2:	4318      	orrs	r0, r3
 8004cf4:	9004      	str	r0, [sp, #16]
 8004cf6:	463d      	mov	r5, r7
 8004cf8:	e7d3      	b.n	8004ca2 <_svfiprintf_r+0x92>
 8004cfa:	9a03      	ldr	r2, [sp, #12]
 8004cfc:	1d11      	adds	r1, r2, #4
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	9103      	str	r1, [sp, #12]
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	db01      	blt.n	8004d0a <_svfiprintf_r+0xfa>
 8004d06:	9207      	str	r2, [sp, #28]
 8004d08:	e004      	b.n	8004d14 <_svfiprintf_r+0x104>
 8004d0a:	4252      	negs	r2, r2
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	9207      	str	r2, [sp, #28]
 8004d12:	9304      	str	r3, [sp, #16]
 8004d14:	783b      	ldrb	r3, [r7, #0]
 8004d16:	2b2e      	cmp	r3, #46	; 0x2e
 8004d18:	d10c      	bne.n	8004d34 <_svfiprintf_r+0x124>
 8004d1a:	787b      	ldrb	r3, [r7, #1]
 8004d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1e:	d133      	bne.n	8004d88 <_svfiprintf_r+0x178>
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	9203      	str	r2, [sp, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	bfb8      	it	lt
 8004d2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d30:	3702      	adds	r7, #2
 8004d32:	9305      	str	r3, [sp, #20]
 8004d34:	4d2e      	ldr	r5, [pc, #184]	; (8004df0 <_svfiprintf_r+0x1e0>)
 8004d36:	7839      	ldrb	r1, [r7, #0]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f7fb fa48 	bl	80001d0 <memchr>
 8004d40:	b138      	cbz	r0, 8004d52 <_svfiprintf_r+0x142>
 8004d42:	2340      	movs	r3, #64	; 0x40
 8004d44:	1b40      	subs	r0, r0, r5
 8004d46:	fa03 f000 	lsl.w	r0, r3, r0
 8004d4a:	9b04      	ldr	r3, [sp, #16]
 8004d4c:	4303      	orrs	r3, r0
 8004d4e:	3701      	adds	r7, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	7839      	ldrb	r1, [r7, #0]
 8004d54:	4827      	ldr	r0, [pc, #156]	; (8004df4 <_svfiprintf_r+0x1e4>)
 8004d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d5a:	2206      	movs	r2, #6
 8004d5c:	1c7e      	adds	r6, r7, #1
 8004d5e:	f7fb fa37 	bl	80001d0 <memchr>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d038      	beq.n	8004dd8 <_svfiprintf_r+0x1c8>
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <_svfiprintf_r+0x1e8>)
 8004d68:	bb13      	cbnz	r3, 8004db0 <_svfiprintf_r+0x1a0>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	3308      	adds	r3, #8
 8004d74:	9303      	str	r3, [sp, #12]
 8004d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d78:	444b      	add	r3, r9
 8004d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7c:	e76d      	b.n	8004c5a <_svfiprintf_r+0x4a>
 8004d7e:	fb05 3202 	mla	r2, r5, r2, r3
 8004d82:	2001      	movs	r0, #1
 8004d84:	460f      	mov	r7, r1
 8004d86:	e7a6      	b.n	8004cd6 <_svfiprintf_r+0xc6>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	3701      	adds	r7, #1
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	250a      	movs	r5, #10
 8004d92:	4638      	mov	r0, r7
 8004d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d98:	3a30      	subs	r2, #48	; 0x30
 8004d9a:	2a09      	cmp	r2, #9
 8004d9c:	d903      	bls.n	8004da6 <_svfiprintf_r+0x196>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0c8      	beq.n	8004d34 <_svfiprintf_r+0x124>
 8004da2:	9105      	str	r1, [sp, #20]
 8004da4:	e7c6      	b.n	8004d34 <_svfiprintf_r+0x124>
 8004da6:	fb05 2101 	mla	r1, r5, r1, r2
 8004daa:	2301      	movs	r3, #1
 8004dac:	4607      	mov	r7, r0
 8004dae:	e7f0      	b.n	8004d92 <_svfiprintf_r+0x182>
 8004db0:	ab03      	add	r3, sp, #12
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	4622      	mov	r2, r4
 8004db6:	4b11      	ldr	r3, [pc, #68]	; (8004dfc <_svfiprintf_r+0x1ec>)
 8004db8:	a904      	add	r1, sp, #16
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f3af 8000 	nop.w
 8004dc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004dc4:	4681      	mov	r9, r0
 8004dc6:	d1d6      	bne.n	8004d76 <_svfiprintf_r+0x166>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	065b      	lsls	r3, r3, #25
 8004dcc:	f53f af35 	bmi.w	8004c3a <_svfiprintf_r+0x2a>
 8004dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004dd2:	b01d      	add	sp, #116	; 0x74
 8004dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd8:	ab03      	add	r3, sp, #12
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4622      	mov	r2, r4
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <_svfiprintf_r+0x1ec>)
 8004de0:	a904      	add	r1, sp, #16
 8004de2:	4640      	mov	r0, r8
 8004de4:	f000 f882 	bl	8004eec <_printf_i>
 8004de8:	e7ea      	b.n	8004dc0 <_svfiprintf_r+0x1b0>
 8004dea:	bf00      	nop
 8004dec:	0800605c 	.word	0x0800605c
 8004df0:	08006062 	.word	0x08006062
 8004df4:	08006066 	.word	0x08006066
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	08004b5d 	.word	0x08004b5d

08004e00 <_printf_common>:
 8004e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	4691      	mov	r9, r2
 8004e06:	461f      	mov	r7, r3
 8004e08:	688a      	ldr	r2, [r1, #8]
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e10:	4293      	cmp	r3, r2
 8004e12:	bfb8      	it	lt
 8004e14:	4613      	movlt	r3, r2
 8004e16:	f8c9 3000 	str.w	r3, [r9]
 8004e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e1e:	4606      	mov	r6, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	b112      	cbz	r2, 8004e2a <_printf_common+0x2a>
 8004e24:	3301      	adds	r3, #1
 8004e26:	f8c9 3000 	str.w	r3, [r9]
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	0699      	lsls	r1, r3, #26
 8004e2e:	bf42      	ittt	mi
 8004e30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004e34:	3302      	addmi	r3, #2
 8004e36:	f8c9 3000 	strmi.w	r3, [r9]
 8004e3a:	6825      	ldr	r5, [r4, #0]
 8004e3c:	f015 0506 	ands.w	r5, r5, #6
 8004e40:	d107      	bne.n	8004e52 <_printf_common+0x52>
 8004e42:	f104 0a19 	add.w	sl, r4, #25
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	f8d9 2000 	ldr.w	r2, [r9]
 8004e4c:	1a9b      	subs	r3, r3, r2
 8004e4e:	42ab      	cmp	r3, r5
 8004e50:	dc28      	bgt.n	8004ea4 <_printf_common+0xa4>
 8004e52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	3300      	adds	r3, #0
 8004e5a:	bf18      	it	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	0692      	lsls	r2, r2, #26
 8004e60:	d42d      	bmi.n	8004ebe <_printf_common+0xbe>
 8004e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e66:	4639      	mov	r1, r7
 8004e68:	4630      	mov	r0, r6
 8004e6a:	47c0      	blx	r8
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d020      	beq.n	8004eb2 <_printf_common+0xb2>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	68e5      	ldr	r5, [r4, #12]
 8004e74:	f8d9 2000 	ldr.w	r2, [r9]
 8004e78:	f003 0306 	and.w	r3, r3, #6
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	bf08      	it	eq
 8004e80:	1aad      	subeq	r5, r5, r2
 8004e82:	68a3      	ldr	r3, [r4, #8]
 8004e84:	6922      	ldr	r2, [r4, #16]
 8004e86:	bf0c      	ite	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	2500      	movne	r5, #0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfc4      	itt	gt
 8004e92:	1a9b      	subgt	r3, r3, r2
 8004e94:	18ed      	addgt	r5, r5, r3
 8004e96:	f04f 0900 	mov.w	r9, #0
 8004e9a:	341a      	adds	r4, #26
 8004e9c:	454d      	cmp	r5, r9
 8004e9e:	d11a      	bne.n	8004ed6 <_printf_common+0xd6>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	e008      	b.n	8004eb6 <_printf_common+0xb6>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	4652      	mov	r2, sl
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	4630      	mov	r0, r6
 8004eac:	47c0      	blx	r8
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d103      	bne.n	8004eba <_printf_common+0xba>
 8004eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eba:	3501      	adds	r5, #1
 8004ebc:	e7c3      	b.n	8004e46 <_printf_common+0x46>
 8004ebe:	18e1      	adds	r1, r4, r3
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	2030      	movs	r0, #48	; 0x30
 8004ec4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ec8:	4422      	add	r2, r4
 8004eca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	e7c5      	b.n	8004e62 <_printf_common+0x62>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	4622      	mov	r2, r4
 8004eda:	4639      	mov	r1, r7
 8004edc:	4630      	mov	r0, r6
 8004ede:	47c0      	blx	r8
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d0e6      	beq.n	8004eb2 <_printf_common+0xb2>
 8004ee4:	f109 0901 	add.w	r9, r9, #1
 8004ee8:	e7d8      	b.n	8004e9c <_printf_common+0x9c>
	...

08004eec <_printf_i>:
 8004eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ef0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	7e09      	ldrb	r1, [r1, #24]
 8004ef8:	b085      	sub	sp, #20
 8004efa:	296e      	cmp	r1, #110	; 0x6e
 8004efc:	4617      	mov	r7, r2
 8004efe:	4606      	mov	r6, r0
 8004f00:	4698      	mov	r8, r3
 8004f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f04:	f000 80b3 	beq.w	800506e <_printf_i+0x182>
 8004f08:	d822      	bhi.n	8004f50 <_printf_i+0x64>
 8004f0a:	2963      	cmp	r1, #99	; 0x63
 8004f0c:	d036      	beq.n	8004f7c <_printf_i+0x90>
 8004f0e:	d80a      	bhi.n	8004f26 <_printf_i+0x3a>
 8004f10:	2900      	cmp	r1, #0
 8004f12:	f000 80b9 	beq.w	8005088 <_printf_i+0x19c>
 8004f16:	2958      	cmp	r1, #88	; 0x58
 8004f18:	f000 8083 	beq.w	8005022 <_printf_i+0x136>
 8004f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004f24:	e032      	b.n	8004f8c <_printf_i+0xa0>
 8004f26:	2964      	cmp	r1, #100	; 0x64
 8004f28:	d001      	beq.n	8004f2e <_printf_i+0x42>
 8004f2a:	2969      	cmp	r1, #105	; 0x69
 8004f2c:	d1f6      	bne.n	8004f1c <_printf_i+0x30>
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	0605      	lsls	r5, r0, #24
 8004f34:	f103 0104 	add.w	r1, r3, #4
 8004f38:	d52a      	bpl.n	8004f90 <_printf_i+0xa4>
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6011      	str	r1, [r2, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da03      	bge.n	8004f4a <_printf_i+0x5e>
 8004f42:	222d      	movs	r2, #45	; 0x2d
 8004f44:	425b      	negs	r3, r3
 8004f46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004f4a:	486f      	ldr	r0, [pc, #444]	; (8005108 <_printf_i+0x21c>)
 8004f4c:	220a      	movs	r2, #10
 8004f4e:	e039      	b.n	8004fc4 <_printf_i+0xd8>
 8004f50:	2973      	cmp	r1, #115	; 0x73
 8004f52:	f000 809d 	beq.w	8005090 <_printf_i+0x1a4>
 8004f56:	d808      	bhi.n	8004f6a <_printf_i+0x7e>
 8004f58:	296f      	cmp	r1, #111	; 0x6f
 8004f5a:	d020      	beq.n	8004f9e <_printf_i+0xb2>
 8004f5c:	2970      	cmp	r1, #112	; 0x70
 8004f5e:	d1dd      	bne.n	8004f1c <_printf_i+0x30>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	f043 0320 	orr.w	r3, r3, #32
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	e003      	b.n	8004f72 <_printf_i+0x86>
 8004f6a:	2975      	cmp	r1, #117	; 0x75
 8004f6c:	d017      	beq.n	8004f9e <_printf_i+0xb2>
 8004f6e:	2978      	cmp	r1, #120	; 0x78
 8004f70:	d1d4      	bne.n	8004f1c <_printf_i+0x30>
 8004f72:	2378      	movs	r3, #120	; 0x78
 8004f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f78:	4864      	ldr	r0, [pc, #400]	; (800510c <_printf_i+0x220>)
 8004f7a:	e055      	b.n	8005028 <_printf_i+0x13c>
 8004f7c:	6813      	ldr	r3, [r2, #0]
 8004f7e:	1d19      	adds	r1, r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6011      	str	r1, [r2, #0]
 8004f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e08c      	b.n	80050aa <_printf_i+0x1be>
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6011      	str	r1, [r2, #0]
 8004f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f98:	bf18      	it	ne
 8004f9a:	b21b      	sxthne	r3, r3
 8004f9c:	e7cf      	b.n	8004f3e <_printf_i+0x52>
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	6825      	ldr	r5, [r4, #0]
 8004fa2:	1d18      	adds	r0, r3, #4
 8004fa4:	6010      	str	r0, [r2, #0]
 8004fa6:	0628      	lsls	r0, r5, #24
 8004fa8:	d501      	bpl.n	8004fae <_printf_i+0xc2>
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	e002      	b.n	8004fb4 <_printf_i+0xc8>
 8004fae:	0668      	lsls	r0, r5, #25
 8004fb0:	d5fb      	bpl.n	8004faa <_printf_i+0xbe>
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	4854      	ldr	r0, [pc, #336]	; (8005108 <_printf_i+0x21c>)
 8004fb6:	296f      	cmp	r1, #111	; 0x6f
 8004fb8:	bf14      	ite	ne
 8004fba:	220a      	movne	r2, #10
 8004fbc:	2208      	moveq	r2, #8
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fc4:	6865      	ldr	r5, [r4, #4]
 8004fc6:	60a5      	str	r5, [r4, #8]
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	f2c0 8095 	blt.w	80050f8 <_printf_i+0x20c>
 8004fce:	6821      	ldr	r1, [r4, #0]
 8004fd0:	f021 0104 	bic.w	r1, r1, #4
 8004fd4:	6021      	str	r1, [r4, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d13d      	bne.n	8005056 <_printf_i+0x16a>
 8004fda:	2d00      	cmp	r5, #0
 8004fdc:	f040 808e 	bne.w	80050fc <_printf_i+0x210>
 8004fe0:	4665      	mov	r5, ip
 8004fe2:	2a08      	cmp	r2, #8
 8004fe4:	d10b      	bne.n	8004ffe <_printf_i+0x112>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	07db      	lsls	r3, r3, #31
 8004fea:	d508      	bpl.n	8004ffe <_printf_i+0x112>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	6862      	ldr	r2, [r4, #4]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	bfde      	ittt	le
 8004ff4:	2330      	movle	r3, #48	; 0x30
 8004ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ffa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ffe:	ebac 0305 	sub.w	r3, ip, r5
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	f8cd 8000 	str.w	r8, [sp]
 8005008:	463b      	mov	r3, r7
 800500a:	aa03      	add	r2, sp, #12
 800500c:	4621      	mov	r1, r4
 800500e:	4630      	mov	r0, r6
 8005010:	f7ff fef6 	bl	8004e00 <_printf_common>
 8005014:	3001      	adds	r0, #1
 8005016:	d14d      	bne.n	80050b4 <_printf_i+0x1c8>
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	b005      	add	sp, #20
 800501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005022:	4839      	ldr	r0, [pc, #228]	; (8005108 <_printf_i+0x21c>)
 8005024:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005028:	6813      	ldr	r3, [r2, #0]
 800502a:	6821      	ldr	r1, [r4, #0]
 800502c:	1d1d      	adds	r5, r3, #4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6015      	str	r5, [r2, #0]
 8005032:	060a      	lsls	r2, r1, #24
 8005034:	d50b      	bpl.n	800504e <_printf_i+0x162>
 8005036:	07ca      	lsls	r2, r1, #31
 8005038:	bf44      	itt	mi
 800503a:	f041 0120 	orrmi.w	r1, r1, #32
 800503e:	6021      	strmi	r1, [r4, #0]
 8005040:	b91b      	cbnz	r3, 800504a <_printf_i+0x15e>
 8005042:	6822      	ldr	r2, [r4, #0]
 8005044:	f022 0220 	bic.w	r2, r2, #32
 8005048:	6022      	str	r2, [r4, #0]
 800504a:	2210      	movs	r2, #16
 800504c:	e7b7      	b.n	8004fbe <_printf_i+0xd2>
 800504e:	064d      	lsls	r5, r1, #25
 8005050:	bf48      	it	mi
 8005052:	b29b      	uxthmi	r3, r3
 8005054:	e7ef      	b.n	8005036 <_printf_i+0x14a>
 8005056:	4665      	mov	r5, ip
 8005058:	fbb3 f1f2 	udiv	r1, r3, r2
 800505c:	fb02 3311 	mls	r3, r2, r1, r3
 8005060:	5cc3      	ldrb	r3, [r0, r3]
 8005062:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005066:	460b      	mov	r3, r1
 8005068:	2900      	cmp	r1, #0
 800506a:	d1f5      	bne.n	8005058 <_printf_i+0x16c>
 800506c:	e7b9      	b.n	8004fe2 <_printf_i+0xf6>
 800506e:	6813      	ldr	r3, [r2, #0]
 8005070:	6825      	ldr	r5, [r4, #0]
 8005072:	6961      	ldr	r1, [r4, #20]
 8005074:	1d18      	adds	r0, r3, #4
 8005076:	6010      	str	r0, [r2, #0]
 8005078:	0628      	lsls	r0, r5, #24
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	d501      	bpl.n	8005082 <_printf_i+0x196>
 800507e:	6019      	str	r1, [r3, #0]
 8005080:	e002      	b.n	8005088 <_printf_i+0x19c>
 8005082:	066a      	lsls	r2, r5, #25
 8005084:	d5fb      	bpl.n	800507e <_printf_i+0x192>
 8005086:	8019      	strh	r1, [r3, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	4665      	mov	r5, ip
 800508e:	e7b9      	b.n	8005004 <_printf_i+0x118>
 8005090:	6813      	ldr	r3, [r2, #0]
 8005092:	1d19      	adds	r1, r3, #4
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	681d      	ldr	r5, [r3, #0]
 8005098:	6862      	ldr	r2, [r4, #4]
 800509a:	2100      	movs	r1, #0
 800509c:	4628      	mov	r0, r5
 800509e:	f7fb f897 	bl	80001d0 <memchr>
 80050a2:	b108      	cbz	r0, 80050a8 <_printf_i+0x1bc>
 80050a4:	1b40      	subs	r0, r0, r5
 80050a6:	6060      	str	r0, [r4, #4]
 80050a8:	6863      	ldr	r3, [r4, #4]
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	2300      	movs	r3, #0
 80050ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b2:	e7a7      	b.n	8005004 <_printf_i+0x118>
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	462a      	mov	r2, r5
 80050b8:	4639      	mov	r1, r7
 80050ba:	4630      	mov	r0, r6
 80050bc:	47c0      	blx	r8
 80050be:	3001      	adds	r0, #1
 80050c0:	d0aa      	beq.n	8005018 <_printf_i+0x12c>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	079b      	lsls	r3, r3, #30
 80050c6:	d413      	bmi.n	80050f0 <_printf_i+0x204>
 80050c8:	68e0      	ldr	r0, [r4, #12]
 80050ca:	9b03      	ldr	r3, [sp, #12]
 80050cc:	4298      	cmp	r0, r3
 80050ce:	bfb8      	it	lt
 80050d0:	4618      	movlt	r0, r3
 80050d2:	e7a3      	b.n	800501c <_printf_i+0x130>
 80050d4:	2301      	movs	r3, #1
 80050d6:	464a      	mov	r2, r9
 80050d8:	4639      	mov	r1, r7
 80050da:	4630      	mov	r0, r6
 80050dc:	47c0      	blx	r8
 80050de:	3001      	adds	r0, #1
 80050e0:	d09a      	beq.n	8005018 <_printf_i+0x12c>
 80050e2:	3501      	adds	r5, #1
 80050e4:	68e3      	ldr	r3, [r4, #12]
 80050e6:	9a03      	ldr	r2, [sp, #12]
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	42ab      	cmp	r3, r5
 80050ec:	dcf2      	bgt.n	80050d4 <_printf_i+0x1e8>
 80050ee:	e7eb      	b.n	80050c8 <_printf_i+0x1dc>
 80050f0:	2500      	movs	r5, #0
 80050f2:	f104 0919 	add.w	r9, r4, #25
 80050f6:	e7f5      	b.n	80050e4 <_printf_i+0x1f8>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ac      	bne.n	8005056 <_printf_i+0x16a>
 80050fc:	7803      	ldrb	r3, [r0, #0]
 80050fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005102:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005106:	e76c      	b.n	8004fe2 <_printf_i+0xf6>
 8005108:	0800606d 	.word	0x0800606d
 800510c:	0800607e 	.word	0x0800607e

08005110 <_sbrk_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4c06      	ldr	r4, [pc, #24]	; (800512c <_sbrk_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4605      	mov	r5, r0
 8005118:	4608      	mov	r0, r1
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	f7fe f92c 	bl	8003378 <_sbrk>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_sbrk_r+0x1a>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	b103      	cbz	r3, 800512a <_sbrk_r+0x1a>
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	2000025c 	.word	0x2000025c

08005130 <strcpy>:
 8005130:	4603      	mov	r3, r0
 8005132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005136:	f803 2b01 	strb.w	r2, [r3], #1
 800513a:	2a00      	cmp	r2, #0
 800513c:	d1f9      	bne.n	8005132 <strcpy+0x2>
 800513e:	4770      	bx	lr

08005140 <quorem>:
 8005140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	6903      	ldr	r3, [r0, #16]
 8005146:	690c      	ldr	r4, [r1, #16]
 8005148:	42a3      	cmp	r3, r4
 800514a:	4680      	mov	r8, r0
 800514c:	f2c0 8082 	blt.w	8005254 <quorem+0x114>
 8005150:	3c01      	subs	r4, #1
 8005152:	f101 0714 	add.w	r7, r1, #20
 8005156:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800515a:	f100 0614 	add.w	r6, r0, #20
 800515e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005162:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005166:	eb06 030c 	add.w	r3, r6, ip
 800516a:	3501      	adds	r5, #1
 800516c:	eb07 090c 	add.w	r9, r7, ip
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	fbb0 f5f5 	udiv	r5, r0, r5
 8005176:	b395      	cbz	r5, 80051de <quorem+0x9e>
 8005178:	f04f 0a00 	mov.w	sl, #0
 800517c:	4638      	mov	r0, r7
 800517e:	46b6      	mov	lr, r6
 8005180:	46d3      	mov	fp, sl
 8005182:	f850 2b04 	ldr.w	r2, [r0], #4
 8005186:	b293      	uxth	r3, r2
 8005188:	fb05 a303 	mla	r3, r5, r3, sl
 800518c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005190:	b29b      	uxth	r3, r3
 8005192:	ebab 0303 	sub.w	r3, fp, r3
 8005196:	0c12      	lsrs	r2, r2, #16
 8005198:	f8de b000 	ldr.w	fp, [lr]
 800519c:	fb05 a202 	mla	r2, r5, r2, sl
 80051a0:	fa13 f38b 	uxtah	r3, r3, fp
 80051a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80051a8:	fa1f fb82 	uxth.w	fp, r2
 80051ac:	f8de 2000 	ldr.w	r2, [lr]
 80051b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80051b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051be:	4581      	cmp	r9, r0
 80051c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80051c4:	f84e 3b04 	str.w	r3, [lr], #4
 80051c8:	d2db      	bcs.n	8005182 <quorem+0x42>
 80051ca:	f856 300c 	ldr.w	r3, [r6, ip]
 80051ce:	b933      	cbnz	r3, 80051de <quorem+0x9e>
 80051d0:	9b01      	ldr	r3, [sp, #4]
 80051d2:	3b04      	subs	r3, #4
 80051d4:	429e      	cmp	r6, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	d330      	bcc.n	800523c <quorem+0xfc>
 80051da:	f8c8 4010 	str.w	r4, [r8, #16]
 80051de:	4640      	mov	r0, r8
 80051e0:	f7ff fb4a 	bl	8004878 <__mcmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	db25      	blt.n	8005234 <quorem+0xf4>
 80051e8:	3501      	adds	r5, #1
 80051ea:	4630      	mov	r0, r6
 80051ec:	f04f 0c00 	mov.w	ip, #0
 80051f0:	f857 2b04 	ldr.w	r2, [r7], #4
 80051f4:	f8d0 e000 	ldr.w	lr, [r0]
 80051f8:	b293      	uxth	r3, r2
 80051fa:	ebac 0303 	sub.w	r3, ip, r3
 80051fe:	0c12      	lsrs	r2, r2, #16
 8005200:	fa13 f38e 	uxtah	r3, r3, lr
 8005204:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005208:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800520c:	b29b      	uxth	r3, r3
 800520e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005212:	45b9      	cmp	r9, r7
 8005214:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005218:	f840 3b04 	str.w	r3, [r0], #4
 800521c:	d2e8      	bcs.n	80051f0 <quorem+0xb0>
 800521e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005222:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005226:	b92a      	cbnz	r2, 8005234 <quorem+0xf4>
 8005228:	3b04      	subs	r3, #4
 800522a:	429e      	cmp	r6, r3
 800522c:	461a      	mov	r2, r3
 800522e:	d30b      	bcc.n	8005248 <quorem+0x108>
 8005230:	f8c8 4010 	str.w	r4, [r8, #16]
 8005234:	4628      	mov	r0, r5
 8005236:	b003      	add	sp, #12
 8005238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	3b04      	subs	r3, #4
 8005240:	2a00      	cmp	r2, #0
 8005242:	d1ca      	bne.n	80051da <quorem+0x9a>
 8005244:	3c01      	subs	r4, #1
 8005246:	e7c5      	b.n	80051d4 <quorem+0x94>
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	3b04      	subs	r3, #4
 800524c:	2a00      	cmp	r2, #0
 800524e:	d1ef      	bne.n	8005230 <quorem+0xf0>
 8005250:	3c01      	subs	r4, #1
 8005252:	e7ea      	b.n	800522a <quorem+0xea>
 8005254:	2000      	movs	r0, #0
 8005256:	e7ee      	b.n	8005236 <quorem+0xf6>

08005258 <_dtoa_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	ec57 6b10 	vmov	r6, r7, d0
 8005260:	b097      	sub	sp, #92	; 0x5c
 8005262:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005264:	9106      	str	r1, [sp, #24]
 8005266:	4604      	mov	r4, r0
 8005268:	920b      	str	r2, [sp, #44]	; 0x2c
 800526a:	9312      	str	r3, [sp, #72]	; 0x48
 800526c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005270:	e9cd 6700 	strd	r6, r7, [sp]
 8005274:	b93d      	cbnz	r5, 8005286 <_dtoa_r+0x2e>
 8005276:	2010      	movs	r0, #16
 8005278:	f000 fda6 	bl	8005dc8 <malloc>
 800527c:	6260      	str	r0, [r4, #36]	; 0x24
 800527e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005282:	6005      	str	r5, [r0, #0]
 8005284:	60c5      	str	r5, [r0, #12]
 8005286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005288:	6819      	ldr	r1, [r3, #0]
 800528a:	b151      	cbz	r1, 80052a2 <_dtoa_r+0x4a>
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	604a      	str	r2, [r1, #4]
 8005290:	2301      	movs	r3, #1
 8005292:	4093      	lsls	r3, r2
 8005294:	608b      	str	r3, [r1, #8]
 8005296:	4620      	mov	r0, r4
 8005298:	f7ff f90c 	bl	80044b4 <_Bfree>
 800529c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	1e3b      	subs	r3, r7, #0
 80052a4:	bfbb      	ittet	lt
 80052a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80052aa:	9301      	strlt	r3, [sp, #4]
 80052ac:	2300      	movge	r3, #0
 80052ae:	2201      	movlt	r2, #1
 80052b0:	bfac      	ite	ge
 80052b2:	f8c8 3000 	strge.w	r3, [r8]
 80052b6:	f8c8 2000 	strlt.w	r2, [r8]
 80052ba:	4baf      	ldr	r3, [pc, #700]	; (8005578 <_dtoa_r+0x320>)
 80052bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80052c0:	ea33 0308 	bics.w	r3, r3, r8
 80052c4:	d114      	bne.n	80052f0 <_dtoa_r+0x98>
 80052c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	9b00      	ldr	r3, [sp, #0]
 80052d0:	b923      	cbnz	r3, 80052dc <_dtoa_r+0x84>
 80052d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f000 8542 	beq.w	8005d60 <_dtoa_r+0xb08>
 80052dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800558c <_dtoa_r+0x334>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8544 	beq.w	8005d70 <_dtoa_r+0xb18>
 80052e8:	f10b 0303 	add.w	r3, fp, #3
 80052ec:	f000 bd3e 	b.w	8005d6c <_dtoa_r+0xb14>
 80052f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2300      	movs	r3, #0
 80052f8:	4630      	mov	r0, r6
 80052fa:	4639      	mov	r1, r7
 80052fc:	f7fb fbdc 	bl	8000ab8 <__aeabi_dcmpeq>
 8005300:	4681      	mov	r9, r0
 8005302:	b168      	cbz	r0, 8005320 <_dtoa_r+0xc8>
 8005304:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005306:	2301      	movs	r3, #1
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8524 	beq.w	8005d5a <_dtoa_r+0xb02>
 8005312:	4b9a      	ldr	r3, [pc, #616]	; (800557c <_dtoa_r+0x324>)
 8005314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005316:	f103 3bff 	add.w	fp, r3, #4294967295
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	f000 bd28 	b.w	8005d70 <_dtoa_r+0xb18>
 8005320:	aa14      	add	r2, sp, #80	; 0x50
 8005322:	a915      	add	r1, sp, #84	; 0x54
 8005324:	ec47 6b10 	vmov	d0, r6, r7
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff fb1c 	bl	8004966 <__d2b>
 800532e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005332:	9004      	str	r0, [sp, #16]
 8005334:	2d00      	cmp	r5, #0
 8005336:	d07c      	beq.n	8005432 <_dtoa_r+0x1da>
 8005338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800533c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005340:	46b2      	mov	sl, r6
 8005342:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800534a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800534e:	2200      	movs	r2, #0
 8005350:	4b8b      	ldr	r3, [pc, #556]	; (8005580 <_dtoa_r+0x328>)
 8005352:	4650      	mov	r0, sl
 8005354:	4659      	mov	r1, fp
 8005356:	f7fa ff8f 	bl	8000278 <__aeabi_dsub>
 800535a:	a381      	add	r3, pc, #516	; (adr r3, 8005560 <_dtoa_r+0x308>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f7fb f942 	bl	80005e8 <__aeabi_dmul>
 8005364:	a380      	add	r3, pc, #512	; (adr r3, 8005568 <_dtoa_r+0x310>)
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f7fa ff87 	bl	800027c <__adddf3>
 800536e:	4606      	mov	r6, r0
 8005370:	4628      	mov	r0, r5
 8005372:	460f      	mov	r7, r1
 8005374:	f7fb f8ce 	bl	8000514 <__aeabi_i2d>
 8005378:	a37d      	add	r3, pc, #500	; (adr r3, 8005570 <_dtoa_r+0x318>)
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f7fb f933 	bl	80005e8 <__aeabi_dmul>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4630      	mov	r0, r6
 8005388:	4639      	mov	r1, r7
 800538a:	f7fa ff77 	bl	800027c <__adddf3>
 800538e:	4606      	mov	r6, r0
 8005390:	460f      	mov	r7, r1
 8005392:	f7fb fbc3 	bl	8000b1c <__aeabi_d2iz>
 8005396:	2200      	movs	r2, #0
 8005398:	4682      	mov	sl, r0
 800539a:	2300      	movs	r3, #0
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fb fb94 	bl	8000acc <__aeabi_dcmplt>
 80053a4:	b148      	cbz	r0, 80053ba <_dtoa_r+0x162>
 80053a6:	4650      	mov	r0, sl
 80053a8:	f7fb f8b4 	bl	8000514 <__aeabi_i2d>
 80053ac:	4632      	mov	r2, r6
 80053ae:	463b      	mov	r3, r7
 80053b0:	f7fb fb82 	bl	8000ab8 <__aeabi_dcmpeq>
 80053b4:	b908      	cbnz	r0, 80053ba <_dtoa_r+0x162>
 80053b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053ba:	f1ba 0f16 	cmp.w	sl, #22
 80053be:	d859      	bhi.n	8005474 <_dtoa_r+0x21c>
 80053c0:	4970      	ldr	r1, [pc, #448]	; (8005584 <_dtoa_r+0x32c>)
 80053c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80053c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053ce:	f7fb fb9b 	bl	8000b08 <__aeabi_dcmpgt>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d050      	beq.n	8005478 <_dtoa_r+0x220>
 80053d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053da:	2300      	movs	r3, #0
 80053dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80053de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053e0:	1b5d      	subs	r5, r3, r5
 80053e2:	f1b5 0801 	subs.w	r8, r5, #1
 80053e6:	bf49      	itett	mi
 80053e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80053ec:	2300      	movpl	r3, #0
 80053ee:	9305      	strmi	r3, [sp, #20]
 80053f0:	f04f 0800 	movmi.w	r8, #0
 80053f4:	bf58      	it	pl
 80053f6:	9305      	strpl	r3, [sp, #20]
 80053f8:	f1ba 0f00 	cmp.w	sl, #0
 80053fc:	db3e      	blt.n	800547c <_dtoa_r+0x224>
 80053fe:	2300      	movs	r3, #0
 8005400:	44d0      	add	r8, sl
 8005402:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005406:	9307      	str	r3, [sp, #28]
 8005408:	9b06      	ldr	r3, [sp, #24]
 800540a:	2b09      	cmp	r3, #9
 800540c:	f200 8090 	bhi.w	8005530 <_dtoa_r+0x2d8>
 8005410:	2b05      	cmp	r3, #5
 8005412:	bfc4      	itt	gt
 8005414:	3b04      	subgt	r3, #4
 8005416:	9306      	strgt	r3, [sp, #24]
 8005418:	9b06      	ldr	r3, [sp, #24]
 800541a:	f1a3 0302 	sub.w	r3, r3, #2
 800541e:	bfcc      	ite	gt
 8005420:	2500      	movgt	r5, #0
 8005422:	2501      	movle	r5, #1
 8005424:	2b03      	cmp	r3, #3
 8005426:	f200 808f 	bhi.w	8005548 <_dtoa_r+0x2f0>
 800542a:	e8df f003 	tbb	[pc, r3]
 800542e:	7f7d      	.short	0x7f7d
 8005430:	7131      	.short	0x7131
 8005432:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005436:	441d      	add	r5, r3
 8005438:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800543c:	2820      	cmp	r0, #32
 800543e:	dd13      	ble.n	8005468 <_dtoa_r+0x210>
 8005440:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005444:	9b00      	ldr	r3, [sp, #0]
 8005446:	fa08 f800 	lsl.w	r8, r8, r0
 800544a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800544e:	fa23 f000 	lsr.w	r0, r3, r0
 8005452:	ea48 0000 	orr.w	r0, r8, r0
 8005456:	f7fb f84d 	bl	80004f4 <__aeabi_ui2d>
 800545a:	2301      	movs	r3, #1
 800545c:	4682      	mov	sl, r0
 800545e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005462:	3d01      	subs	r5, #1
 8005464:	9313      	str	r3, [sp, #76]	; 0x4c
 8005466:	e772      	b.n	800534e <_dtoa_r+0xf6>
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	f1c0 0020 	rsb	r0, r0, #32
 800546e:	fa03 f000 	lsl.w	r0, r3, r0
 8005472:	e7f0      	b.n	8005456 <_dtoa_r+0x1fe>
 8005474:	2301      	movs	r3, #1
 8005476:	e7b1      	b.n	80053dc <_dtoa_r+0x184>
 8005478:	900f      	str	r0, [sp, #60]	; 0x3c
 800547a:	e7b0      	b.n	80053de <_dtoa_r+0x186>
 800547c:	9b05      	ldr	r3, [sp, #20]
 800547e:	eba3 030a 	sub.w	r3, r3, sl
 8005482:	9305      	str	r3, [sp, #20]
 8005484:	f1ca 0300 	rsb	r3, sl, #0
 8005488:	9307      	str	r3, [sp, #28]
 800548a:	2300      	movs	r3, #0
 800548c:	930e      	str	r3, [sp, #56]	; 0x38
 800548e:	e7bb      	b.n	8005408 <_dtoa_r+0x1b0>
 8005490:	2301      	movs	r3, #1
 8005492:	930a      	str	r3, [sp, #40]	; 0x28
 8005494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005496:	2b00      	cmp	r3, #0
 8005498:	dd59      	ble.n	800554e <_dtoa_r+0x2f6>
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	4699      	mov	r9, r3
 800549e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80054a0:	2200      	movs	r2, #0
 80054a2:	6072      	str	r2, [r6, #4]
 80054a4:	2204      	movs	r2, #4
 80054a6:	f102 0014 	add.w	r0, r2, #20
 80054aa:	4298      	cmp	r0, r3
 80054ac:	6871      	ldr	r1, [r6, #4]
 80054ae:	d953      	bls.n	8005558 <_dtoa_r+0x300>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f7fe ffcb 	bl	800444c <_Balloc>
 80054b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b8:	6030      	str	r0, [r6, #0]
 80054ba:	f1b9 0f0e 	cmp.w	r9, #14
 80054be:	f8d3 b000 	ldr.w	fp, [r3]
 80054c2:	f200 80e6 	bhi.w	8005692 <_dtoa_r+0x43a>
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	f000 80e3 	beq.w	8005692 <_dtoa_r+0x43a>
 80054cc:	ed9d 7b00 	vldr	d7, [sp]
 80054d0:	f1ba 0f00 	cmp.w	sl, #0
 80054d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80054d8:	dd74      	ble.n	80055c4 <_dtoa_r+0x36c>
 80054da:	4a2a      	ldr	r2, [pc, #168]	; (8005584 <_dtoa_r+0x32c>)
 80054dc:	f00a 030f 	and.w	r3, sl, #15
 80054e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054e4:	ed93 7b00 	vldr	d7, [r3]
 80054e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80054ec:	06f0      	lsls	r0, r6, #27
 80054ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80054f2:	d565      	bpl.n	80055c0 <_dtoa_r+0x368>
 80054f4:	4b24      	ldr	r3, [pc, #144]	; (8005588 <_dtoa_r+0x330>)
 80054f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054fe:	f7fb f99d 	bl	800083c <__aeabi_ddiv>
 8005502:	e9cd 0100 	strd	r0, r1, [sp]
 8005506:	f006 060f 	and.w	r6, r6, #15
 800550a:	2503      	movs	r5, #3
 800550c:	4f1e      	ldr	r7, [pc, #120]	; (8005588 <_dtoa_r+0x330>)
 800550e:	e04c      	b.n	80055aa <_dtoa_r+0x352>
 8005510:	2301      	movs	r3, #1
 8005512:	930a      	str	r3, [sp, #40]	; 0x28
 8005514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005516:	4453      	add	r3, sl
 8005518:	f103 0901 	add.w	r9, r3, #1
 800551c:	9302      	str	r3, [sp, #8]
 800551e:	464b      	mov	r3, r9
 8005520:	2b01      	cmp	r3, #1
 8005522:	bfb8      	it	lt
 8005524:	2301      	movlt	r3, #1
 8005526:	e7ba      	b.n	800549e <_dtoa_r+0x246>
 8005528:	2300      	movs	r3, #0
 800552a:	e7b2      	b.n	8005492 <_dtoa_r+0x23a>
 800552c:	2300      	movs	r3, #0
 800552e:	e7f0      	b.n	8005512 <_dtoa_r+0x2ba>
 8005530:	2501      	movs	r5, #1
 8005532:	2300      	movs	r3, #0
 8005534:	9306      	str	r3, [sp, #24]
 8005536:	950a      	str	r5, [sp, #40]	; 0x28
 8005538:	f04f 33ff 	mov.w	r3, #4294967295
 800553c:	9302      	str	r3, [sp, #8]
 800553e:	4699      	mov	r9, r3
 8005540:	2200      	movs	r2, #0
 8005542:	2312      	movs	r3, #18
 8005544:	920b      	str	r2, [sp, #44]	; 0x2c
 8005546:	e7aa      	b.n	800549e <_dtoa_r+0x246>
 8005548:	2301      	movs	r3, #1
 800554a:	930a      	str	r3, [sp, #40]	; 0x28
 800554c:	e7f4      	b.n	8005538 <_dtoa_r+0x2e0>
 800554e:	2301      	movs	r3, #1
 8005550:	9302      	str	r3, [sp, #8]
 8005552:	4699      	mov	r9, r3
 8005554:	461a      	mov	r2, r3
 8005556:	e7f5      	b.n	8005544 <_dtoa_r+0x2ec>
 8005558:	3101      	adds	r1, #1
 800555a:	6071      	str	r1, [r6, #4]
 800555c:	0052      	lsls	r2, r2, #1
 800555e:	e7a2      	b.n	80054a6 <_dtoa_r+0x24e>
 8005560:	636f4361 	.word	0x636f4361
 8005564:	3fd287a7 	.word	0x3fd287a7
 8005568:	8b60c8b3 	.word	0x8b60c8b3
 800556c:	3fc68a28 	.word	0x3fc68a28
 8005570:	509f79fb 	.word	0x509f79fb
 8005574:	3fd34413 	.word	0x3fd34413
 8005578:	7ff00000 	.word	0x7ff00000
 800557c:	0800609d 	.word	0x0800609d
 8005580:	3ff80000 	.word	0x3ff80000
 8005584:	08005f88 	.word	0x08005f88
 8005588:	08005f60 	.word	0x08005f60
 800558c:	08006098 	.word	0x08006098
 8005590:	07f1      	lsls	r1, r6, #31
 8005592:	d508      	bpl.n	80055a6 <_dtoa_r+0x34e>
 8005594:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800559c:	f7fb f824 	bl	80005e8 <__aeabi_dmul>
 80055a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055a4:	3501      	adds	r5, #1
 80055a6:	1076      	asrs	r6, r6, #1
 80055a8:	3708      	adds	r7, #8
 80055aa:	2e00      	cmp	r6, #0
 80055ac:	d1f0      	bne.n	8005590 <_dtoa_r+0x338>
 80055ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055b6:	f7fb f941 	bl	800083c <__aeabi_ddiv>
 80055ba:	e9cd 0100 	strd	r0, r1, [sp]
 80055be:	e01a      	b.n	80055f6 <_dtoa_r+0x39e>
 80055c0:	2502      	movs	r5, #2
 80055c2:	e7a3      	b.n	800550c <_dtoa_r+0x2b4>
 80055c4:	f000 80a0 	beq.w	8005708 <_dtoa_r+0x4b0>
 80055c8:	f1ca 0600 	rsb	r6, sl, #0
 80055cc:	4b9f      	ldr	r3, [pc, #636]	; (800584c <_dtoa_r+0x5f4>)
 80055ce:	4fa0      	ldr	r7, [pc, #640]	; (8005850 <_dtoa_r+0x5f8>)
 80055d0:	f006 020f 	and.w	r2, r6, #15
 80055d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055e0:	f7fb f802 	bl	80005e8 <__aeabi_dmul>
 80055e4:	e9cd 0100 	strd	r0, r1, [sp]
 80055e8:	1136      	asrs	r6, r6, #4
 80055ea:	2300      	movs	r3, #0
 80055ec:	2502      	movs	r5, #2
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d17f      	bne.n	80056f2 <_dtoa_r+0x49a>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e1      	bne.n	80055ba <_dtoa_r+0x362>
 80055f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8087 	beq.w	800570c <_dtoa_r+0x4b4>
 80055fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005602:	2200      	movs	r2, #0
 8005604:	4b93      	ldr	r3, [pc, #588]	; (8005854 <_dtoa_r+0x5fc>)
 8005606:	4630      	mov	r0, r6
 8005608:	4639      	mov	r1, r7
 800560a:	f7fb fa5f 	bl	8000acc <__aeabi_dcmplt>
 800560e:	2800      	cmp	r0, #0
 8005610:	d07c      	beq.n	800570c <_dtoa_r+0x4b4>
 8005612:	f1b9 0f00 	cmp.w	r9, #0
 8005616:	d079      	beq.n	800570c <_dtoa_r+0x4b4>
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	dd35      	ble.n	800568a <_dtoa_r+0x432>
 800561e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005622:	9308      	str	r3, [sp, #32]
 8005624:	4639      	mov	r1, r7
 8005626:	2200      	movs	r2, #0
 8005628:	4b8b      	ldr	r3, [pc, #556]	; (8005858 <_dtoa_r+0x600>)
 800562a:	4630      	mov	r0, r6
 800562c:	f7fa ffdc 	bl	80005e8 <__aeabi_dmul>
 8005630:	e9cd 0100 	strd	r0, r1, [sp]
 8005634:	9f02      	ldr	r7, [sp, #8]
 8005636:	3501      	adds	r5, #1
 8005638:	4628      	mov	r0, r5
 800563a:	f7fa ff6b 	bl	8000514 <__aeabi_i2d>
 800563e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005642:	f7fa ffd1 	bl	80005e8 <__aeabi_dmul>
 8005646:	2200      	movs	r2, #0
 8005648:	4b84      	ldr	r3, [pc, #528]	; (800585c <_dtoa_r+0x604>)
 800564a:	f7fa fe17 	bl	800027c <__adddf3>
 800564e:	4605      	mov	r5, r0
 8005650:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005654:	2f00      	cmp	r7, #0
 8005656:	d15d      	bne.n	8005714 <_dtoa_r+0x4bc>
 8005658:	2200      	movs	r2, #0
 800565a:	4b81      	ldr	r3, [pc, #516]	; (8005860 <_dtoa_r+0x608>)
 800565c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005660:	f7fa fe0a 	bl	8000278 <__aeabi_dsub>
 8005664:	462a      	mov	r2, r5
 8005666:	4633      	mov	r3, r6
 8005668:	e9cd 0100 	strd	r0, r1, [sp]
 800566c:	f7fb fa4c 	bl	8000b08 <__aeabi_dcmpgt>
 8005670:	2800      	cmp	r0, #0
 8005672:	f040 8288 	bne.w	8005b86 <_dtoa_r+0x92e>
 8005676:	462a      	mov	r2, r5
 8005678:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800567c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005680:	f7fb fa24 	bl	8000acc <__aeabi_dcmplt>
 8005684:	2800      	cmp	r0, #0
 8005686:	f040 827c 	bne.w	8005b82 <_dtoa_r+0x92a>
 800568a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800568e:	e9cd 2300 	strd	r2, r3, [sp]
 8005692:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	f2c0 8150 	blt.w	800593a <_dtoa_r+0x6e2>
 800569a:	f1ba 0f0e 	cmp.w	sl, #14
 800569e:	f300 814c 	bgt.w	800593a <_dtoa_r+0x6e2>
 80056a2:	4b6a      	ldr	r3, [pc, #424]	; (800584c <_dtoa_r+0x5f4>)
 80056a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80056a8:	ed93 7b00 	vldr	d7, [r3]
 80056ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80056b4:	f280 80d8 	bge.w	8005868 <_dtoa_r+0x610>
 80056b8:	f1b9 0f00 	cmp.w	r9, #0
 80056bc:	f300 80d4 	bgt.w	8005868 <_dtoa_r+0x610>
 80056c0:	f040 825e 	bne.w	8005b80 <_dtoa_r+0x928>
 80056c4:	2200      	movs	r2, #0
 80056c6:	4b66      	ldr	r3, [pc, #408]	; (8005860 <_dtoa_r+0x608>)
 80056c8:	ec51 0b17 	vmov	r0, r1, d7
 80056cc:	f7fa ff8c 	bl	80005e8 <__aeabi_dmul>
 80056d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056d4:	f7fb fa0e 	bl	8000af4 <__aeabi_dcmpge>
 80056d8:	464f      	mov	r7, r9
 80056da:	464e      	mov	r6, r9
 80056dc:	2800      	cmp	r0, #0
 80056de:	f040 8234 	bne.w	8005b4a <_dtoa_r+0x8f2>
 80056e2:	2331      	movs	r3, #49	; 0x31
 80056e4:	f10b 0501 	add.w	r5, fp, #1
 80056e8:	f88b 3000 	strb.w	r3, [fp]
 80056ec:	f10a 0a01 	add.w	sl, sl, #1
 80056f0:	e22f      	b.n	8005b52 <_dtoa_r+0x8fa>
 80056f2:	07f2      	lsls	r2, r6, #31
 80056f4:	d505      	bpl.n	8005702 <_dtoa_r+0x4aa>
 80056f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056fa:	f7fa ff75 	bl	80005e8 <__aeabi_dmul>
 80056fe:	3501      	adds	r5, #1
 8005700:	2301      	movs	r3, #1
 8005702:	1076      	asrs	r6, r6, #1
 8005704:	3708      	adds	r7, #8
 8005706:	e772      	b.n	80055ee <_dtoa_r+0x396>
 8005708:	2502      	movs	r5, #2
 800570a:	e774      	b.n	80055f6 <_dtoa_r+0x39e>
 800570c:	f8cd a020 	str.w	sl, [sp, #32]
 8005710:	464f      	mov	r7, r9
 8005712:	e791      	b.n	8005638 <_dtoa_r+0x3e0>
 8005714:	4b4d      	ldr	r3, [pc, #308]	; (800584c <_dtoa_r+0x5f4>)
 8005716:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800571a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800571e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d047      	beq.n	80057b4 <_dtoa_r+0x55c>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	2000      	movs	r0, #0
 800572a:	494e      	ldr	r1, [pc, #312]	; (8005864 <_dtoa_r+0x60c>)
 800572c:	f7fb f886 	bl	800083c <__aeabi_ddiv>
 8005730:	462a      	mov	r2, r5
 8005732:	4633      	mov	r3, r6
 8005734:	f7fa fda0 	bl	8000278 <__aeabi_dsub>
 8005738:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800573c:	465d      	mov	r5, fp
 800573e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005742:	f7fb f9eb 	bl	8000b1c <__aeabi_d2iz>
 8005746:	4606      	mov	r6, r0
 8005748:	f7fa fee4 	bl	8000514 <__aeabi_i2d>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005754:	f7fa fd90 	bl	8000278 <__aeabi_dsub>
 8005758:	3630      	adds	r6, #48	; 0x30
 800575a:	f805 6b01 	strb.w	r6, [r5], #1
 800575e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005762:	e9cd 0100 	strd	r0, r1, [sp]
 8005766:	f7fb f9b1 	bl	8000acc <__aeabi_dcmplt>
 800576a:	2800      	cmp	r0, #0
 800576c:	d163      	bne.n	8005836 <_dtoa_r+0x5de>
 800576e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005772:	2000      	movs	r0, #0
 8005774:	4937      	ldr	r1, [pc, #220]	; (8005854 <_dtoa_r+0x5fc>)
 8005776:	f7fa fd7f 	bl	8000278 <__aeabi_dsub>
 800577a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800577e:	f7fb f9a5 	bl	8000acc <__aeabi_dcmplt>
 8005782:	2800      	cmp	r0, #0
 8005784:	f040 80b7 	bne.w	80058f6 <_dtoa_r+0x69e>
 8005788:	eba5 030b 	sub.w	r3, r5, fp
 800578c:	429f      	cmp	r7, r3
 800578e:	f77f af7c 	ble.w	800568a <_dtoa_r+0x432>
 8005792:	2200      	movs	r2, #0
 8005794:	4b30      	ldr	r3, [pc, #192]	; (8005858 <_dtoa_r+0x600>)
 8005796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800579a:	f7fa ff25 	bl	80005e8 <__aeabi_dmul>
 800579e:	2200      	movs	r2, #0
 80057a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057a4:	4b2c      	ldr	r3, [pc, #176]	; (8005858 <_dtoa_r+0x600>)
 80057a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057aa:	f7fa ff1d 	bl	80005e8 <__aeabi_dmul>
 80057ae:	e9cd 0100 	strd	r0, r1, [sp]
 80057b2:	e7c4      	b.n	800573e <_dtoa_r+0x4e6>
 80057b4:	462a      	mov	r2, r5
 80057b6:	4633      	mov	r3, r6
 80057b8:	f7fa ff16 	bl	80005e8 <__aeabi_dmul>
 80057bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80057c0:	eb0b 0507 	add.w	r5, fp, r7
 80057c4:	465e      	mov	r6, fp
 80057c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057ca:	f7fb f9a7 	bl	8000b1c <__aeabi_d2iz>
 80057ce:	4607      	mov	r7, r0
 80057d0:	f7fa fea0 	bl	8000514 <__aeabi_i2d>
 80057d4:	3730      	adds	r7, #48	; 0x30
 80057d6:	4602      	mov	r2, r0
 80057d8:	460b      	mov	r3, r1
 80057da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057de:	f7fa fd4b 	bl	8000278 <__aeabi_dsub>
 80057e2:	f806 7b01 	strb.w	r7, [r6], #1
 80057e6:	42ae      	cmp	r6, r5
 80057e8:	e9cd 0100 	strd	r0, r1, [sp]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	d126      	bne.n	8005840 <_dtoa_r+0x5e8>
 80057f2:	4b1c      	ldr	r3, [pc, #112]	; (8005864 <_dtoa_r+0x60c>)
 80057f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057f8:	f7fa fd40 	bl	800027c <__adddf3>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005804:	f7fb f980 	bl	8000b08 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	d174      	bne.n	80058f6 <_dtoa_r+0x69e>
 800580c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005810:	2000      	movs	r0, #0
 8005812:	4914      	ldr	r1, [pc, #80]	; (8005864 <_dtoa_r+0x60c>)
 8005814:	f7fa fd30 	bl	8000278 <__aeabi_dsub>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005820:	f7fb f954 	bl	8000acc <__aeabi_dcmplt>
 8005824:	2800      	cmp	r0, #0
 8005826:	f43f af30 	beq.w	800568a <_dtoa_r+0x432>
 800582a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800582e:	2b30      	cmp	r3, #48	; 0x30
 8005830:	f105 32ff 	add.w	r2, r5, #4294967295
 8005834:	d002      	beq.n	800583c <_dtoa_r+0x5e4>
 8005836:	f8dd a020 	ldr.w	sl, [sp, #32]
 800583a:	e04a      	b.n	80058d2 <_dtoa_r+0x67a>
 800583c:	4615      	mov	r5, r2
 800583e:	e7f4      	b.n	800582a <_dtoa_r+0x5d2>
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <_dtoa_r+0x600>)
 8005842:	f7fa fed1 	bl	80005e8 <__aeabi_dmul>
 8005846:	e9cd 0100 	strd	r0, r1, [sp]
 800584a:	e7bc      	b.n	80057c6 <_dtoa_r+0x56e>
 800584c:	08005f88 	.word	0x08005f88
 8005850:	08005f60 	.word	0x08005f60
 8005854:	3ff00000 	.word	0x3ff00000
 8005858:	40240000 	.word	0x40240000
 800585c:	401c0000 	.word	0x401c0000
 8005860:	40140000 	.word	0x40140000
 8005864:	3fe00000 	.word	0x3fe00000
 8005868:	e9dd 6700 	ldrd	r6, r7, [sp]
 800586c:	465d      	mov	r5, fp
 800586e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005872:	4630      	mov	r0, r6
 8005874:	4639      	mov	r1, r7
 8005876:	f7fa ffe1 	bl	800083c <__aeabi_ddiv>
 800587a:	f7fb f94f 	bl	8000b1c <__aeabi_d2iz>
 800587e:	4680      	mov	r8, r0
 8005880:	f7fa fe48 	bl	8000514 <__aeabi_i2d>
 8005884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005888:	f7fa feae 	bl	80005e8 <__aeabi_dmul>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4630      	mov	r0, r6
 8005892:	4639      	mov	r1, r7
 8005894:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005898:	f7fa fcee 	bl	8000278 <__aeabi_dsub>
 800589c:	f805 6b01 	strb.w	r6, [r5], #1
 80058a0:	eba5 060b 	sub.w	r6, r5, fp
 80058a4:	45b1      	cmp	r9, r6
 80058a6:	4602      	mov	r2, r0
 80058a8:	460b      	mov	r3, r1
 80058aa:	d139      	bne.n	8005920 <_dtoa_r+0x6c8>
 80058ac:	f7fa fce6 	bl	800027c <__adddf3>
 80058b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058b4:	4606      	mov	r6, r0
 80058b6:	460f      	mov	r7, r1
 80058b8:	f7fb f926 	bl	8000b08 <__aeabi_dcmpgt>
 80058bc:	b9c8      	cbnz	r0, 80058f2 <_dtoa_r+0x69a>
 80058be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058c2:	4630      	mov	r0, r6
 80058c4:	4639      	mov	r1, r7
 80058c6:	f7fb f8f7 	bl	8000ab8 <__aeabi_dcmpeq>
 80058ca:	b110      	cbz	r0, 80058d2 <_dtoa_r+0x67a>
 80058cc:	f018 0f01 	tst.w	r8, #1
 80058d0:	d10f      	bne.n	80058f2 <_dtoa_r+0x69a>
 80058d2:	9904      	ldr	r1, [sp, #16]
 80058d4:	4620      	mov	r0, r4
 80058d6:	f7fe fded 	bl	80044b4 <_Bfree>
 80058da:	2300      	movs	r3, #0
 80058dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058de:	702b      	strb	r3, [r5, #0]
 80058e0:	f10a 0301 	add.w	r3, sl, #1
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8241 	beq.w	8005d70 <_dtoa_r+0xb18>
 80058ee:	601d      	str	r5, [r3, #0]
 80058f0:	e23e      	b.n	8005d70 <_dtoa_r+0xb18>
 80058f2:	f8cd a020 	str.w	sl, [sp, #32]
 80058f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058fa:	2a39      	cmp	r2, #57	; 0x39
 80058fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8005900:	d108      	bne.n	8005914 <_dtoa_r+0x6bc>
 8005902:	459b      	cmp	fp, r3
 8005904:	d10a      	bne.n	800591c <_dtoa_r+0x6c4>
 8005906:	9b08      	ldr	r3, [sp, #32]
 8005908:	3301      	adds	r3, #1
 800590a:	9308      	str	r3, [sp, #32]
 800590c:	2330      	movs	r3, #48	; 0x30
 800590e:	f88b 3000 	strb.w	r3, [fp]
 8005912:	465b      	mov	r3, fp
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	3201      	adds	r2, #1
 8005918:	701a      	strb	r2, [r3, #0]
 800591a:	e78c      	b.n	8005836 <_dtoa_r+0x5de>
 800591c:	461d      	mov	r5, r3
 800591e:	e7ea      	b.n	80058f6 <_dtoa_r+0x69e>
 8005920:	2200      	movs	r2, #0
 8005922:	4b9b      	ldr	r3, [pc, #620]	; (8005b90 <_dtoa_r+0x938>)
 8005924:	f7fa fe60 	bl	80005e8 <__aeabi_dmul>
 8005928:	2200      	movs	r2, #0
 800592a:	2300      	movs	r3, #0
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	f7fb f8c2 	bl	8000ab8 <__aeabi_dcmpeq>
 8005934:	2800      	cmp	r0, #0
 8005936:	d09a      	beq.n	800586e <_dtoa_r+0x616>
 8005938:	e7cb      	b.n	80058d2 <_dtoa_r+0x67a>
 800593a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800593c:	2a00      	cmp	r2, #0
 800593e:	f000 808b 	beq.w	8005a58 <_dtoa_r+0x800>
 8005942:	9a06      	ldr	r2, [sp, #24]
 8005944:	2a01      	cmp	r2, #1
 8005946:	dc6e      	bgt.n	8005a26 <_dtoa_r+0x7ce>
 8005948:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800594a:	2a00      	cmp	r2, #0
 800594c:	d067      	beq.n	8005a1e <_dtoa_r+0x7c6>
 800594e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005952:	9f07      	ldr	r7, [sp, #28]
 8005954:	9d05      	ldr	r5, [sp, #20]
 8005956:	9a05      	ldr	r2, [sp, #20]
 8005958:	2101      	movs	r1, #1
 800595a:	441a      	add	r2, r3
 800595c:	4620      	mov	r0, r4
 800595e:	9205      	str	r2, [sp, #20]
 8005960:	4498      	add	r8, r3
 8005962:	f7fe fe47 	bl	80045f4 <__i2b>
 8005966:	4606      	mov	r6, r0
 8005968:	2d00      	cmp	r5, #0
 800596a:	dd0c      	ble.n	8005986 <_dtoa_r+0x72e>
 800596c:	f1b8 0f00 	cmp.w	r8, #0
 8005970:	dd09      	ble.n	8005986 <_dtoa_r+0x72e>
 8005972:	4545      	cmp	r5, r8
 8005974:	9a05      	ldr	r2, [sp, #20]
 8005976:	462b      	mov	r3, r5
 8005978:	bfa8      	it	ge
 800597a:	4643      	movge	r3, r8
 800597c:	1ad2      	subs	r2, r2, r3
 800597e:	9205      	str	r2, [sp, #20]
 8005980:	1aed      	subs	r5, r5, r3
 8005982:	eba8 0803 	sub.w	r8, r8, r3
 8005986:	9b07      	ldr	r3, [sp, #28]
 8005988:	b1eb      	cbz	r3, 80059c6 <_dtoa_r+0x76e>
 800598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	d067      	beq.n	8005a60 <_dtoa_r+0x808>
 8005990:	b18f      	cbz	r7, 80059b6 <_dtoa_r+0x75e>
 8005992:	4631      	mov	r1, r6
 8005994:	463a      	mov	r2, r7
 8005996:	4620      	mov	r0, r4
 8005998:	f7fe fecc 	bl	8004734 <__pow5mult>
 800599c:	9a04      	ldr	r2, [sp, #16]
 800599e:	4601      	mov	r1, r0
 80059a0:	4606      	mov	r6, r0
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7fe fe2f 	bl	8004606 <__multiply>
 80059a8:	9904      	ldr	r1, [sp, #16]
 80059aa:	9008      	str	r0, [sp, #32]
 80059ac:	4620      	mov	r0, r4
 80059ae:	f7fe fd81 	bl	80044b4 <_Bfree>
 80059b2:	9b08      	ldr	r3, [sp, #32]
 80059b4:	9304      	str	r3, [sp, #16]
 80059b6:	9b07      	ldr	r3, [sp, #28]
 80059b8:	1bda      	subs	r2, r3, r7
 80059ba:	d004      	beq.n	80059c6 <_dtoa_r+0x76e>
 80059bc:	9904      	ldr	r1, [sp, #16]
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fe feb8 	bl	8004734 <__pow5mult>
 80059c4:	9004      	str	r0, [sp, #16]
 80059c6:	2101      	movs	r1, #1
 80059c8:	4620      	mov	r0, r4
 80059ca:	f7fe fe13 	bl	80045f4 <__i2b>
 80059ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d0:	4607      	mov	r7, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 81d0 	beq.w	8005d78 <_dtoa_r+0xb20>
 80059d8:	461a      	mov	r2, r3
 80059da:	4601      	mov	r1, r0
 80059dc:	4620      	mov	r0, r4
 80059de:	f7fe fea9 	bl	8004734 <__pow5mult>
 80059e2:	9b06      	ldr	r3, [sp, #24]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	4607      	mov	r7, r0
 80059e8:	dc40      	bgt.n	8005a6c <_dtoa_r+0x814>
 80059ea:	9b00      	ldr	r3, [sp, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d139      	bne.n	8005a64 <_dtoa_r+0x80c>
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d136      	bne.n	8005a68 <_dtoa_r+0x810>
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a00:	0d1b      	lsrs	r3, r3, #20
 8005a02:	051b      	lsls	r3, r3, #20
 8005a04:	b12b      	cbz	r3, 8005a12 <_dtoa_r+0x7ba>
 8005a06:	9b05      	ldr	r3, [sp, #20]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	9305      	str	r3, [sp, #20]
 8005a0c:	f108 0801 	add.w	r8, r8, #1
 8005a10:	2301      	movs	r3, #1
 8005a12:	9307      	str	r3, [sp, #28]
 8005a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d12a      	bne.n	8005a70 <_dtoa_r+0x818>
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	e030      	b.n	8005a80 <_dtoa_r+0x828>
 8005a1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a20:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a24:	e795      	b.n	8005952 <_dtoa_r+0x6fa>
 8005a26:	9b07      	ldr	r3, [sp, #28]
 8005a28:	f109 37ff 	add.w	r7, r9, #4294967295
 8005a2c:	42bb      	cmp	r3, r7
 8005a2e:	bfbf      	itttt	lt
 8005a30:	9b07      	ldrlt	r3, [sp, #28]
 8005a32:	9707      	strlt	r7, [sp, #28]
 8005a34:	1afa      	sublt	r2, r7, r3
 8005a36:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005a38:	bfbb      	ittet	lt
 8005a3a:	189b      	addlt	r3, r3, r2
 8005a3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005a3e:	1bdf      	subge	r7, r3, r7
 8005a40:	2700      	movlt	r7, #0
 8005a42:	f1b9 0f00 	cmp.w	r9, #0
 8005a46:	bfb5      	itete	lt
 8005a48:	9b05      	ldrlt	r3, [sp, #20]
 8005a4a:	9d05      	ldrge	r5, [sp, #20]
 8005a4c:	eba3 0509 	sublt.w	r5, r3, r9
 8005a50:	464b      	movge	r3, r9
 8005a52:	bfb8      	it	lt
 8005a54:	2300      	movlt	r3, #0
 8005a56:	e77e      	b.n	8005956 <_dtoa_r+0x6fe>
 8005a58:	9f07      	ldr	r7, [sp, #28]
 8005a5a:	9d05      	ldr	r5, [sp, #20]
 8005a5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005a5e:	e783      	b.n	8005968 <_dtoa_r+0x710>
 8005a60:	9a07      	ldr	r2, [sp, #28]
 8005a62:	e7ab      	b.n	80059bc <_dtoa_r+0x764>
 8005a64:	2300      	movs	r3, #0
 8005a66:	e7d4      	b.n	8005a12 <_dtoa_r+0x7ba>
 8005a68:	9b00      	ldr	r3, [sp, #0]
 8005a6a:	e7d2      	b.n	8005a12 <_dtoa_r+0x7ba>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005a76:	6918      	ldr	r0, [r3, #16]
 8005a78:	f7fe fd6e 	bl	8004558 <__hi0bits>
 8005a7c:	f1c0 0020 	rsb	r0, r0, #32
 8005a80:	4440      	add	r0, r8
 8005a82:	f010 001f 	ands.w	r0, r0, #31
 8005a86:	d047      	beq.n	8005b18 <_dtoa_r+0x8c0>
 8005a88:	f1c0 0320 	rsb	r3, r0, #32
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	dd3b      	ble.n	8005b08 <_dtoa_r+0x8b0>
 8005a90:	9b05      	ldr	r3, [sp, #20]
 8005a92:	f1c0 001c 	rsb	r0, r0, #28
 8005a96:	4403      	add	r3, r0
 8005a98:	9305      	str	r3, [sp, #20]
 8005a9a:	4405      	add	r5, r0
 8005a9c:	4480      	add	r8, r0
 8005a9e:	9b05      	ldr	r3, [sp, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	dd05      	ble.n	8005ab0 <_dtoa_r+0x858>
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	9904      	ldr	r1, [sp, #16]
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f7fe fe91 	bl	80047d0 <__lshift>
 8005aae:	9004      	str	r0, [sp, #16]
 8005ab0:	f1b8 0f00 	cmp.w	r8, #0
 8005ab4:	dd05      	ble.n	8005ac2 <_dtoa_r+0x86a>
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4642      	mov	r2, r8
 8005aba:	4620      	mov	r0, r4
 8005abc:	f7fe fe88 	bl	80047d0 <__lshift>
 8005ac0:	4607      	mov	r7, r0
 8005ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ac4:	b353      	cbz	r3, 8005b1c <_dtoa_r+0x8c4>
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	9804      	ldr	r0, [sp, #16]
 8005aca:	f7fe fed5 	bl	8004878 <__mcmp>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	da24      	bge.n	8005b1c <_dtoa_r+0x8c4>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	220a      	movs	r2, #10
 8005ad6:	9904      	ldr	r1, [sp, #16]
 8005ad8:	4620      	mov	r0, r4
 8005ada:	f7fe fd02 	bl	80044e2 <__multadd>
 8005ade:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae0:	9004      	str	r0, [sp, #16]
 8005ae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f000 814d 	beq.w	8005d86 <_dtoa_r+0xb2e>
 8005aec:	2300      	movs	r3, #0
 8005aee:	4631      	mov	r1, r6
 8005af0:	220a      	movs	r2, #10
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7fe fcf5 	bl	80044e2 <__multadd>
 8005af8:	9b02      	ldr	r3, [sp, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	4606      	mov	r6, r0
 8005afe:	dc4f      	bgt.n	8005ba0 <_dtoa_r+0x948>
 8005b00:	9b06      	ldr	r3, [sp, #24]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	dd4c      	ble.n	8005ba0 <_dtoa_r+0x948>
 8005b06:	e011      	b.n	8005b2c <_dtoa_r+0x8d4>
 8005b08:	d0c9      	beq.n	8005a9e <_dtoa_r+0x846>
 8005b0a:	9a05      	ldr	r2, [sp, #20]
 8005b0c:	331c      	adds	r3, #28
 8005b0e:	441a      	add	r2, r3
 8005b10:	9205      	str	r2, [sp, #20]
 8005b12:	441d      	add	r5, r3
 8005b14:	4498      	add	r8, r3
 8005b16:	e7c2      	b.n	8005a9e <_dtoa_r+0x846>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	e7f6      	b.n	8005b0a <_dtoa_r+0x8b2>
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	dc38      	bgt.n	8005b94 <_dtoa_r+0x93c>
 8005b22:	9b06      	ldr	r3, [sp, #24]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	dd35      	ble.n	8005b94 <_dtoa_r+0x93c>
 8005b28:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b2c:	9b02      	ldr	r3, [sp, #8]
 8005b2e:	b963      	cbnz	r3, 8005b4a <_dtoa_r+0x8f2>
 8005b30:	4639      	mov	r1, r7
 8005b32:	2205      	movs	r2, #5
 8005b34:	4620      	mov	r0, r4
 8005b36:	f7fe fcd4 	bl	80044e2 <__multadd>
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	9804      	ldr	r0, [sp, #16]
 8005b40:	f7fe fe9a 	bl	8004878 <__mcmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f73f adcc 	bgt.w	80056e2 <_dtoa_r+0x48a>
 8005b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4c:	465d      	mov	r5, fp
 8005b4e:	ea6f 0a03 	mvn.w	sl, r3
 8005b52:	f04f 0900 	mov.w	r9, #0
 8005b56:	4639      	mov	r1, r7
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f7fe fcab 	bl	80044b4 <_Bfree>
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	f43f aeb7 	beq.w	80058d2 <_dtoa_r+0x67a>
 8005b64:	f1b9 0f00 	cmp.w	r9, #0
 8005b68:	d005      	beq.n	8005b76 <_dtoa_r+0x91e>
 8005b6a:	45b1      	cmp	r9, r6
 8005b6c:	d003      	beq.n	8005b76 <_dtoa_r+0x91e>
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7fe fc9f 	bl	80044b4 <_Bfree>
 8005b76:	4631      	mov	r1, r6
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f7fe fc9b 	bl	80044b4 <_Bfree>
 8005b7e:	e6a8      	b.n	80058d2 <_dtoa_r+0x67a>
 8005b80:	2700      	movs	r7, #0
 8005b82:	463e      	mov	r6, r7
 8005b84:	e7e1      	b.n	8005b4a <_dtoa_r+0x8f2>
 8005b86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b8a:	463e      	mov	r6, r7
 8005b8c:	e5a9      	b.n	80056e2 <_dtoa_r+0x48a>
 8005b8e:	bf00      	nop
 8005b90:	40240000 	.word	0x40240000
 8005b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b96:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 80fa 	beq.w	8005d94 <_dtoa_r+0xb3c>
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	dd05      	ble.n	8005bb0 <_dtoa_r+0x958>
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7fe fe11 	bl	80047d0 <__lshift>
 8005bae:	4606      	mov	r6, r0
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d04c      	beq.n	8005c50 <_dtoa_r+0x9f8>
 8005bb6:	6871      	ldr	r1, [r6, #4]
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7fe fc47 	bl	800444c <_Balloc>
 8005bbe:	6932      	ldr	r2, [r6, #16]
 8005bc0:	3202      	adds	r2, #2
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	0092      	lsls	r2, r2, #2
 8005bc6:	f106 010c 	add.w	r1, r6, #12
 8005bca:	300c      	adds	r0, #12
 8005bcc:	f000 f904 	bl	8005dd8 <memcpy>
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	f7fe fdfb 	bl	80047d0 <__lshift>
 8005bda:	9b00      	ldr	r3, [sp, #0]
 8005bdc:	f8cd b014 	str.w	fp, [sp, #20]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	46b1      	mov	r9, r6
 8005be6:	9307      	str	r3, [sp, #28]
 8005be8:	4606      	mov	r6, r0
 8005bea:	4639      	mov	r1, r7
 8005bec:	9804      	ldr	r0, [sp, #16]
 8005bee:	f7ff faa7 	bl	8005140 <quorem>
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005bfa:	9804      	ldr	r0, [sp, #16]
 8005bfc:	f7fe fe3c 	bl	8004878 <__mcmp>
 8005c00:	4632      	mov	r2, r6
 8005c02:	9000      	str	r0, [sp, #0]
 8005c04:	4639      	mov	r1, r7
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7fe fe50 	bl	80048ac <__mdiff>
 8005c0c:	68c3      	ldr	r3, [r0, #12]
 8005c0e:	4602      	mov	r2, r0
 8005c10:	bb03      	cbnz	r3, 8005c54 <_dtoa_r+0x9fc>
 8005c12:	4601      	mov	r1, r0
 8005c14:	9008      	str	r0, [sp, #32]
 8005c16:	9804      	ldr	r0, [sp, #16]
 8005c18:	f7fe fe2e 	bl	8004878 <__mcmp>
 8005c1c:	9a08      	ldr	r2, [sp, #32]
 8005c1e:	4603      	mov	r3, r0
 8005c20:	4611      	mov	r1, r2
 8005c22:	4620      	mov	r0, r4
 8005c24:	9308      	str	r3, [sp, #32]
 8005c26:	f7fe fc45 	bl	80044b4 <_Bfree>
 8005c2a:	9b08      	ldr	r3, [sp, #32]
 8005c2c:	b9a3      	cbnz	r3, 8005c58 <_dtoa_r+0xa00>
 8005c2e:	9a06      	ldr	r2, [sp, #24]
 8005c30:	b992      	cbnz	r2, 8005c58 <_dtoa_r+0xa00>
 8005c32:	9a07      	ldr	r2, [sp, #28]
 8005c34:	b982      	cbnz	r2, 8005c58 <_dtoa_r+0xa00>
 8005c36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c3a:	d029      	beq.n	8005c90 <_dtoa_r+0xa38>
 8005c3c:	9b00      	ldr	r3, [sp, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	dd01      	ble.n	8005c46 <_dtoa_r+0x9ee>
 8005c42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	1c5d      	adds	r5, r3, #1
 8005c4a:	f883 8000 	strb.w	r8, [r3]
 8005c4e:	e782      	b.n	8005b56 <_dtoa_r+0x8fe>
 8005c50:	4630      	mov	r0, r6
 8005c52:	e7c2      	b.n	8005bda <_dtoa_r+0x982>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e7e3      	b.n	8005c20 <_dtoa_r+0x9c8>
 8005c58:	9a00      	ldr	r2, [sp, #0]
 8005c5a:	2a00      	cmp	r2, #0
 8005c5c:	db04      	blt.n	8005c68 <_dtoa_r+0xa10>
 8005c5e:	d125      	bne.n	8005cac <_dtoa_r+0xa54>
 8005c60:	9a06      	ldr	r2, [sp, #24]
 8005c62:	bb1a      	cbnz	r2, 8005cac <_dtoa_r+0xa54>
 8005c64:	9a07      	ldr	r2, [sp, #28]
 8005c66:	bb0a      	cbnz	r2, 8005cac <_dtoa_r+0xa54>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	ddec      	ble.n	8005c46 <_dtoa_r+0x9ee>
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	9904      	ldr	r1, [sp, #16]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7fe fdad 	bl	80047d0 <__lshift>
 8005c76:	4639      	mov	r1, r7
 8005c78:	9004      	str	r0, [sp, #16]
 8005c7a:	f7fe fdfd 	bl	8004878 <__mcmp>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	dc03      	bgt.n	8005c8a <_dtoa_r+0xa32>
 8005c82:	d1e0      	bne.n	8005c46 <_dtoa_r+0x9ee>
 8005c84:	f018 0f01 	tst.w	r8, #1
 8005c88:	d0dd      	beq.n	8005c46 <_dtoa_r+0x9ee>
 8005c8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c8e:	d1d8      	bne.n	8005c42 <_dtoa_r+0x9ea>
 8005c90:	9b05      	ldr	r3, [sp, #20]
 8005c92:	9a05      	ldr	r2, [sp, #20]
 8005c94:	1c5d      	adds	r5, r3, #1
 8005c96:	2339      	movs	r3, #57	; 0x39
 8005c98:	7013      	strb	r3, [r2, #0]
 8005c9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c9e:	2b39      	cmp	r3, #57	; 0x39
 8005ca0:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ca4:	d04f      	beq.n	8005d46 <_dtoa_r+0xaee>
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	7013      	strb	r3, [r2, #0]
 8005caa:	e754      	b.n	8005b56 <_dtoa_r+0x8fe>
 8005cac:	9a05      	ldr	r2, [sp, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f102 0501 	add.w	r5, r2, #1
 8005cb4:	dd06      	ble.n	8005cc4 <_dtoa_r+0xa6c>
 8005cb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005cba:	d0e9      	beq.n	8005c90 <_dtoa_r+0xa38>
 8005cbc:	f108 0801 	add.w	r8, r8, #1
 8005cc0:	9b05      	ldr	r3, [sp, #20]
 8005cc2:	e7c2      	b.n	8005c4a <_dtoa_r+0x9f2>
 8005cc4:	9a02      	ldr	r2, [sp, #8]
 8005cc6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005cca:	eba5 030b 	sub.w	r3, r5, fp
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d021      	beq.n	8005d16 <_dtoa_r+0xabe>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	220a      	movs	r2, #10
 8005cd6:	9904      	ldr	r1, [sp, #16]
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f7fe fc02 	bl	80044e2 <__multadd>
 8005cde:	45b1      	cmp	r9, r6
 8005ce0:	9004      	str	r0, [sp, #16]
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	f04f 020a 	mov.w	r2, #10
 8005cea:	4649      	mov	r1, r9
 8005cec:	4620      	mov	r0, r4
 8005cee:	d105      	bne.n	8005cfc <_dtoa_r+0xaa4>
 8005cf0:	f7fe fbf7 	bl	80044e2 <__multadd>
 8005cf4:	4681      	mov	r9, r0
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	9505      	str	r5, [sp, #20]
 8005cfa:	e776      	b.n	8005bea <_dtoa_r+0x992>
 8005cfc:	f7fe fbf1 	bl	80044e2 <__multadd>
 8005d00:	4631      	mov	r1, r6
 8005d02:	4681      	mov	r9, r0
 8005d04:	2300      	movs	r3, #0
 8005d06:	220a      	movs	r2, #10
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f7fe fbea 	bl	80044e2 <__multadd>
 8005d0e:	4606      	mov	r6, r0
 8005d10:	e7f2      	b.n	8005cf8 <_dtoa_r+0xaa0>
 8005d12:	f04f 0900 	mov.w	r9, #0
 8005d16:	2201      	movs	r2, #1
 8005d18:	9904      	ldr	r1, [sp, #16]
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f7fe fd58 	bl	80047d0 <__lshift>
 8005d20:	4639      	mov	r1, r7
 8005d22:	9004      	str	r0, [sp, #16]
 8005d24:	f7fe fda8 	bl	8004878 <__mcmp>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	dcb6      	bgt.n	8005c9a <_dtoa_r+0xa42>
 8005d2c:	d102      	bne.n	8005d34 <_dtoa_r+0xadc>
 8005d2e:	f018 0f01 	tst.w	r8, #1
 8005d32:	d1b2      	bne.n	8005c9a <_dtoa_r+0xa42>
 8005d34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d38:	2b30      	cmp	r3, #48	; 0x30
 8005d3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d3e:	f47f af0a 	bne.w	8005b56 <_dtoa_r+0x8fe>
 8005d42:	4615      	mov	r5, r2
 8005d44:	e7f6      	b.n	8005d34 <_dtoa_r+0xadc>
 8005d46:	4593      	cmp	fp, r2
 8005d48:	d105      	bne.n	8005d56 <_dtoa_r+0xafe>
 8005d4a:	2331      	movs	r3, #49	; 0x31
 8005d4c:	f10a 0a01 	add.w	sl, sl, #1
 8005d50:	f88b 3000 	strb.w	r3, [fp]
 8005d54:	e6ff      	b.n	8005b56 <_dtoa_r+0x8fe>
 8005d56:	4615      	mov	r5, r2
 8005d58:	e79f      	b.n	8005c9a <_dtoa_r+0xa42>
 8005d5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005dc0 <_dtoa_r+0xb68>
 8005d5e:	e007      	b.n	8005d70 <_dtoa_r+0xb18>
 8005d60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005dc4 <_dtoa_r+0xb6c>
 8005d66:	b11b      	cbz	r3, 8005d70 <_dtoa_r+0xb18>
 8005d68:	f10b 0308 	add.w	r3, fp, #8
 8005d6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4658      	mov	r0, fp
 8005d72:	b017      	add	sp, #92	; 0x5c
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	f77f ae35 	ble.w	80059ea <_dtoa_r+0x792>
 8005d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d82:	9307      	str	r3, [sp, #28]
 8005d84:	e649      	b.n	8005a1a <_dtoa_r+0x7c2>
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dc03      	bgt.n	8005d94 <_dtoa_r+0xb3c>
 8005d8c:	9b06      	ldr	r3, [sp, #24]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	f73f aecc 	bgt.w	8005b2c <_dtoa_r+0x8d4>
 8005d94:	465d      	mov	r5, fp
 8005d96:	4639      	mov	r1, r7
 8005d98:	9804      	ldr	r0, [sp, #16]
 8005d9a:	f7ff f9d1 	bl	8005140 <quorem>
 8005d9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005da2:	f805 8b01 	strb.w	r8, [r5], #1
 8005da6:	9a02      	ldr	r2, [sp, #8]
 8005da8:	eba5 030b 	sub.w	r3, r5, fp
 8005dac:	429a      	cmp	r2, r3
 8005dae:	ddb0      	ble.n	8005d12 <_dtoa_r+0xaba>
 8005db0:	2300      	movs	r3, #0
 8005db2:	220a      	movs	r2, #10
 8005db4:	9904      	ldr	r1, [sp, #16]
 8005db6:	4620      	mov	r0, r4
 8005db8:	f7fe fb93 	bl	80044e2 <__multadd>
 8005dbc:	9004      	str	r0, [sp, #16]
 8005dbe:	e7ea      	b.n	8005d96 <_dtoa_r+0xb3e>
 8005dc0:	0800609c 	.word	0x0800609c
 8005dc4:	0800608f 	.word	0x0800608f

08005dc8 <malloc>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <malloc+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f7fe be45 	b.w	8004a5c <_malloc_r>
 8005dd2:	bf00      	nop
 8005dd4:	20000028 	.word	0x20000028

08005dd8 <memcpy>:
 8005dd8:	b510      	push	{r4, lr}
 8005dda:	1e43      	subs	r3, r0, #1
 8005ddc:	440a      	add	r2, r1
 8005dde:	4291      	cmp	r1, r2
 8005de0:	d100      	bne.n	8005de4 <memcpy+0xc>
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dec:	e7f7      	b.n	8005dde <memcpy+0x6>

08005dee <memmove>:
 8005dee:	4288      	cmp	r0, r1
 8005df0:	b510      	push	{r4, lr}
 8005df2:	eb01 0302 	add.w	r3, r1, r2
 8005df6:	d807      	bhi.n	8005e08 <memmove+0x1a>
 8005df8:	1e42      	subs	r2, r0, #1
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	d00a      	beq.n	8005e14 <memmove+0x26>
 8005dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e06:	e7f8      	b.n	8005dfa <memmove+0xc>
 8005e08:	4283      	cmp	r3, r0
 8005e0a:	d9f5      	bls.n	8005df8 <memmove+0xa>
 8005e0c:	1881      	adds	r1, r0, r2
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	42d3      	cmn	r3, r2
 8005e12:	d100      	bne.n	8005e16 <memmove+0x28>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005e1e:	e7f7      	b.n	8005e10 <memmove+0x22>

08005e20 <__malloc_lock>:
 8005e20:	4770      	bx	lr

08005e22 <__malloc_unlock>:
 8005e22:	4770      	bx	lr

08005e24 <_free_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4605      	mov	r5, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d045      	beq.n	8005eb8 <_free_r+0x94>
 8005e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e30:	1f0c      	subs	r4, r1, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfb8      	it	lt
 8005e36:	18e4      	addlt	r4, r4, r3
 8005e38:	f7ff fff2 	bl	8005e20 <__malloc_lock>
 8005e3c:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <_free_r+0x98>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	4610      	mov	r0, r2
 8005e42:	b933      	cbnz	r3, 8005e52 <_free_r+0x2e>
 8005e44:	6063      	str	r3, [r4, #4]
 8005e46:	6014      	str	r4, [r2, #0]
 8005e48:	4628      	mov	r0, r5
 8005e4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4e:	f7ff bfe8 	b.w	8005e22 <__malloc_unlock>
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	d90c      	bls.n	8005e70 <_free_r+0x4c>
 8005e56:	6821      	ldr	r1, [r4, #0]
 8005e58:	1862      	adds	r2, r4, r1
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	bf04      	itt	eq
 8005e5e:	681a      	ldreq	r2, [r3, #0]
 8005e60:	685b      	ldreq	r3, [r3, #4]
 8005e62:	6063      	str	r3, [r4, #4]
 8005e64:	bf04      	itt	eq
 8005e66:	1852      	addeq	r2, r2, r1
 8005e68:	6022      	streq	r2, [r4, #0]
 8005e6a:	6004      	str	r4, [r0, #0]
 8005e6c:	e7ec      	b.n	8005e48 <_free_r+0x24>
 8005e6e:	4613      	mov	r3, r2
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	b10a      	cbz	r2, 8005e78 <_free_r+0x54>
 8005e74:	42a2      	cmp	r2, r4
 8005e76:	d9fa      	bls.n	8005e6e <_free_r+0x4a>
 8005e78:	6819      	ldr	r1, [r3, #0]
 8005e7a:	1858      	adds	r0, r3, r1
 8005e7c:	42a0      	cmp	r0, r4
 8005e7e:	d10b      	bne.n	8005e98 <_free_r+0x74>
 8005e80:	6820      	ldr	r0, [r4, #0]
 8005e82:	4401      	add	r1, r0
 8005e84:	1858      	adds	r0, r3, r1
 8005e86:	4282      	cmp	r2, r0
 8005e88:	6019      	str	r1, [r3, #0]
 8005e8a:	d1dd      	bne.n	8005e48 <_free_r+0x24>
 8005e8c:	6810      	ldr	r0, [r2, #0]
 8005e8e:	6852      	ldr	r2, [r2, #4]
 8005e90:	605a      	str	r2, [r3, #4]
 8005e92:	4401      	add	r1, r0
 8005e94:	6019      	str	r1, [r3, #0]
 8005e96:	e7d7      	b.n	8005e48 <_free_r+0x24>
 8005e98:	d902      	bls.n	8005ea0 <_free_r+0x7c>
 8005e9a:	230c      	movs	r3, #12
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	e7d3      	b.n	8005e48 <_free_r+0x24>
 8005ea0:	6820      	ldr	r0, [r4, #0]
 8005ea2:	1821      	adds	r1, r4, r0
 8005ea4:	428a      	cmp	r2, r1
 8005ea6:	bf04      	itt	eq
 8005ea8:	6811      	ldreq	r1, [r2, #0]
 8005eaa:	6852      	ldreq	r2, [r2, #4]
 8005eac:	6062      	str	r2, [r4, #4]
 8005eae:	bf04      	itt	eq
 8005eb0:	1809      	addeq	r1, r1, r0
 8005eb2:	6021      	streq	r1, [r4, #0]
 8005eb4:	605c      	str	r4, [r3, #4]
 8005eb6:	e7c7      	b.n	8005e48 <_free_r+0x24>
 8005eb8:	bd38      	pop	{r3, r4, r5, pc}
 8005eba:	bf00      	nop
 8005ebc:	200000c8 	.word	0x200000c8

08005ec0 <_malloc_usable_size_r>:
 8005ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec4:	1f18      	subs	r0, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bfbc      	itt	lt
 8005eca:	580b      	ldrlt	r3, [r1, r0]
 8005ecc:	18c0      	addlt	r0, r0, r3
 8005ece:	4770      	bx	lr

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
